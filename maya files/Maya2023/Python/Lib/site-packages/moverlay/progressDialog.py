"""
    ProgressDialog API
"""

from PySide2 import QtWidgets
from .progressDialogImpl import ProgressDialogImpl
from .progressBar import ProgressBar


class ProgressDialog(ProgressDialogImpl):
    """
    Implements a standard tutorial dialog with a header, descriptive text, an
    optional progress bar and one or two buttons.
    """

    def __init__(self, parent=None):
        super(ProgressDialog, self).__init__(parent)

    def setTitle(self, title):
        """ set the title of the dialog. HTML is supported, CSS will set the font and size """
        super(ProgressDialog, self).setTitle(title)

    def setBodyText(self, text):
        """ set the body text of the dialog. HTML is supported, CSS will set the font and size """
        super(ProgressDialog, self).setBodyText(text)

    def button(self, index):
        # type: (int) -> QtWidgets.QPushButton
        """ gets a button by zero-based index """
        return super(ProgressDialog, self).button(index)

    def theDialog(self):
        """ returns the window that must be used to move or destroy the dialog,
        either dialog, or the dropshadow parent window if one was added
        """
        return super(ProgressDialog, self).theDialog()

    def hideButton(self, index, hide=True):
        """ hide or show button by zero-based index """
        super(ProgressDialog, self).hideButton(index,  hide)

    def setupButton(self, index, text="", callback=None):
        """ sets the button text and the click callback. If callback is None, keep existing callback
            callback is in the of function(ProgressDialog, buttonIndex) -> None """
        super(ProgressDialog, self).setupButton(index, text, callback)

    def setCloseCallback(self, callback):
        """ set a callback for when the close button is clicked, in the form of function(ProgressDialog) -> None
        without a callback set, the dialog will call self.deleteLater() when button is clicked """
        super(ProgressDialog, self).setCloseCallback(callback)

    def showAndRaise(self):
        """ show the dialog in its current state """
        super(ProgressDialog, self).showAndRaise()

    def progressBar(self):
        # type: () -> ProgressBar
        """ returns the progress bar. Setting a non-zero max step will show it, and vice-versa """
        return super(ProgressDialog, self).progressBar()

    def setThumbsUpThumbsDownButtons(self, doIt):
        """ replaces the default buttons with thumbs up/thumbs down icon buttons """
        return super(ProgressDialog, self).setThumbsUpThumbsDownButtons(doIt)

    def setThumbsFeedbackText(self, thumbsUpFeedbackText, thumbsDownFeedbackText):
        """ Set the text label shown when up or down thumb is pressed """
        super(ProgressDialog, self).setThumbsFeedbackText(thumbsUpFeedbackText, thumbsDownFeedbackText)

    def setupSubmitFeedback(self, placeholderText, button, submitCallback):
        """ Setup submit button text, feedback placeholder and submit callback """
        super(ProgressDialog, self).setupSubmitFeedback(placeholderText, button, submitCallback)

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
