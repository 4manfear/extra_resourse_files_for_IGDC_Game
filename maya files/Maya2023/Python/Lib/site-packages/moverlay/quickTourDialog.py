"""
helpers maya quicktour, with a magnifier, and dialog with animated gif, text and progress bar
"""

from PySide2 import QtWidgets
from PySide2.QtCore import Qt, QSize, QPoint, QRect
from PySide2.QtGui import QPainter, QPen, QPainterPath, QColor, QBrush, QMovie, QScreen
from PySide2.QtWidgets import QSizePolicy
from .utils import DPIScale
from .higDialog import HIGDialog
from .utils import LOREN_IPSUM
from .progressStepper import ProgressStepper

OUTER_RING_SIZE = DPIScale(64)
INNER_RING_RADIUS = DPIScale(18)


class AnchorType(object):
    """ Enum used for the Hotspot anchor API """
    BottomRight = 1
    BottomLeft = 2


class Hotspot(QtWidgets.QWidget):
    """ draws a blue circle to highlight an area of the screen """

    def __init__(self, parent):
        super(Hotspot, self).__init__(parent)
        windowFlags = Qt.Tool | Qt.FramelessWindowHint
        self.setAttribute(Qt.WA_TranslucentBackground, True)
        self.setWindowFlags(windowFlags)
        self.setFixedSize(self.sizeHint())

    def moveOnMainWindow(self, relativePos):
        # type: (QPoint) -> None
        """ like move(), but relative to main window instead of screen """
        globalPos = self.parent().mapToGlobal(relativePos)
        self.move(globalPos)

    def moveOtherWindowToAnchor(self, window, anchor=AnchorType.BottomRight):
        # type: (QtWidgets.QWidget, int) -> None
        """ move another window to one of our corners. Right now, assumes that window is hig dialog """
        rect = self.rect()
        if anchor == AnchorType.BottomRight:
            offset = QPoint(INNER_RING_RADIUS, INNER_RING_RADIUS)
            pos = self.mapToGlobal(rect.center() + offset)
        elif anchor == AnchorType.BottomLeft:
            window.adjustSize()  # important if window hasn't had the chance to draw yet
            offset = QPoint(-INNER_RING_RADIUS, INNER_RING_RADIUS)
            windowWidth = window.windowRect().width()
            pos = self.mapToGlobal(rect.center() + offset)
            pos.setX(pos.x() - windowWidth)

        qWindow = window.windowHandle()
        if qWindow:
            screen = qWindow.screen()  # type: QScreen
            availableRect = screen.availableGeometry()  # type: QRect
            windowHeight = window.windowRect().height()
            if pos.y() + windowHeight > availableRect.bottom():
                pos.setY(availableRect.bottom() - windowHeight)

            windowWidth = window.windowRect().width()
            if pos.x() + windowWidth > availableRect.width():
                if anchor == AnchorType.BottomRight:
                    self.moveOtherWindowToAnchor(window, AnchorType.BottomLeft)
                    return
                pos.setY(availableRect.right() - windowWidth)

        window.moveToScreenPos(pos)
        window.raise_()

    def paintEvent(self, _):
        """ draw the progess bar """
        painter = QPainter(self)
        painter.save()
        painter.setRenderHint(QPainter.Antialiasing)

        rect = self.rect()
        path = QPainterPath()
        path.addEllipse(rect.center(), OUTER_RING_SIZE /
                        2-1, OUTER_RING_SIZE/2-1)
        path.addEllipse(rect.center(), INNER_RING_RADIUS, INNER_RING_RADIUS)

        outerBlue = QBrush(QColor("#4C38ABDF"))
        painter.fillPath(path, outerBlue)

        ringPen = QPen(QColor("#38ABDF"), DPIScale(3))
        painter.setPen(ringPen)
        painter.drawEllipse(
            rect.center(), INNER_RING_RADIUS, INNER_RING_RADIUS)

        painter.restore()

    def sizeHint(self):
        return QSize(OUTER_RING_SIZE, OUTER_RING_SIZE)


class TourDialog(HIGDialog):
    """ dialog with animated gif, text and progress bar """

    def __init__(self, parent=None):
        super(TourDialog, self).__init__(parent)
        self._stepCallback = None
        self._movie = None

        margin = DPIScale(16)

        topBox = QtWidgets.QVBoxLayout()
        topBox.setContentsMargins(margin, 0, margin, margin)
        topBox.setSpacing(DPIScale(8))
        self.titleLabel = QtWidgets.QLabel("Create Polygon Objects/s")
        self.titleLabel.setProperty("fontstyle", "title")
        topBox.addWidget(self.titleLabel)

        self.imageArea = QtWidgets.QLabel()
        self.imageArea.setFixedSize(DPIScale(384), DPIScale(160))
        self.imageArea.setStyleSheet(" background-color: #545454;")
        topBox.addWidget(self.imageArea)

        self.textArea = QtWidgets.QLabel(LOREN_IPSUM)
        self.textArea.setWordWrap(True)
        self.textArea.setProperty("fontstyle", "normal")
        self.textArea.setOpenExternalLinks(True)
        topBox.addWidget(self.textArea)

        # hacks to get the size working
        self.textArea.setFixedWidth(DPIScale(384))
        self.textArea.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)
        self.setSizePolicy(QSizePolicy.Fixed, QSizePolicy.Fixed)

        self._progress = ProgressStepper()
        self._progress.stepClicked.connect(self._stepClicked)
        topBox.addWidget(self._progress)

        self.mainLayout.addLayout(topBox)

        bottomBox = QtWidgets.QHBoxLayout()
        bottomBox.setContentsMargins(margin, margin, margin, margin)

        self.learnModeButton = QtWidgets.QLabel()
        self.setLearnMoreButton("Learn More", "http://www.autodesk.com")
        self.learnModeButton.setProperty("fontstyle", "normal")
        self.learnModeButton.setOpenExternalLinks(True)
        bottomBox.addWidget(self.learnModeButton, 40)

        buttonLayout = QtWidgets.QHBoxLayout()
        buttonLayout.setSpacing(DPIScale(8))

        leftButton = QtWidgets.QPushButton("Back")
        leftButton.setProperty("buttontype", "Outline")

        rightButton = QtWidgets.QPushButton("Next")
        rightButton.setProperty("buttontype", "Solid")
        rightButton.setDefault(True)

        self.buttons = [leftButton, rightButton]

        def create_lambda(index):
            return lambda: self._callButtonCallback(index)

        for index in range(len(self.buttons)):
            button = self.buttons[index]
            button.clicked.connect(create_lambda(index))
            buttonLayout.addWidget(button)

        bottomBox.addLayout(buttonLayout, 60)
        self.mainLayout.addLayout(bottomBox)

    def _callButtonCallback(self, index):
        if index == 0:
            self._progress.decrement()
        else:
            self._progress.increment()
        self._callStepCallback()

    def _stepClicked(self, step):
        self._progress.setCurrentStep(step)
        self._callStepCallback()

    def _callStepCallback(self):
        if self._stepCallback:
            self._stepCallback(self, self._progress.currentStep())

    def button(self, index):
        # type (int) -> QtWidgets.QPushButton
        """ API : gets one of two push buttons by zero-based index """
        return self.buttons[index]

    def progressBar(self):
        # type (int)  -> ProgressStepper
        """ API : returns the progress bar """
        return self._progress

    def setLearnMoreButton(self, textLabel, linkurl):
        """ API : set the Learn More button text and http://link"""
        # code here required because we can't customize the link color other ways
        text = '<a href="{link}" style="color:#6DD2FF;text-decoration:none;">{text}</a>'.format(
            text=textLabel, link=linkurl)
        self.learnModeButton.setText(text)

    def setMovie(self, movieurl):
        """ API : set the URL of the animated gif or movie to show at the top """
        if self._movie:
            self._movie.stop()
            self._movie = None

        if movieurl:
            self._movie = QMovie(movieurl)
            self.imageArea.setMovie(self._movie)
            self._movie.setScaledSize(self.imageArea.size())
            self._movie.start()
        else:
            self._movie = None

    def setStepCallback(self, callback):
        """ set a callback when step change in the form of function(TourDialog, stepIndex) -> None"""
        self._stepCallback = callback
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
