"""
    dialog box that has a HIG titlebar, but no content
"""

from PySide2 import QtWidgets, QtGui
from PySide2.QtCore import Qt, QPoint, QRect
from . import higCSS, higCloseButton
from .utils import DPIScale


class HIGDialog(QtWidgets.QDialog):

    def __init__(self, parent=None):
        super(HIGDialog, self).__init__(parent)
        self.closeCallback = None
        self.buttonCallbacks = [None, None]
        self.dropShadowParent = None

        self.windowMoveOffset = QPoint(0, 0)
        self.allowMmoveWindow = False

        self.setStyleSheet(higCSS.getHIGStyleSheet())

        windowFlags = Qt.Tool | Qt.FramelessWindowHint
        self.setWindowFlags(windowFlags)

        self.mainLayout = QtWidgets.QVBoxLayout()
        self.mainLayout.setContentsMargins(0, 0, 0, 0)
        self.mainLayout.setSpacing(0)

        titlebarLayout = QtWidgets.QHBoxLayout()
        margin = DPIScale(8)
        titlebarLayout.setContentsMargins(margin, margin, margin, margin)
        closeButton = higCloseButton.HIGCloseButton()
        closeButton.clicked.connect(self._closedButtonClicked)
        titlebarLayout.addWidget(closeButton, 0, Qt.AlignRight)
        self.mainLayout.addLayout(titlebarLayout)

        self.setLayout(self.mainLayout)

    def theDialog(self):
        """ API """
        return self.dropShadowParent if self.dropShadowParent else self

    def destroy(self):
        # can't let code fall to QWidget's destroy(), it doesn't actually delete the window
        self.deleteLater()

    def setAsLabel(self, text):
        # type: (str) -> QtWidgets.QLabel
        """ set the dialog box to contain a single QLabel """
        layout = QtWidgets.QVBoxLayout()
        layout.setContentsMargins(0, 0, 0, 0)
        layout.setSpacing(0)
        margin = DPIScale(16)
        layout.setContentsMargins(margin, 0, margin, margin)
        label = QtWidgets.QLabel(text)
        label.setProperty("fontstyle", "normal")
        label.setOpenExternalLinks(True)
        label.setWordWrap(True)
        layout.addWidget(label, 0, Qt.AlignTop)
        self.mainLayout.addLayout(layout)
        return label

    def mousePressEvent(self, event):
        # type: (QtGui.QMouseEvent) -> None
        """ allows moving the window by clicking anywhere above the horizontal line """
        self.windowMoveOffset = event.pos()
        self.allowMmoveWindow = True

    def mouseMoveEvent(self, event):
        """ allows moving the window by clicking anywhere above the horizontal line """
        # note: this code isn't being called when QLabel is displaying HTML text
        if self.allowMmoveWindow:
            toMove = self.theDialog()
            position = toMove.pos()
            position = position + event.pos() - self.windowMoveOffset
            toMove.move(position)

    def _closedButtonClicked(self, _):
        if self.closeCallback:
            self.closeCallback(self)
        else:
            self.theDialog().deleteLater()

    def _callButtonCallback(self, index):
        if self.buttonCallbacks[index]:
            self.buttonCallbacks[index](self, index)

    def setCloseCallback(self, callback):
        """ API : set a callback for when the close button is clicked, in the form of function(ProgressDialog) -> None
        without a callback set, the dialog will call self.deleteLater() when button is clicked """
        self.closeCallback = callback

    def moveToScreenPos(self, pos):
        # type: (QPoint) -> None
        """ move window to an exact screen coord, taking into account any drop shadow object """
        if self.theDialog() == self:
            self.move(pos)
        else:
            self.theDialog().moveToScreenPos(pos)

    def windowRect(self):
        # type: () -> QRect
        """ return the window rectangle in screen coordinates, without any drop shadow """
        return self.geometry()

    def moveOnMainWindow(self, relativePos):
        # type: (QPoint) -> None
        """ like move(), but relative to main window instead of screen """
        globalPos = self.parent().mapToGlobal(relativePos)
        self.move(globalPos)

    def showAndRaise(self):
        """ API """
        self.theDialog().show()
        self.theDialog().raise_()

    def setDropShadowParent(self, parent):
        """ internal API used by HIGDropShadow """
        self.dropShadowParent = parent
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
