"""
    private implementation of the overlay manager
"""

# Qt
from moverlay.enums import OverlayStyle
from PySide2 import QtCore, QtGui

from .overlay import Overlay
from .overlayDef import OverlayDef


class DelayedNotification:
    """ internal struct for delayed notifications """

    def __init__(self):
        """ dictionary used to store all the parent windows that were notified of position changes """
        self.windowsThatChanged = dict()
        self.timerIsSet = False

    def addPosChanged(self, qwindow):
        # type: (QtGui.QWindow) -> None
        """ add one item to track """
        self.windowsThatChanged[qwindow] = True

    def clear(self):
        """ clear all tracked item after notifs have been processed """
        self.windowsThatChanged.clear()
        self.timerIsSet = False


class OverlayManagerImpl(QtCore.QObject):
    """ private implementation class to create and manage overlay windows """

    def __init__(self, mainApplicationWindow):
        super(OverlayManagerImpl, self).__init__()
        self._mainWindow = mainApplicationWindow
        self._overlays = []
        self._delayedNotif = DelayedNotification()
        self._watchWindow(self._mainWindow.windowHandle())

    def getMainWindow(self):
        return self._mainWindow

    def createOverlay(self, overlayDef):
        # type: (OverlayDef) -> Overlay
        """ create an overlay, initially hidden """
        overlay = Overlay(self._mainWindow, overlayDef)
        self._overlays.append(overlay)
        return overlay

    def createDarkeningOverlay(self):
        overlayDef = OverlayDef(style=OverlayStyle.Darkening)
        overlay = Overlay(self._mainWindow, overlayDef)
        self._overlays.append(overlay)
        return overlay

    def deleteOverlay(self, overlay):
        # type: (Overlay) -> None
        overlay.destroy()
        self._overlays.remove(overlay)

    def deleteAll(self):
        for overlay in self._overlays:
            overlay.destroy()
        self._overlays = []

    def showAll(self, show=True):
        """ show or hide all the overlays """
        for overlay in self._overlays:
            overlay.show() if show else overlay.hide()

    def _watchWindow(self, qwindow):
        # type: (QtGui.QWindow) -> None
        """ setup notifications for the given window """
        qwindow.xChanged.connect(self._windowMoved)
        qwindow.yChanged.connect(self._windowMoved)
        qwindow.widthChanged.connect(self._windowMoved)
        qwindow.heightChanged.connect(self._windowMoved)

    def _windowMoved(self, _):
        if not self._delayedNotif.timerIsSet:
            QtCore.QTimer.singleShot(0, self._qWindowNotifTimerCallback)
            self._delayedNotif.timerIsSet = True
        self._delayedNotif.addPosChanged(self.sender())

    def _qWindowNotifTimerCallback(self):
        for window, _ in self._delayedNotif.windowsThatChanged.items():
            for overlay in self._overlays:
                overlay.impl().onWindowMoved(window)
        self._delayedNotif.clear()
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
