"""
    windows that are overlayed on top of an application
"""

# Qt
from PySide2.QtCore import QSize, QRect, QObject, Signal
from PySide2 import QtWidgets

# internal
from .enums import RelTo, Direction
from .overlayImpl import OverlayImpl
from .overlayDef import OverlayDef, OverlayRect, OverlayRectList
from .utils import DPIScale
# pylint: disable=useless-super-delegation

from typing import List


class Overlay(QObject):

    offsetChanged = Signal(QObject, QSize)  # first param: Overlay

    """ windows that are overlayed on top of an application """

    def __init__(self, parent, overlayDef):
        # type: (QObject, OverlayDef) -> None
        super(Overlay, self).__init__(parent)
        self._impl = OverlayImpl(parent, self, overlayDef)

    def destroy(self):
        """ destroys an overlay """
        self.impl().destroy()

    def attachToWindow(self, reference=RelTo.TopLeft, offset=QSize(0, 0)):
        # type: (int, QSize) -> None
        """ attach this overlay to a border of the parent window """
        self.impl().attachToWindow(reference, offset)

    def setClickCallback(self, callback):
        """ set a function to be called on mouse click """
        """ the function is of the form: function(Overlay, QMouseEvent) -> None """
        self.impl().setClickCallback(callback)

    def setUndarkenRects(self, rects):
        # type: (OverlayRectList) -> None
        """ when overlayer is Darkening mode, set rectangles which are not dark """
        self.impl().setUndarkenRects(rects)

    def addSpeechBubbleTail(self, direction, ratio=0.5):
        # type: (Direction, float) -> None
        """
            Adds a speech bubble tail at pointing in the given direction, with the given ratio alongside the border of the overlay.
            Direction.Top with a ratio of 0.5 sets the tail in the middle of the top border, pointing up
            multiple tails can be added. The overlay should have been created with the OverlayStyle.SpeechBubble style in the OverlayDef
        """
        self.impl().addSpeechBubbleTail(direction, ratio)

    def setAsLabel(self, text):
        # type: (str) -> QtWidgets.QLabel
        """ set the overlay to contain a single QLabel """
        return self.impl().setAsLabel(text)

    def setAsWidget(self, widget):
        # type: (QtWidgets.QWidget) -> QtWidgets.QWidget
        """ sets a custom widget to take the entire area """
        self.impl().setAsWidget(widget)

    def setSize(self, width, height):
        """ set the size of the overlay """
        self._impl.setSize(width, height)

    def setMaximumWidth(self, width):
        """ sets the overlay to be a maximum width, so that the content will grow it vertically """
        self._impl.setFixedWidth(DPIScale(width))

    def size(self):
        # type () -> QSize
        """ returns QSize of the overlay """
        return self._impl.size()

    def show(self, showIt=True):
        """ show or hide the overlay """
        if showIt:
            self._impl.show()
        else:
            self._impl.hide()

    def impl(self):
        # type () -> OverlayImpl
        """ private method for manager to get the implemementation """
        return self._impl

    def getSubWidget(self):
        """ is this overlay is one widget, for example a QLabel, return it """
        return self._impl.getSubWidget()

    def widget(self):
        # type () -> QtWidgets.QWidget
        return self.impl()

    def raise_(self):
        """ raise the widget to the top Z-Order """
        self.widget().raise_()

    def stackUnder(self, other):
        """ Places the widget under other """
        self.impl().stackUnder(other)

    def lower(self, other):
        """ raise the widget to the bottom of Z-Order """
        self.widget().lower()

    def animateOffset(self, endPosition, endCallBack=None):
        # type : (QSize, Any) -> None
        """ animates the offset parameter of the overlay. Callback is in the form of function(overlay) """
        self.impl().animateOffset(endPosition, endCallBack)
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
