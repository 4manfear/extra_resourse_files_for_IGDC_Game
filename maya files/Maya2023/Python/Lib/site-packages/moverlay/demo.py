"""
    A demo for using overlays.  Main API is demoOverlays()
"""


# Qt
from PySide2.QtCore import QPoint, QRect, QSize, Qt
from PySide2.QtGui import QColor, QPainter, QPen, QMouseEvent, QFont
from PySide2 import QtWidgets

# internal
from . import utils
from .overlayDef import OverlayDef, OverlayRect
from .manager import OverlayManager
from .enums import Direction, RelTo, OverlayStyle
from .progressDialog import ProgressDialog
from .higDropShadow import HIGDropShadow
from moverlay import higDropShadow
from .higDialog import HIGDialog
from .quickTourDialog import AnchorType, Hotspot, TourDialog, INNER_RING_RADIUS
from .utils import LOREN_IPSUM

HOTSPOT_OVERLAY = None


class DemoHighlightAreas(QtWidgets.QWidget):
    def __init__(self):
        super(DemoHighlightAreas, self).__init__(None)
        self.allrects = {"ToolBox":   QRect(2, 173, 40, 727),
                         "Shelf":  QRect(2, 103, 1916, 64),
                         "Outliner":  QRect(48, 190, 260, 710),
                         "HelpLine":  QRect(2, 981, 812, 28),
                         "MainPane":  QRect(314, 173, 1123, 727),
                         "CommandLine":  QRect(820, 981, 1098, 28),
                         "AttributeEditor":  QRect(1443, 173, 460, 727),
                         "RangeSlider":  QRect(2, 946, 1916, 29),
                         "ChannelBoxLayerEditor":  QRect(1443, 173, 260, 727),
                         "StatusLine":  QRect(2, 74, 1916, 23),
                         "TimeSlider":  QRect(2, 906, 1916, 34)}

        self.helpText = ""
        self.setMouseTracking(True)

    def paintEvent(self, event):
        painter = QPainter(self)
        for key in self.allrects:
            rect = self.allrects[key]
            pen = QPen()
            pen.setWidth(2)
            pen.setColor(QColor(0, 0, 0, 128))
            painter.setPen(pen)
            rect.translate(1, 1)
            painter.drawRect(rect)
            rect.translate(-1, -1)

            pen.setColor(QColor(192, 0, 0))
            painter.setPen(pen)
            painter.drawRect(rect)

            pen.setColor(QColor(0, 0, 128))
            painter.setPen(pen)
            painter.setFont(QFont("Arial", 30))
            painter.drawText(self.rect().translated(QPoint(1, 1)),
                             Qt.AlignCenter, self.helpText)

            pen.setColor(QColor(255, 255, 255))
            painter.setPen(pen)
            painter.setFont(QFont("Arial", 30))
            painter.drawText(self.rect(),
                             Qt.AlignCenter, self.helpText)

    def mouseMoveEvent(self, event):
        # type: (QMouseEvent) -> None
        pos = event.pos()
        for key in self.allrects:
            rect = self.allrects[key]
            if rect.contains(pos):
                self.helpText = key
        self.update()


def _tourStepChanged(dialog, step):
    if step % 2:
        dialog.textArea.setText(LOREN_IPSUM+LOREN_IPSUM)
    else:
        dialog.textArea.setText(LOREN_IPSUM)


def _hotspotMoved(overlay, size):
    tourDialog = overlay.tourDlg
    hotspot = overlay.getSubWidget()
    hotspot.moveOtherWindowToAnchor(tourDialog.theDialog())


def demoTourDialog(manager):
    # type: (OverlayManager) -> None
    hotSpot = Hotspot(manager.getMainWindow())
    hotSpot.show()

    overlayDef = OverlayDef(attachment=RelTo.TopLeft,
                            offset=QSize(200, 200), style=OverlayStyle.Custom)
    overlay = manager.createOverlay(overlayDef)
    overlay.setAsWidget(hotSpot)
    overlay.widget().setWindowFlag(Qt.WindowTransparentForInput, True)
    overlay.show()
    HOTSPOT_OVERLAY = overlay

    tourDlg = TourDialog(manager.getMainWindow())
    hinDropShadow = HIGDropShadow(manager.getMainWindow(), tourDlg)
    # , AnchorType.BottomLeft)
    hotSpot.moveOtherWindowToAnchor(tourDlg.theDialog())
    tourDlg.setStepCallback(_tourStepChanged)
    tourDlg.progressBar().resetSteps(0, 12)
    tourDlg.showAndRaise()

    def animationEnded(hotspot):
        hotspot.offsetChanged.disconnect(_hotspotMoved)
        HOTSPOT_OVERLAY.tourDlg = None

    HOTSPOT_OVERLAY.offsetChanged.connect(_hotspotMoved)
    HOTSPOT_OVERLAY.tourDlg = tourDlg
    HOTSPOT_OVERLAY.animateOffset(QSize(100, 40), animationEnded)


class DemoState(object):
    def __init__(self, manager):
        # type: (OverlayManager) -> None
        self._manager = manager
        self._demoState = 0
        self.rectWidget = DemoHighlightAreas()
        self.stages = list()
        self.stages.append(self.demoPostIts)
        self.stages.append(self.demoDarkening)
        self.stages.append(self.demoRects)

    def startDemo(self):
        self._nextStep()

    def _nextStep(self):
        if (self._demoState < len(self.stages)):
            self.stages[self._demoState]()
            self._demoState += 1

    def _createExitButton(self):
        overlayDef = OverlayDef(offset=QSize(40, 40))
        overlayDef.attachment = RelTo.BottomRight
        overlayDef.bgColor = QColor(0, 0xff, 00, 0x80)
        overlay = self._manager.createOverlay(overlayDef)
        overlay.setAsLabel("Exit")
        overlay.setClickCallback(self._exitButtonClicked)
        return overlay

    def _exitButtonClicked(self, overlay, event):
        self._manager.deleteAll()
        self._nextStep()

    def demoPostIts(self):
        manager = self._manager
        """ create all possible attachment """
        x_offset = 40
        y_offset = 40
        offset = QSize(x_offset, y_offset)

        overlayDef = OverlayDef(offset=offset)
        overlayDef.attachment = RelTo.TopLeft
        overlay = manager.createOverlay(overlayDef)
        overlay.setAsLabel("Top Left")

        overlayDef.attachment = RelTo.TopRight
        overlay = manager.createOverlay(overlayDef)
        overlay.setAsLabel("Top Right")

        overlayDef.attachment = RelTo.BottomLeft
        overlay = manager.createOverlay(overlayDef)
        overlay.setAsLabel("Bottom Left")

        overlayDef.attachment = RelTo.Top
        overlayDef.offset = QSize(0, y_offset)
        overlay = manager.createOverlay(overlayDef)
        overlay.setAsLabel("Top")

        overlayDef.attachment = RelTo.Bottom
        overlayDef.offset = QSize(0, y_offset)
        overlay = manager.createOverlay(overlayDef)
        overlay.setAsLabel("Bottom")

        overlayDef.attachment = RelTo.Right
        overlayDef.offset = QSize(x_offset, 0)
        overlay = manager.createOverlay(overlayDef)
        text = "This is the Right side, but it also demos text that will be wrapped to a certain width"
        label = overlay.setAsLabel(text + "\n\n" + text)
        label.setMaximumWidth(100)

        overlayDef.attachment = RelTo.Center
        overlayDef.offset = QSize(0, 0)
        overlay = manager.createOverlay(overlayDef)
        overlay.setAsLabel("Center")

        htmltext = """
        <h1>Things You Can Do</h1>
<h3><span style="color: #ff0000;"><em>right now</em></span></h3>
<ul>
<li>This thing</li>
<li>And also this thing</li>
<li>But maybe not <em>all the things</em></li>
<li>Check <a href="http://www.autodesk.com">http://www.autodesk.com</a> for more info</li>
<br>
</ul>"""

        # speech bubble
        overlayDef.attachment = RelTo.Left
        overlayDef.offset = QSize(48, 25)
        overlayDef.style = OverlayStyle.SpeechBubble
        overlayDef.bgColor = QColor(255, 255, 255, 192)
        overlay = manager.createOverlay(overlayDef)
        overlay.setAsLabel(htmltext)
        overlay.addSpeechBubbleTail(Direction.Top, 0.1)
        overlay.addSpeechBubbleTail(Direction.Left, 0.25)
        overlay.addSpeechBubbleTail(Direction.Right, 0.75)
        overlay.addSpeechBubbleTail(Direction.Bottom, 0.75)

        self._createExitButton()

        # in this demo, we show all the overlays at once at the end
        manager.showAll()

    def demoDarkening(self):
        global HOTSPOT_OVERLAY
        if HOTSPOT_OVERLAY:
            self._manager.destroyOverlay(HOTSPOT_OVERLAY)
            HOTSPOT_OVERLAY = None

        overlay = self._manager.createDarkeningOverlay()

        rects = [OverlayRect(QRect(100, 100, 150, 150)), OverlayRect(
            QRect(0, 0, 50, 200), attachment=RelTo.Left),
            OverlayRect(
            QRect(0, 0, 200, 50), attachment=RelTo.Right, offset=QSize(20, 0))]
        overlay.setUndarkenRects(rects)

        overlay.show()
        self._createExitButton().show()

    def demoRects(self):
        overlayDef = OverlayDef(
            attachment=RelTo.AttachToAllSides, style=OverlayStyle.Custom)
        overlay = self._manager.createOverlay(overlayDef)

        overlay.setAsWidget(self.rectWidget)
        overlay.show()
        exit = self._createExitButton()
        exit.show()
        exit.raise_()


def demoOverlays(manager):
    # type: (OverlayManager) -> None
    demoProgressDialog(manager)
    state = DemoState(manager)
    state.startDemo()
    demoTourDialog(manager)


def progressDialog_closed(dialog):
    # type: (ProgressDialog) -> None
    QtWidgets.QMessageBox.information(None, "", "Progess Dialog Was Closed")
    dialog.theDialog().deleteLater()


def progressDialog_restartStep(dialog, index):
    # type: (ProgressDialog, int) -> None
    """ called when the Restart button is clicked """
    if dialog.progressBar().currentStep() == 5:
        # for testing, I need thumbs down to go back
        dialog.setThumbsUpThumbsDownButtons(False)
        dialog.progressBar().resetSteps(0, 5)
    else:
        QtWidgets.QMessageBox.information(None, "", "Step Restarted")


def progressDialog_nextStep(dialog, index):
    # type: (ProgressDialog, int) -> None
    """ called when the Next button is clicked """
    dialog.progressBar().increment()
    if dialog.progressBar().currentStep() % 2:
        dialog.setBodyText(LOREN_IPSUM+LOREN_IPSUM)
    else:
        dialog.setBodyText(LOREN_IPSUM)
    if dialog.progressBar().currentStep() == 5:
        dialog.progressBar().clear()
        dialog.setThumbsUpThumbsDownButtons(True)


def progressDialog_startClicked(dialog, index):
    # type: (ProgressDialog, int) -> None
    """ called when ther Start button is clicked """
    dialog.setTitle("Select an Object")
    dialog.setBodyText(LOREN_IPSUM)
    dialog.setupButton(0, "Restart Step", progressDialog_restartStep)
    dialog.setupButton(1, "Next", progressDialog_nextStep)
    # the button on the left was initially hidden in demoProgressDialog()
    dialog.hideButton(0, False)

    # set a progress bar
    dialog.progressBar().resetSteps(1, 5)


def demoProgressDialog(manager):
    # type: (OverlayManager) -> None
    hintbox = HIGDialog(manager.getMainWindow())
    hintBoxText = '<img src="' + \
        utils.path2url(utils.getDPIPixmapName("hint")) + '">'
    hintBoxText += "This is a hint box \n\n" + LOREN_IPSUM
    label = hintbox.setAsLabel(hintBoxText)
    label.setMaximumWidth(utils.DPIScale(100))
    hinDropShadow = HIGDropShadow(manager.getMainWindow(), hintbox)

    dialog = ProgressDialog(manager.getMainWindow())
    dropShadow = HIGDropShadow(manager.getMainWindow(), dialog)

    dialog.setTitle("Basic Tutorial")

    dialog.setBodyText("Welcome " + LOREN_IPSUM)

    dialog.setCloseCallback(progressDialog_closed)

    dialog.hideButton(0)  # hide left button for this first dialog
    dialog.setupButton(1, "Start", progressDialog_startClicked)

    dialog.showAndRaise()

    # move the hint box at the rigth of the dialog
    hintbox.theDialog().move(
        dialog.theDialog().mapToGlobal(dialog.rect().topRight()) + QPoint(50, 0))
    hintbox.showAndRaise()
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
