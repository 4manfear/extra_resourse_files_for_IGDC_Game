"""
HIG progress bar
"""

from PySide2 import QtWidgets, QtCore
from PySide2.QtGui import QPainter, QBrush, QColor, QPen
from PySide2.QtCore import Qt
from .utils import DPIScale


class BlueProgressSlider(QtWidgets.QWidget):
    """ only the blue slider part of the progress bar """

    def __init__(self, parent=None):
        super(BlueProgressSlider, self).__init__(parent)
        self.setSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding,
                           QtWidgets.QSizePolicy.Maximum)
        self._progressPercentage = 0.3

    def setPercentage(self, percentage):
        """ all the API we need.. set the progress with a ratio from 0.0 to 1.0 """
        self._progressPercentage = percentage
        self.update()

    def paintEvent(self, _):
        """ draw the progess bar """
        painter = QPainter(self)
        painter.save()

        rect = self.rect()
        pen = QPen(Qt.NoPen)
        painter.setPen(pen)

        grayBrush = QBrush(QColor("#595959"))
        blueBrush = QBrush(QColor("#38abdf"))

        painter.setBrush(grayBrush)
        painter.drawRoundedRect(rect, DPIScale(3), DPIScale(3))

        rect.setRight(rect.width()*self._progressPercentage)
        painter.setBrush(blueBrush)
        painter.drawRoundedRect(rect, DPIScale(3), DPIScale(3))

        painter.restore()

    def sizeHint(self):
        return QtCore.QSize(DPIScale(48), DPIScale(6))


class ProgressBar(QtWidgets.QWidget):
    """
    progress bar that shows a blue slider like "======---------- 10 of 30"
    """

    def __init__(self, parent=None):
        super(ProgressBar, self).__init__(parent)
        self._currentStep = 0
        self._maxSteps = 0
        self._slider = BlueProgressSlider()
        self._label = QtWidgets.QLabel()
        self._label.setProperty("fontstyle", "normal")

        mainLayout = QtWidgets.QHBoxLayout()
        margin = DPIScale(16)
        mainLayout.setContentsMargins(margin, margin, margin, 0)
        mainLayout.setSpacing(DPIScale(8))

        mainLayout.addWidget(self._slider)
        mainLayout.addWidget(self._label)
        self.setLayout(mainLayout)
        self.hide()

    def setCurrentStep(self, newCurrentStep):
        self._currentStep = newCurrentStep
        if self._maxSteps != 0.0:
            self._slider.setPercentage(self._currentStep/self._maxSteps)
            self._label.setText("{cur} of {max}".format(
                cur=self._currentStep, max=self._maxSteps))
        self.update()

    def currentStep(self):
        return self._currentStep

    def increment(self):
        """ increment the current step """
        if self._currentStep < self._maxSteps:
            self.setCurrentStep(self._currentStep + 1)

    def decrement(self):
        """ increment the current step """
        if self._currentStep >= 0:
            self.setCurrentStep(self._currentStep - 1)

    def resetSteps(self, currentStep, maxsteps):
        """ sets maxmium number of steps and the current step  """
        self._maxSteps = maxsteps
        if maxsteps:
            self.setCurrentStep(currentStep)
            self._slider.setPercentage(0.0)
            self.show()
        else:
            self.hide()

    def clear(self):
        """ clear the progress bar, which will result in hiding it """
        self.resetSteps(0, 0)

    def sizeHint(self):
        return QtCore.QSize(DPIScale(48), DPIScale(16))
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
