from typing import Any

# include Qt
from PySide2.QtGui import QPainter, QBrush, QColor, QPen, QPainterPath
from PySide2.QtCore import QPoint, Qt

# internal
from .enums import Direction
from .overlayDef import OverlayDef
from .utils import DPIScale
from moverlay import overlayDef


def drawToolTip(overlay, painter):
    # type: (Any, QPainter) -> None
    painter = QPainter(overlay)
    rect = overlay.rect()
    brush = QBrush(overlay.getBgColor())
    painter.drawRect(rect)
    painter.fillRect(rect, brush)


def drawSpeechBubble(overlay, painter):
    # type: (Any, QPainter) -> None
    #     x2             x3       y1
    #  x1                  x4     y2
    #
    #  x1                  x4     y3
    #     x2             x3       y4
    #
    rect = overlay.rect()

    arrowSize = DPIScale(8)
    cornerSize = DPIScale(16)

    rect.adjust(arrowSize, arrowSize, -arrowSize, -arrowSize)

    x1 = rect.left()
    x2 = x1 + cornerSize
    x4 = rect.right()
    x3 = x4 - cornerSize

    y1 = rect.top()
    y2 = y1 + cornerSize
    y4 = rect.bottom()
    y3 = y4 - cornerSize

    path = QPainterPath()
    # top
    path.moveTo(x1, y2)
    path.arcTo(x1, y1, cornerSize, cornerSize, 180, -90)

    if Direction.Top in overlay.speechBubbleTails:
        ratio = overlay.speechBubbleTails[Direction.Top][0]
        xArrow = x2 if ratio == 0.0 else int((x3-x2)*ratio) + x2
        path.lineTo(xArrow-arrowSize, y1)
        path.lineTo(xArrow, y1-arrowSize)
        path.lineTo(xArrow+arrowSize, y1)

    # right
    path.lineTo(x3, y1)
    path.arcTo(x3, y1, cornerSize, cornerSize, 90, -90)

    # arrow on the right
    if Direction.Right in overlay.speechBubbleTails:
        ratio = overlay.speechBubbleTails[Direction.Right][0]
        yArrow = y2 if ratio == 0.0 else int((y3-y2)*ratio) + y2
        path.lineTo(x4, yArrow-arrowSize)
        path.lineTo(x4+arrowSize, yArrow)
        path.lineTo(x4, yArrow+arrowSize)

    # bottom (going left)
    path.lineTo(x4, y3)
    path.arcTo(x3, y3, cornerSize, cornerSize, 0, -90)

    # arrow on bottom
    if Direction.Bottom in overlay.speechBubbleTails:
        ratio = overlay.speechBubbleTails[Direction.Bottom][0]
        xArrow = x2 if ratio == 0.0 else int((x3-x2)*ratio) + x2
        path.lineTo(xArrow+arrowSize, y4)
        path.lineTo(xArrow, y4+arrowSize)
        path.lineTo(xArrow-arrowSize, y4)

    # left (going up)
    path.lineTo(x2, y4)
    path.arcTo(x1, y3, cornerSize, cornerSize, 270, -90)

    # arrow on left
    if Direction.Left in overlay.speechBubbleTails:
        ratio = overlay.speechBubbleTails[Direction.Left][0]
        yArrow = y2 if ratio == 0.0 else int((y3-y2)*ratio) + y2
        path.lineTo(x1, yArrow+arrowSize)
        path.lineTo(x1-arrowSize, yArrow)
        path.lineTo(x1, yArrow-arrowSize)

    path.closeSubpath()

    brush = QBrush(overlay.getBgColor())
    painter.setBrush(brush)
    pen = QPen(Qt.NoPen)
    pen.setWidth(0)
    pen.setColor(QColor(0, 0, 0))
    painter.setPen(pen)
    painter.drawPath(path)


def drawSpeechBubble_old(overlay, painter):
    # type: (Any, QPainter) -> None
    rc = overlay.rect()
    x1 = 0
    y1 = 0
    x2 = rc.right()
    y2 = rc.bottom()

    pts = [None] * 7
    arrowSize = 8

    # for testing
    direction = Direction.Left
    yArrow = 20

    if direction == Direction.Left:
        x1 = arrowSize
        pts[0] = QPoint(x1, y1)
        pts[1] = QPoint(x2, y1)
        pts[2] = QPoint(x2, y2)
        pts[3] = QPoint(x1, y2)

        pts[4] = QPoint(x1, yArrow + arrowSize)
        pts[5] = QPoint(0, yArrow)
        pts[6] = QPoint(x1, yArrow - arrowSize)
    elif direction == Direction.Right:
        x3 = x2
        x2 = x2 - arrowSize
        pts[0] = QPoint(x1, y1)
        pts[1] = QPoint(x2, y1)

        pts[2] = QPoint(x2, yArrow - arrowSize)
        pts[3] = QPoint(x3, yArrow)
        pts[4] = QPoint(x2, yArrow + arrowSize)

        pts[5] = QPoint(x2, y2)
        pts[6] = QPoint(x1, y2)

    brush = QBrush(overlay.getBgColor())
    painter.setBrush(brush)
    pen = QPen()
    pen.setWidth(0)
    pen.setColor(QColor(0, 0, 0))
    painter.setPen(pen)
    painter.drawPolygon(pts)
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
