"""
implements a transparent parent window that will draw a drop shadow
"""

from PySide2 import QtWidgets
from PySide2.QtCore import Qt, QPoint, QRect, QSize
from PySide2.QtGui import QColor
from PySide2.QtGui import QPainter
from .utils import DPIScale
import sys

SHADOW_MARGIN = DPIScale(16)

if sys.platform == "linux" or sys.platform == "linux2":
    # on this platform, do nothing
    def HIGDropShadow(parent, widgetToShadow):
        return widgetToShadow
else:
    class HIGDropShadow(QtWidgets.QDialog):
        """
        implements a transparent parent window that will draw a drop shadow
        """

        def __init__(self, parent, widgetToShadow):
            super(HIGDropShadow, self).__init__(parent)

            """ adds a drop shadow to a widget, by adding a parent which is a little bigger """
            # NoDropShadowWindowHint avoid double shadow on Mac
            self.setWindowFlags(
                Qt.Tool | (Qt.NoDropShadowWindowHint | Qt.FramelessWindowHint))
            layout = QtWidgets.QHBoxLayout()
            layout.addWidget(widgetToShadow, 0, Qt.AlignTop | Qt.AlignLeft)
            margin = SHADOW_MARGIN
            layout.setContentsMargins(margin, margin, margin, margin)
            self.setLayout(layout)
            layout.setSizeConstraint(QtWidgets.QLayout.SetFixedSize)

            dropShdow = QtWidgets.QGraphicsDropShadowEffect(self)
            dropShdow.setBlurRadius(DPIScale(30))
            offset = DPIScale(8)
            dropShdow.setXOffset(offset)
            dropShdow.setYOffset(offset)
            dropShdow.setColor(QColor(0, 0, 0, 255*40/100))
            self.setGraphicsEffect(dropShdow)
            self.setAttribute(Qt.WA_TranslucentBackground)
            widgetToShadow.setDropShadowParent(self)

        def paintEvent(self, event):
            painter = QPainter(self)
            painter.fillRect(self.rect(), QColor(255, 255, 255, 0))

        def moveToScreenPos(self, pos):
            # type: (QPoint) -> None
            """ move window to an exact screen coord, taking into account any drop shadow object """
            self.move(pos - QPoint(SHADOW_MARGIN, SHADOW_MARGIN))

        def windowRect(self):
            # type: () -> QRect
            """ return the window rectangle in screen coordinates, without any drop shadow """
            rect = self.geometry()
            return rect.marginsRemoved(self.layout().contentsMargins())

        def moveOnMainWindow(self, relativePos):
            # type: (QPoint) -> None
            """ like move(), but relative to main window instead of screen """
            globalPos = self.parent().mapToGlobal(relativePos)
            super(HIGDropShadow, self).move(globalPos.x() -
                                            SHADOW_MARGIN, globalPos.y()-SHADOW_MARGIN)
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
