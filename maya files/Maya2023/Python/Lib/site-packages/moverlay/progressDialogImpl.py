"""
    Private Implementatino for a standard tutorial dialog with a header, descriptive text, an
    optional progress bar and one or two buttons
"""

from PySide2 import QtWidgets, QtCore, QtGui
from .utils import DPIScale, getDPIPixmapName
from .progressBar import ProgressBar
from .higDialog import HIGDialog


def _setRetainSizeWhenHidden(widget, setIt=True):
    # type: (QtWidgets.QWidget, bool) -> None
    policy = widget.sizePolicy()
    policy.setRetainSizeWhenHidden(setIt)
    widget.setSizePolicy(policy)


class ThumbsButton(QtWidgets.QPushButton):
    def __init__(self, style, parent=None):
        super(ThumbsButton, self).__init__(parent)
        size = DPIScale(36)
        self.setFixedSize(size, size)
        self.setFlat(True)
        self.setCheckable(True)
        self.setProperty("btnStyle", "thumbsButton")
        self.setProperty("disabled", "false")

        css = """
        QPushButton[btnStyle=thumbsButton] {{
            border: 0px;
            padding: 0px;
            }}
        QPushButton[btnStyle=thumbsButton][disabled=false] {{
            border-image: url({reg});
            background-repeat: no-repeat;
            }}
        QPushButton[btnStyle=thumbsButton][disabled=true] {{
            border-image: url({disabled});
            background-repeat: no-repeat;
            }}
        QPushButton[btnStyle=thumbsButton]:hover {{
            border-image: url({hover});
            background-repeat: no-repeat;
            }}
        QPushButton[btnStyle=thumbsButton]:checked {{
            border-image: url({checked});
            background-repeat: no-repeat;
            }}
        QPushButton[btnStyle=thumbsButton]:hover:checked {{
            border-image: url({checkedHover});
            background-repeat: no-repeat;
            }}
        """.format(
            reg=getDPIPixmapName(style),
            hover=getDPIPixmapName("hover_"+style),
            checkedHover=getDPIPixmapName("ON_hover_"+style),
            disabled=getDPIPixmapName("disabled_"+style),
            checked=getDPIPixmapName("ON_"+style))

        self.setStyleSheet(css)

    def setDisabledState(self, disabled):
        self.setProperty("disabled", "true" if disabled else "false")
        self.resetStyle()

    def resetStyle(self):
        self.setStyleSheet(self.styleSheet())


class ProgressDialogImpl(HIGDialog):

    def __init__(self, parent=None):
        super(ProgressDialogImpl, self).__init__(parent)

        self.setMinimumWidth(DPIScale(240))

        margin = DPIScale(16)

        # topbox: contains everything above the horizontal separator above the push buttons
        topBox = QtWidgets.QVBoxLayout()
        topBox.setContentsMargins(margin, 0, margin, margin)

        self.titleLabel = QtWidgets.QLabel()
        self.titleLabel.setProperty("fontstyle", "title")
        topBox.addWidget(self.titleLabel)
        topBox.addSpacing(DPIScale(4))

        self.bodyText = QtWidgets.QLabel()
        self.bodyText.setProperty("fontstyle", "normal")
        self.bodyText.setWordWrap(True)

        # for proper wrapping when the body text changes (as tested in the demo with steps % 2)
        self.bodyText.setSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding,
                                    QtWidgets.QSizePolicy.MinimumExpanding)
        self.setSizePolicy(QtWidgets.QSizePolicy.MinimumExpanding,
                           QtWidgets.QSizePolicy.Fixed)
        self.bodyText.setFixedWidth(DPIScale(240)-margin*2)
        self.setFixedWidth(DPIScale(240))

        topBox.addWidget(self.bodyText)

        topBox.addStretch()
        self.mainLayout.addLayout(topBox)

        # horz line
        self.horzLine = QtWidgets.QFrame()
        self.horzLine.setFrameStyle(
            QtWidgets.QFrame.HLine | QtWidgets.QFrame.Plain)
        self.horzLine.setObjectName("HIGHLineSeparator")
        self.mainLayout.addWidget(self.horzLine)

        # progress bar
        self._progressBar = ProgressBar()
        self.mainLayout.addWidget(self._progressBar)

        # button area
        self.buttonArea = QtWidgets.QWidget()
        buttonLayout = QtWidgets.QHBoxLayout()
        buttonLayout.setSpacing(DPIScale(8))
        buttonLayout.setContentsMargins(margin, margin, margin, margin)
        self.buttonArea.setLayout(buttonLayout)

        self._createButtons()
        self.mainLayout.addWidget(self.buttonArea)

        # thumbs/feedback area
        self._createFeedbackArea(margin)

        self.mainLayout.addWidget(self.feedbackArea)
        self.textFeedbackMode = False
        self.thumbsmode = False

    def progressBar(self):
        # type: () -> ProgressBar
        return self._progressBar

    def sizeHint(self):
        return QtCore.QSize(DPIScale(240), DPIScale(240))

    def mousePressEvent(self, event):
        # type (QtGui.QMouseEvent) -> None
        """ allows moving the window by clicking anywhere above the horizontal line """
        super(ProgressDialogImpl, self).mousePressEvent(event)
        horzLinePos = self.horzLine.mapToParent(QtCore.QPoint(0, 0))
        self.allowMmoveWindow = event.pos().y() < horzLinePos.y()

    def _callButtonCallback(self, index):
        if self.buttonCallbacks[index]:
            self.buttonCallbacks[index](self, index)

    def setTitle(self, title):
        """ API """
        self.titleLabel.setText(title)

    def setBodyText(self, text):
        """ API """
        self.bodyText.setText(text)
        self.bodyText.adjustSize()

    def setThumbsFeedbackText(self, thumbsUpFeedbackText, thumbsDownFeedbackText):
        """ API """
        self.thumbsUpFeedbackLabel = thumbsUpFeedbackText
        self.thumbsDownFeedbackLabel = thumbsDownFeedbackText

    def setupSubmitFeedback(self, placeholderText, button, submitCallback):
        """ API """
        self.feedbackText.setPlaceholderText(placeholderText)
        self.feedbackSubmit.setText(button)
        self._thumbFeedbackCallback = submitCallback
        self.textFeedbackMode = True

    def button(self, index):
        # type: (int) -> QtWidgets.QPushButton
        """ API """
        return self.buttons[index]

    def hideButton(self, index, hide):
        """ API """
        if hide:
            self.buttons[index].hide()
        else:
            self.buttons[index].show()

    def setupButton(self, index, text, callback):
        """ API """
        self.buttons[index].setText(text)
        if callback:
            self.buttonCallbacks[index] = callback

    def _createButtons(self):
        leftButton = QtWidgets.QPushButton("Restart Step")
        leftButton.setProperty("buttontype", "Outline")

        rightButton = QtWidgets.QPushButton("Next")
        rightButton.setProperty("buttontype", "Solid")
        rightButton.setDefault(True)

        self.buttons = [leftButton, rightButton]

        def create_lambda(index):
            return lambda: self._callButtonCallback(index)

        for index in range(len(self.buttons)):
            button = self.buttons[index]
            _setRetainSizeWhenHidden(button)
            button.clicked.connect(create_lambda(index))
            self.buttonArea.layout().addWidget(button)

    def _createThumbButtons(self, margin):
        thumbsLayout = QtWidgets.QHBoxLayout()
        thumbsLayout.setContentsMargins(margin, 0, margin, margin)

        self.thumbsUp = ThumbsButton("thumbUP")
        self.thumbsUp.clicked.connect(self._thumbsUpPressed)
        thumbsLayout.addWidget(self.thumbsUp)

        separator = QtWidgets.QFrame()
        separator.setObjectName("HIGHLineSeparator")
        separator.setFixedWidth(DPIScale(1))
        thumbsLayout.addWidget(separator)

        self.thumbsDown = ThumbsButton("thumbDown")
        self.thumbsDown.clicked.connect(self._thumsDownPressed)
        thumbsLayout.addWidget(self.thumbsDown)
        return thumbsLayout

    def _createFeedbackLabel(self, margin):
        self.feedbackLabel = QtWidgets.QLabel()
        self.feedbackLabel.setProperty("fontstyle", "normal")

        feedbackLabelLayout = QtWidgets.QHBoxLayout()
        feedbackLabelLayout.setContentsMargins(margin, 0, margin, 0)
        feedbackLabelLayout.addWidget(self.feedbackLabel)
        return feedbackLabelLayout

    def _createFeedbackText(self, margin):
        self.feedbackText = QtWidgets.QTextEdit()
        self.feedbackText.setProperty("fontstyle", "normal")

        self.feedbackSubmit = QtWidgets.QPushButton()
        self.feedbackSubmit.setProperty("buttontype", "Solid")
        self.feedbackSubmit.setDefault(True)
        self.feedbackSubmit.setMinimumSize(QtCore.QSize(DPIScale(104), DPIScale(24)))
        self.feedbackSubmit.clicked.connect(self._thumbFeedbackSubmit)

        submitButtonLayout = QtWidgets.QHBoxLayout()
        submitButtonLayout.setContentsMargins(0, 0, 0, 0)
        submitButtonLayout.addStretch()
        submitButtonLayout.addWidget(self.feedbackSubmit)

        feedbackMargin = DPIScale(9)
        feedbackTextLayout = QtWidgets.QVBoxLayout()
        feedbackTextLayout.setContentsMargins(feedbackMargin, 0, feedbackMargin, margin)
        feedbackTextLayout.setSpacing(DPIScale(18))
        feedbackTextLayout.addWidget(self.feedbackText)
        feedbackTextLayout.addLayout(submitButtonLayout)
        return feedbackTextLayout

    def _createTextFeedbackArea(self, margin):
        feedbackLabelLayout = self._createFeedbackLabel(margin)
        feedbackTextLayout = self._createFeedbackText(margin)

        textFeedbackLayout = QtWidgets.QVBoxLayout()
        textFeedbackLayout.setContentsMargins(0, 0, 0, 0)
        textFeedbackLayout.addLayout(feedbackLabelLayout)
        textFeedbackLayout.addLayout(feedbackTextLayout)

        textFeedbackArea = QtWidgets.QWidget()
        textFeedbackArea.setLayout(textFeedbackLayout)
        return textFeedbackArea

    def _createFeedbackArea(self, margin):
        # thumbs
        thumbsLayout = self._createThumbButtons(margin)

        # text feedback area
        self.textFeedbackArea = self._createTextFeedbackArea(margin)

        # hide text feedback by default
        self.textFeedbackArea.hide()

        feedbackAreaLayout = QtWidgets.QVBoxLayout()
        feedbackAreaLayout.setContentsMargins(0, 0, 0, 0)
        feedbackAreaLayout.addLayout(thumbsLayout)
        feedbackAreaLayout.addWidget(self.textFeedbackArea)

        self.thumbsUpFeedbackLabel = ''
        self.thumbsDownFeedbackLabel = ''

        self.feedbackArea = QtWidgets.QWidget()
        self.feedbackArea.setLayout(feedbackAreaLayout)
        self.feedbackArea.hide()

    def _thumbsUpPressed(self):
        self._thumbPressed(True)

    def _thumsDownPressed(self):
        self._thumbPressed(False)

    def _thumbPressed(self, up):
        if not self.thumbsmode:
            return

        self.thumbsUp.setChecked(up)
        self.thumbsUp.setDisabledState(not up)

        down = not up
        self.thumbsDown.setChecked(down)
        self.thumbsDown.setDisabledState(not down)

        if self.textFeedbackMode:
            if up:
                self.feedbackLabel.setText(self.thumbsUpFeedbackLabel)
            else:
                self.feedbackLabel.setText(self.thumbsDownFeedbackLabel)

            self.textFeedbackArea.show()
        else:
            self._callButtonCallback(0 if up else 1)

    def _thumbFeedbackSubmit(self):
        if self._thumbFeedbackCallback:
            self._thumbFeedbackCallback(self, 
                self.thumbsUp.isChecked(), 
                self.feedbackText.toPlainText())

    def setThumbsUpThumbsDownButtons(self, doIt):
        if doIt == self.thumbsmode:
            return

        if doIt:
            self.horzLine.hide()
            self.buttonArea.hide()
            self.feedbackArea.show()
        else:
            self.horzLine.show()
            self.buttonArea.show()
            self.feedbackArea.hide()

        self.thumbsmode = doIt
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
