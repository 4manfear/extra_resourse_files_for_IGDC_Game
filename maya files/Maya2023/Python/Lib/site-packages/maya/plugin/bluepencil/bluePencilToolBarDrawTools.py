import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds as cmds

from .bluePencilToolBarContent import buildPopup, checkableButton, CONTROL_SPACING

# Limit of most size sliders
SOFT_MAX_TOOL_SIZE = 100

# Hard size limit
MAX_TOOL_SIZE = 250

def updatePencilOptions(size=None, opacity=None, pressureOpacity=None, pressureSize=None):
    values = cmds.bluePencilUtil(query=True, pencilOptions=True)
    size = size if size != None else values[0]
    opacity = opacity if opacity != None else values[1]
    pressureOpacity = pressureOpacity if pressureOpacity != None else values[2]
    pressureSize = pressureSize if pressureSize != None else values[3]

    cmds.bluePencilUtil(pencilOptions=(size, opacity, pressureOpacity, pressureSize))

def updateBrushOptions(size=None, opacity=None, hardness=None, pressureOpacity=None, pressureSize=None):
    values = cmds.bluePencilUtil(query=True, brushOptions=True)
    size = size if size != None else values[0]
    opacity = opacity if opacity != None else values[1]
    hardness = hardness if hardness != None else values[2]
    pressureOpacity = pressureOpacity if pressureOpacity != None else values[3]
    pressureSize = pressureSize if pressureSize != None else values[4]

    cmds.bluePencilUtil(brushOptions=(size, opacity, hardness, pressureOpacity, pressureSize))

def updateEraserOptions(size=None, opacity=None, hardness=None, pressureOpacity=None, pressureSize=None):
    values = cmds.bluePencilUtil(query=True, eraserOptions=True)
    size = size if size != None else values[0]
    opacity = opacity if opacity != None else values[1] # not implemented
    hardness = hardness if hardness != None else values[2] # not impelemented
    pressureOpacity = pressureOpacity if pressureOpacity != None else values[3] # not implemented
    pressureSize = pressureSize if pressureSize != None else values[4]

    cmds.bluePencilUtil(eraserOptions=(size, opacity, hardness, pressureOpacity, pressureSize))

def updateTextOptions(size=None, opacity=None, font=None):
    values = cmds.bluePencilUtil(query=True, textOptions=True)
    font = font if font != None else cmds.bluePencilUtil(query=True, textFontFamily=True)
    size = size if size != None else values[0]
    opacity = opacity if opacity != None else values[1]

    cmds.bluePencilUtil(textOptions=(size, opacity, font))

def updateLineOptions(size=None, opacity=None):
    values = cmds.bluePencilUtil(query=True, lineOptions=True)
    size = size if size != None else values[0]
    opacity = opacity if opacity != None else values[1]

    cmds.bluePencilUtil(lineOptions=(size, opacity))

def updateArrowOptions(size=None, opacity=None):
    values = cmds.bluePencilUtil(query=True, arrowOptions=True)
    size = size if size != None else values[0]
    opacity = opacity if opacity != None else values[1]

    cmds.bluePencilUtil(arrowOptions=(size, opacity))

def updateEllipseOptions(size=None, opacity=None):
    values = cmds.bluePencilUtil(query=True, ellipseOptions=True)
    size = size if size != None else values[0]
    opacity = opacity if opacity != None else values[1]

    cmds.bluePencilUtil(ellipseOptions=(size, opacity))

def updateRectangleOptions(size=None, opacity=None):
    values = cmds.bluePencilUtil(query=True, rectangleOptions=True)
    size = size if size != None else values[0]
    opacity = opacity if opacity != None else values[1]

    cmds.bluePencilUtil(rectangleOptions=(size, opacity))

def buildPencilPopup():
    createPencilOptions()

def buildBrushPopup():
    createBrushOptions()

def buildEraserPopup():
    createEraserOptions()

def buildTextPopup():
    createTextOptions()

def buildLinePopup():
    createLineOptions()

def buildArrowPopup():
    createArrowOptions()

def buildEllipsePopup():
    createEllipseOptions()

def buildRectanglePopup():
    createRectangleOptions()

def createPencilOptions():
    layout = cmds.rowColumnLayout(nc=2, co=(1, 'right', CONTROL_SPACING))

    values = cmds.bluePencilUtil(query=True, pencilOptions=True)

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPPencilSize' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=SOFT_MAX_TOOL_SIZE, fmx=MAX_TOOL_SIZE,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPPencilSizeAnnot' ],
                      value=values[0],
                      changeCommand=lambda value: updatePencilOptions(size=value))

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPPencilOpacity' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=100,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPPencilOpacityAnnot' ],
                      value=values[1],
                      changeCommand=lambda value: updatePencilOptions(opacity=value))

    cmds.separator(style='none')
    cmds.checkBoxGrp(ncb=1, label1=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPPencilEnableTabletPressureOpacity' ],
                     value1=values[2],
                     annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPPencilEnableTabletPressureOpacityAnnot' ],
                     changeCommand1=lambda value1: updatePencilOptions(pressureOpacity=value1))

    cmds.separator(style='none')
    cmds.checkBoxGrp(ncb=1, label1=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPPencilEnableTabletPressureSize' ],
                     value1=values[3],
                     annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPPencilEnableTabletPressureSizeAnnot' ],
                     changeCommand1=lambda value1: updatePencilOptions(pressureSize=value1))

    cmds.setParent('..')
    return layout

def createBrushOptions():
    layout = cmds.rowColumnLayout(nc=2, co=(1, 'right', CONTROL_SPACING))

    values = cmds.bluePencilUtil(query=True, brushOptions=True)

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPBrushSize' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=SOFT_MAX_TOOL_SIZE, fmx=MAX_TOOL_SIZE,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPBrushSizeAnnot' ],
                      value=values[0],
                      changeCommand=lambda value: updateBrushOptions(size=value))

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPBrushOpacity' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=100,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPBrushOpacityAnnot' ],
                      value=values[1],
                      changeCommand=lambda value: updateBrushOptions(opacity=value))

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPBrushHardness' ], align='right')
    cmds.intSliderGrp(field=True, min=0, max=100,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPBrushHardnessAnnot' ],
                      value=values[2],
                      changeCommand=lambda value: updateBrushOptions(hardness=value))

    cmds.separator(style='none')
    cmds.checkBoxGrp(ncb=1, label1=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPBrushEnableTabletPressureOpacity' ],
                     value1=values[3],
                     annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPBrushEnableTabletPressureOpacityAnnot' ],
                     changeCommand1=lambda value1: updateBrushOptions(pressureOpacity=value1))

    cmds.separator(style='none')
    cmds.checkBoxGrp(ncb=1, label1=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPBrushEnableTabletPressureSize' ],
                     value1=values[4],
                     annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPBrushEnableTabletPressureSizeAnnot' ],
                     changeCommand1=lambda value1: updateBrushOptions(pressureSize=value1))

    cmds.setParent('..')
    return layout

def createEraserOptions():
    layout = cmds.rowColumnLayout(nc=2, co=(1, 'right', CONTROL_SPACING))

    values = cmds.bluePencilUtil(query=True, eraserOptions=True)

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPEraserSize' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=MAX_TOOL_SIZE,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPEraserSizeAnnot' ],
                      value=values[0],
                      changeCommand=lambda value: updateEraserOptions(size=value))

    cmds.separator(style='none')
    cmds.checkBoxGrp(ncb=1, label1=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPEraserEnableTabletPressureSize' ],
                     value1=values[4],
                     annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPEraserEnableTabletPressureSizeAnnot' ],
                     changeCommand1=lambda value1: updateEraserOptions(pressureSize=value1))

    cmds.setParent('..')
    return layout

def createTextOptions():
    layout = cmds.rowColumnLayout(nc=2, co=(1, 'right', CONTROL_SPACING))

    values = cmds.bluePencilUtil(query=True, textOptions=True)

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPTextFont' ], align='right')
    from maya.plugin.bluepencil.bluePencilFontSelectWidget import build_bp_font_select_widget;
    build_bp_font_select_widget(layout)

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPTextSize' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=SOFT_MAX_TOOL_SIZE, fmx=MAX_TOOL_SIZE,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPTextSizeAnnot' ],
                      value=values[0],
                      changeCommand=lambda value: updateTextOptions(size=value))

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPTextOpacity' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=100,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPTextOpacityAnnot' ],
                      value=values[1],
                      changeCommand=lambda value: updateTextOptions(opacity=value))

    cmds.setParent('..')
    return layout

def createLineOptions():
    layout = cmds.rowColumnLayout(nc=2, co=(1, 'right', CONTROL_SPACING))

    values = cmds.bluePencilUtil(query=True, lineOptions=True)

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPLineSize' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=SOFT_MAX_TOOL_SIZE, fmx=MAX_TOOL_SIZE,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPLineSizeAnnot' ],
                      value=values[0],
                      changeCommand=lambda value: updateLineOptions(size=value))

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPLineOpacity' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=100,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPLineOpacityAnnot' ],
                      value=values[1],
                      changeCommand=lambda value: updateLineOptions(opacity=value))

    cmds.setParent('..')
    return layout

def createArrowOptions():
    layout = cmds.rowColumnLayout(nc=2, co=(1, 'right', CONTROL_SPACING))

    values = cmds.bluePencilUtil(query=True, arrowOptions=True)

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPArrowSize' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=SOFT_MAX_TOOL_SIZE, fmx=MAX_TOOL_SIZE,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPArrowSizeAnnot' ],
                      value=values[0],
                      changeCommand=lambda value: updateArrowOptions(size=value))

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPArrowOpacity' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=100,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPArrowOpacityAnnot' ],
                      value=values[1],
                      changeCommand=lambda value: updateArrowOptions(opacity=value))

    cmds.setParent('..')
    return layout

def createEllipseOptions():
    layout = cmds.rowColumnLayout(nc=2, co=(1, 'right', CONTROL_SPACING))

    values = cmds.bluePencilUtil(query=True, ellipseOptions=True)

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPEllipseSize' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=SOFT_MAX_TOOL_SIZE, fmx=MAX_TOOL_SIZE,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPEllipseSizeAnnot' ],
                      value=values[0],
                      changeCommand=lambda value: updateEllipseOptions(size=value))

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPEllipseOpacity' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=100,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPEllipseOpacityAnnot' ],
                      value=values[1],
                      changeCommand=lambda value: updateEllipseOptions(opacity=value))

    cmds.setParent('..')
    return layout

def createRectangleOptions():
    layout = cmds.rowColumnLayout(nc=2, co=(1, 'right', CONTROL_SPACING))

    values = cmds.bluePencilUtil(query=True, rectangleOptions=True)

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPRectangleSize' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=SOFT_MAX_TOOL_SIZE, fmx=MAX_TOOL_SIZE,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPRectangleSizeAnnot' ],
                      value=values[0],
                      changeCommand=lambda value: updateRectangleOptions(size=value))

    cmds.text(maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPRectangleOpacity' ], align='right')
    cmds.intSliderGrp(field=True, min=1, max=100,
                      annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPRectangleOpacityAnnot' ],
                      value=values[1],
                      changeCommand=lambda value: updateRectangleOptions(opacity=value))

    cmds.setParent('..')
    return layout

def addDrawingSectionButtons(toolbar):
        buttons = []

        pencilBtn = checkableButton(
            name='BluePencilPencilButton',
            cmd='maya.cmds.bluePencilUtil(pencilTool=True)',
            image='BP_pencil.png',
            annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPPencil' ],
            menuCommand=lambda parentMenu, *arg: buildPopup(parentMenu, buildPencilPopup))
        buttons.append(pencilBtn)

        brushBtn = checkableButton(
            name='BluePencilBrushButton',
            cmd='maya.cmds.bluePencilUtil(brushTool=True)',
            image='BP_brush.png',
            annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPBrush' ],
            menuCommand=lambda parentMenu, *arg: buildPopup(parentMenu, buildBrushPopup))
        buttons.append(brushBtn)

        eraserBtn = checkableButton(
            name='BluePencilEraserButton',
            cmd='maya.cmds.bluePencilUtil(eraserTool=True)',
            image='BP_eraser.png',
            annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPEraser' ],
            menuCommand=lambda parentMenu, *arg: buildPopup(parentMenu, buildEraserPopup))
        buttons.append(eraserBtn)

        textBtn = checkableButton(
            name='BluePencilTextButton',
            cmd='maya.cmds.bluePencilUtil(textTool=True)',
            image='BP_text.png',
            annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPText' ],
            menuCommand=lambda parentMenu, *arg: buildPopup(parentMenu, buildTextPopup))
        buttons.append(textBtn)

        lineBtn = checkableButton(
            name='BluePencilLineButton',
            cmd='maya.cmds.bluePencilUtil(lineTool=True)',
            image='BP_line.png',
            annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPLine' ],
            menuCommand=lambda parentMenu, *arg: buildPopup(parentMenu, buildLinePopup))
        buttons.append(lineBtn)

        arrowBtn = checkableButton(
            name='BluePencilArrowButton',
            cmd='maya.cmds.bluePencilUtil(arrowTool=True)',
            image='BP_arrow.png',
            annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPArrow' ],
            menuCommand=lambda parentMenu, *arg: buildPopup(parentMenu, buildArrowPopup))
        buttons.append(arrowBtn)

        ellipseBtn = checkableButton(
            name='BluePencilEllipseButton',
            cmd='maya.cmds.bluePencilUtil(ellipseTool=True)',
            image='BP_ellipse.png',
            annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPEllipse' ],
            menuCommand=lambda parentMenu, *arg: buildPopup(parentMenu, buildEllipsePopup))
        buttons.append(ellipseBtn)

        rectangleBtn = checkableButton(
            name='BluePencilRectangleButton',
            cmd='maya.cmds.bluePencilUtil(rectangleTool=True)',
            image='BP_rectangle.png',
            annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarDrawTools.kBPRectangle' ],
            menuCommand=lambda parentMenu, *arg: buildPopup(parentMenu, buildRectanglePopup))
        buttons.append(rectangleBtn)

        def updateToolSelection():
            inDraw = cmds.bluePencilUtil(q=True, draw=True)

            cmds.iconTextCheckBox(pencilBtn, e=True, v=inDraw and cmds.bluePencilUtil(query=True, pencilTool=True))
            cmds.iconTextCheckBox(brushBtn, e=True, v=inDraw and cmds.bluePencilUtil(query=True, brushTool=True))
            cmds.iconTextCheckBox(eraserBtn, e=True, v=inDraw and cmds.bluePencilUtil(query=True, eraserTool=True))
            cmds.iconTextCheckBox(textBtn, e=True, v=inDraw and cmds.bluePencilUtil(query=True, textTool=True))
            cmds.iconTextCheckBox(lineBtn, e=True, v=inDraw and cmds.bluePencilUtil(query=True, lineTool=True))
            cmds.iconTextCheckBox(arrowBtn, e=True, v=inDraw and cmds.bluePencilUtil(query=True, arrowTool=True))
            cmds.iconTextCheckBox(ellipseBtn, e=True, v=inDraw and cmds.bluePencilUtil(query=True, ellipseTool=True))
            cmds.iconTextCheckBox(rectangleBtn, e=True, v=inDraw and cmds.bluePencilUtil(query=True, rectangleTool=True))

        updateToolSelection()
        toolbar.updateCallbacks.append(updateToolSelection)

        return buttons
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
