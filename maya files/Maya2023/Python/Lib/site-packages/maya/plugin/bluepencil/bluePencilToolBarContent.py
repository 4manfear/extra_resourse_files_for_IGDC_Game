import maya.cmds as cmds
import maya.mel as mel
import maya.OpenMayaUI as mui

from maya.common.ui import ParentManager
from shiboken2 import wrapInstance, getCppPointer

from PySide2.QtWidgets import QMenu, QWidgetAction, QWidget, QVBoxLayout

from .bluePencilUtil import DPI

FIELD_SIZE = 36
ICON_SIZE = 22
THIN_ICON_SIZE = 9
TOOLBAR_SIZE = 38
TOOLBAR_DEFAULT_WIDTH = 900
CONTROL_SPACING = 5

def buildPopup(parentMenu, contentBuilder, checkEnabled=None):
    '''
    Build a popup menu and attach it to the parent

    Args:
        parentMenu: parent of the popup menu
        contentBuilder: function which builds the menu's content
        checkEnabled: function which returns a boolean value indicating if the menu should be created
    '''
    if checkEnabled is not None:
        enabled = checkEnabled()
        if not enabled:
            return

    menuPtr = mui.MQtUtil.findControl(parentMenu)
    if menuPtr is not None:
        layout = QVBoxLayout()
        layout.setObjectName('popup')
        layout.setContentsMargins(DPI(16), DPI(16), DPI(16), DPI(16))

        menu = wrapInstance(int(menuPtr), QMenu)
        main = QWidget()
        main.setLayout(layout)
        action = QWidgetAction(menu)
        action.setDefaultWidget(main)

        menu.clear()
        menu.addAction(action)

        layoutName = mui.MQtUtil.fullName(int(getCppPointer(layout)[0]))

        with ParentManager(layoutName):
            contentBuilder()

def getOpenOrCloseBarIcon(openBar, horizontalToolbar):
    # Use vertical icon when toolbar is horizontal and vice-versa.
    if openBar:
        return "openBar.png" if horizontalToolbar else "openBarHorizontal.png"
    else:
        return "closeBar.png" if horizontalToolbar else "closeBarHorizontal.png"

def button(*args, **kwargs):
    return cmds.iconTextButton(
        *args,
        width=ICON_SIZE, height=ICON_SIZE,
        **kwargs)

def checkableButton(name, cmd, menuCommand=None, **kwargs):
    button = cmds.iconTextCheckBox(name,
        style='iconOnly',
        changeCommand=cmd,
        width=ICON_SIZE, height=ICON_SIZE,
        **kwargs)

    if menuCommand is not None:
        cmds.popupMenu(parent=button, postMenuCommand=menuCommand, pmo=False)

    return button

def runtimeCmdButton(cmd, image):
    return button(
        image1=image,
        command=cmd,
        sourceType='mel',
        annotation=mel.eval('getRunTimeCommandAnnotation("{}")'.format(cmd)))

def toggleButton(**kwargs):
    return cmds.iconTextButton(
        vis=True, h=ICON_SIZE, w=THIN_ICON_SIZE,
        i1=getOpenOrCloseBarIcon(True, True),
        **kwargs)

def updateToggleButtonIcon(button, state, horizontal):
    icon = getOpenOrCloseBarIcon(state, horizontal)
    width = THIN_ICON_SIZE if horizontal else ICON_SIZE
    height = ICON_SIZE if horizontal else THIN_ICON_SIZE

    cmds.iconTextButton(button, edit=True, w=width, h=height, i1=icon)
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
