from maya.app.prefs.OptionVar import OptionVar, OPTION_VAR_TYPE_BOOL, OPTION_VAR_TYPE_INT, OPTION_VAR_TYPE_RGB, OPTION_VAR_TYPE_STRING
from maya.app.prefs.OptionVarManager import OptionVarManager
from maya.common.utils import Singleton
from future.utils import with_metaclass

PREF_CATEGORY = r'Blue Pencil General'

#======================================================================
class FrameColorPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "blue pencil timeline frame color" preference.
    '''
    ov_id = 'bluePencilFrameColor' # optionVar name and unique preference ID
    default_value = [0.561, 0.757, 0.812]

    def __init__(self):
        ''' Initialize the preference interface '''
        super( FrameColorPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_RGB, self.default_value, PREF_CATEGORY)

#======================================================================
class TimelineFrameDisplay(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "blue pencil timeline frame color" preference.
    '''
    ov_id = 'bluePencilTimelineFrameDisplay' # optionVar name and unique preference ID
    default_value = 0

    def __init__(self):
        ''' Initialize the preference interface '''
        super( TimelineFrameDisplay, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)

#======================================================================
class DrawImageWidthPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "blue pencil draw image width" preference.
    '''
    ov_id = 'bluePencilDrawImageWidth' # optionVar name and unique preference ID
    default_value = 2048

    def __init__(self):
        ''' Initialize the preference interface '''
        super( DrawImageWidthPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)

#======================================================================
class GlobalPressureCurvePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "blue pencil global pressure curve" preference.
    Governs how tablet pressure input is handled overall.
    Curve points are encoded as a CSV series in the form "Value,Position,Interpolation..."
    Value and Postion are floats from 0 to 1.
    Interpolation is an int. See MRampAttribute::MInterpolation for supported values.
    '''
    ov_id = 'bluePencilGlobalPressureCurve' # optionVar name and unique preference ID
    default_value = "0,0,1,1,1,1" # Straight diagonal line, y=x

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GlobalPressureCurvePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_STRING, self.default_value, PREF_CATEGORY)

#======================================================================
# Preference Management
#======================================================================
class BluePencilGeneralPreferences(with_metaclass(Singleton, object)):
    '''
    Class that initializes and aggregates all of the Blue Pencil general preferences,
    as well as supplying an interface for updating the preference values
    :member option_vars:     Dictionary of optionVars that implement Blue Pencil preferences
                             KEY=optionVar name, VALUE=OptionVar object controlling it
    '''
    #----------------------------------------------------------------------
    def add_preference(self, option_var):
        ''' Add a new OptionVar to be managed by the preferences class '''
        OptionVarManager.manage( option_var )
        option_var.set_in_category( PREF_CATEGORY, True )
        self.option_vars[option_var.name] = option_var

    #----------------------------------------------------------------------
    def __init__(self):
        ''' Create all of the OptionVar objects used to manage the preferences.  '''
        self.option_vars = {}

        self.add_preference( FrameColorPreference() )
        self.add_preference( TimelineFrameDisplay() )
        self.add_preference( DrawImageWidthPreference() )
        self.add_preference( GlobalPressureCurvePreference() )
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
