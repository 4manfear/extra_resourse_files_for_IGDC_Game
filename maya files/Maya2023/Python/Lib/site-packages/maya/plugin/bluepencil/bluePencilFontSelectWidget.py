import maya.OpenMayaUI as mui
import maya.cmds as cmds
from shiboken2 import wrapInstance, isValid

from PySide2.QtCore import QObject
from PySide2.QtWidgets import QWidget, QFontComboBox

kNumVisibleFontsDocked = 6
kNumVisibleFontsUndocked = 10

class BluePencilFontSelectWidget(QFontComboBox):

    def __init__(self, parent=None, name=None):
        super().__init__(parent)

        if name is not None:
            self.setObjectName(name)

        font = cmds.bluePencilUtil(query=True, textFontFamily=True)
        fontIndex = self.findText(font);
        if fontIndex >= 0:
            self.setCurrentIndex(fontIndex);

        self.currentIndexChanged.connect(self.font_changed)

    def isDocked(self):
        # reference it indirectly so the C++ pointer stays alive
        ref = QObject(self.parent())

        while ref.parent() and ref.parent().parent():
            if ref.parent().isWidgetType() and ref.parent().isWindow():
                return False
            ref = QObject(ref.parent().parent())

        return True

    def showPopup(self):
        if self.view():
            # current QFontComboBox implementation sets a fixed dropdown width
            # based on the container width, so we must fix it before it's shown
            popupContentWidth = self.view().sizeHintForColumn(0)
            adjustedWidth = max(self.width(), popupContentWidth)
            self.view().window().setFixedWidth(adjustedWidth)

        maxItems = kNumVisibleFontsDocked if self.isDocked() else kNumVisibleFontsUndocked
        self.setMaxVisibleItems(maxItems)

        super().showPopup()

    def font_changed(self, index=None):
        value = self.currentText()
        cmds.bluePencilUtil(textFontFamily=value)

    def set_font(self, font):
        fontIndex = self.findText(font);
        if fontIndex >= 0:
            self.setCurrentIndex(fontIndex);

# Create a new widget instance parented to the specified layout
def build_bp_font_select_widget(layout, name=None):
    ptr = mui.MQtUtil.findLayout(layout)
    if ptr is not None:
        mayaWidget = wrapInstance(int(ptr), QWidget)
        mayaLayout = mayaWidget.layout()
        if mayaLayout is not None and isValid(mayaLayout):
            widget = BluePencilFontSelectWidget(name=name)
            mayaLayout.addWidget(widget)

# Find a widget instance in the layout and give it a new font
def update_bp_font_select_widget(layout, newFont):
    ptr = mui.MQtUtil.findLayout(layout)
    if ptr is not None:
        mayaWidget = wrapInstance(int(ptr), QWidget)
        mayaLayout = mayaWidget.layout()
        if mayaLayout is not None and isValid(mayaLayout):
            for i in range(mayaLayout.count()):
                child = mayaLayout.itemAt(i).widget()
                if child.metaObject().className() == "BluePencilFontSelectWidget":
                    child.set_font(newFont)
                    break
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
