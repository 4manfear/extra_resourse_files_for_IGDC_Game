import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds as cmds
import maya.mel as mel
import maya.OpenMayaUI as mui

from maya.common.ui import LayoutManager

from .bluePencilUtil import DPI
from .bluePencilToolBarContent import buildPopup, checkableButton, CONTROL_SPACING

def updateColor(colorSlider, previous):
    color = cmds.colorSliderGrp(colorSlider, 
        q=True, 
        rgb=True, 
        useDisplaySpace=True,
        useVpColorPicker=False)
    r = max(0, min(255, color[0] * 255))
    g = max(0, min(255, color[1] * 255))
    b = max(0, min(255, color[2] * 255))

    if previous:
        cmds.bluePencilUtil(e=True, ghostColorPrevious=(r, g, b))
    else:
        cmds.bluePencilUtil(e=True, ghostColorNext=(r, g, b))

def getColor(previous):
    color = cmds.bluePencilUtil(q=True, ghostColorPrevious=True) if previous else \
        cmds.bluePencilUtil(q=True, ghostColorNext=True)

    r = color[0] / 255.0
    g = color[1] / 255.0
    b = color[2] / 255.0
    return (r, g, b)

def addGhostingPopupContent(previous, next):
    layout = cmds.rowColumnLayout(nc=2, co=(1, 'right', CONTROL_SPACING))
    with LayoutManager(layout):

        # Number of frames
        if previous:
            cmds.text(maya.stringTable[ 'y_maya_plugin_bluepencil_bluePencilToolBarGhosting.kBPPreFrames'  ], align='right')
            cmds.intSliderGrp(field=True,
                v=cmds.bluePencilUtil(q=True, ghostPreviousCount=True),
                min=1, max=10,
                annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarGhosting.kBPPreFramesAnnot' ],
                changeCommand=lambda value: cmds.bluePencilUtil(e=True, ghostPreviousCount=value)
                )

        if next:
            cmds.text(maya.stringTable[ 'y_maya_plugin_bluepencil_bluePencilToolBarGhosting.kBPPostFrames'  ], align='right')
            cmds.intSliderGrp(field=True,
                v=cmds.bluePencilUtil(q=True, ghostNextCount=True),
                min=1, max=10,
                annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarGhosting.kBPPostFramesAnnot' ],
                changeCommand=lambda value: cmds.bluePencilUtil(e=True, ghostNextCount=value)
                )

        # Color selection
        if previous:
            cmds.text(maya.stringTable[ 'y_maya_plugin_bluepencil_bluePencilToolBarGhosting.kBPPreFramesColorToolbar'  ], align='right')
            preColor = cmds.colorSliderGrp('bpToolbarGhostPreColor',
                useDisplaySpace=True,
                useVpColorPicker=False,
                rgb=getColor(True),
                annotation=maya.stringTable[ 'y_maya_plugin_bluepencil_bluePencilToolBarGhosting.kBPPreFramesColorAnnot'  ],
                )

            cmds.colorSliderGrp(preColor, e=True, 
                changeCommand=lambda x: updateColor(preColor, True),
                useDisplaySpace=True,
                useVpColorPicker=False)

        if next:
            cmds.text(maya.stringTable[ 'y_maya_plugin_bluepencil_bluePencilToolBarGhosting.kBPPostFramesColorToolbar'  ], align='right')
            postColor = cmds.colorSliderGrp('bpToolbarGhostPostColor',
                useDisplaySpace=True,
                useVpColorPicker=False,
                rgb=getColor(False),
                annotation=maya.stringTable[ 'y_maya_plugin_bluepencil_bluePencilToolBarGhosting.kBPPostFramesColorAnnot'  ],
                )

            cmds.colorSliderGrp(postColor, e=True, 
                changeCommand=lambda x: updateColor(postColor, False),
                useDisplaySpace=True,
                useVpColorPicker=False)

        # Override checkbox
        cmds.separator(style='none')
        checkBox = cmds.checkBoxGrp(ncb=1,
            label1=maya.stringTable[ 'y_maya_plugin_bluepencil_bluePencilToolBarGhosting.kBPGhostColorOverride'  ],
            annotation=maya.stringTable[ 'y_maya_plugin_bluepencil_bluePencilToolBarGhosting.kBPGhostColorOverrideAnnot'  ],
            value1=cmds.bluePencilUtil(q=True, ghostColorOverride=True),
            changeCommand1=lambda on: cmds.bluePencilUtil(e=True, ghostColorOverride=on)
            )

def buildGhostingPrevPopup():
    addGhostingPopupContent(True, False)

def buildGhostingNextPopup():
    addGhostingPopupContent(False, True)

def addGhostingSectionButtons(toolbar):
    previous = checkableButton(
        name='BluePencilGhostPreviousButton',
        cmd=lambda on : cmds.bluePencilUtil(e=True, ghostPrevious=on),
        value=cmds.bluePencilUtil(q=True, ghostPrevious=True),
        image='BP_ghostPrevious.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarGhosting.kGhostingPreviousAnnot' ],
        menuCommand=lambda parentMenu, *arg: buildPopup(parentMenu, buildGhostingPrevPopup)
        )

    next = checkableButton(
        name='BluePencilGhostNextButton',
        cmd=lambda on : cmds.bluePencilUtil(e=True, ghostNext=on),
        value=cmds.bluePencilUtil(q=True, ghostNext=True),
        image='BP_ghostNext.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarGhosting.kGhostingNextAnnot' ],
        menuCommand=lambda parentMenu, *arg: buildPopup(parentMenu, buildGhostingNextPopup)
        )

    def updateGhosting():
        cmds.iconTextCheckBox(previous, e=True, v=cmds.bluePencilUtil(q=True, ghostPrevious=True))
        cmds.iconTextCheckBox(next, e=True, v=cmds.bluePencilUtil(q=True, ghostNext=True))

    toolbar.updateCallbacks.append(updateGhosting)

    buttons = []
    buttons.append(previous)
    buttons.append(next)
    return buttons
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
