import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds as cmds
from maya.app.prefs.OptionVarManager import OptionVarManager
from maya.app.prefs.OptionVar import OptionVar

from .bluePencilToolBarContent import button, FIELD_SIZE

def updateFrameRange(range):
    cmds.optionVar(iv=('bluePencilRetimeFrameRange', range))

def retimeFrame(forward=True):
    moveToNext = getOptionVarOrDefault('bluePencilRetimeMoveToNextFrame', False)
    range = getOptionVarOrDefault('bluePencilRetimeFrameRange', 1)
    if not forward:
        range *= -1
    cmds.bluePencilFrame(relative=True, moveToNext=moveToNext, retime=range)

def addRetimingFrameRangeField(toolbar):
    field = cmds.intField(min=1, max=9999, v=1, w=FIELD_SIZE,
                          annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarRetiming.kBPFrameRangeAnnot' ],
                          cc=lambda value : updateFrameRange(value))

    def updateRangeField():
        range = getOptionVarOrDefault('bluePencilRetimeFrameRange', 1)
        cmds.intField(field, e=True, v=range)

    def layoutChanged(horizontal):
        # Field should only appear in horizontal orientation
        cmds.control(field, edit=True, manage=horizontal)

    updateRangeField()
    toolbar.updateCallbacks.append(updateRangeField)
    toolbar.layoutChangeCallbacks.append(layoutChanged)

    return field

def addRetimingSectionWidgets(toolbar):
    widgets = []

    widgets.append(addRetimingFrameRangeField(toolbar))

    retimeBackwardBtn = button('BluePencilRetimeBackwardButton',
        command=lambda : retimeFrame(False),
        image='BP_retimePrevious.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarRetiming.kBPRetimePreviousAnnot' ],)
    widgets.append(retimeBackwardBtn)

    retimeForwardBtn = button('BluePencilRetimeForwardButton',
        command=lambda : retimeFrame(True),
        image='BP_retimeNext.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBarRetiming.kBPRetimeNextAnnot' ],)
    widgets.append(retimeForwardBtn)

    return widgets

def getOptionVarOrDefault(name, default):
    if cmds.optionVar(exists=name):
        return cmds.optionVar(query=name)
    return default
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
