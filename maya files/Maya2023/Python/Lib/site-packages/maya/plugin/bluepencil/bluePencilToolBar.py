import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds as cmds
import maya.mel as mel
import maya.OpenMayaUI as mui

from maya.common.ui import LayoutManager, ParentManager

from shiboken2 import wrapInstance, getCppPointer

from .bluePencilToolBarContent import (
    ICON_SIZE,
    THIN_ICON_SIZE,
    TOOLBAR_SIZE,
    TOOLBAR_DEFAULT_WIDTH,
    CONTROL_SPACING,
    button,
    runtimeCmdButton,
    checkableButton,
    toggleButton,
    updateToggleButtonIcon)
from .bluePencilToolBarGhosting import addGhostingSectionButtons
from .bluePencilToolBarDrawTools import addDrawingSectionButtons
from .bluePencilToolBarColorSelector import addColorSelector
from .bluePencilToolBarRetiming import addRetimingSectionWidgets

from .bluePencilUtil import DPI

# Constants
BP_TOOLBAR_NAME = 'bluePencilToolBar'
OPT_VAR_CATEGORY = "Blue Pencil"

OPT = 'optionVar'
TOGGLE = 'toggleButton'
CONTENT = 'contentElements'

pythonImport = 'from maya.plugin.bluepencil.bluePencilToolBar import BluePencilToolBar'

def isToolbarHorizontal():
    return cmds.workspaceControl(BP_TOOLBAR_NAME, q=True, horizontal=True)

def addFramesSectionWidgets(toolbar):
    widgets = []

    widgets.append(button(
        'BluePencilAddFrameButton',
        command='maya.cmds.bluePencilFrame(insert=True)',
        image1='BP_addFrame.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kBPFrameAddAnnot' ]))

    widgets.append(button(
        'BluePencilClearFrameButton',
        command='maya.cmds.bluePencilFrame(clear=True)',
        image1='BP_clearFrame.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kBPFrameClearAnnot' ]))

    widgets.append(button(
        'BluePencilDeleteFrameButton',
        command='maya.cmds.bluePencilFrame(delete=True)',
        image1='BP_deleteFrame.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kBPFrameDeleteAnnot' ]))

    widgets.append(button(
        'BluePencilDuplicatePreviousFrameButton',
        command='maya.cmds.bluePencilFrame(duplicate=True)',
        image1='BP_duplicateFrame.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kBPFrameDuplicateAnnot' ]))

    widgets.append(button(
        'BluePencilCutFrameButton',
        command='maya.cmds.bluePencilFrame(cut=True)',
        image1='BP_cutFrame.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kBPFrameCutAnnot' ]))

    widgets.append(button(
        'BluePencilCopyFrameButton',
        command='maya.cmds.bluePencilFrame(copy=True)',
        image1='BP_copyFrame.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kBPFrameCopyAnnot' ]))

    widgets.append(button(
        'BluePencilPasteFrameButton',
        command='maya.cmds.bluePencilFrame(paste=True)',
        image1='BP_pasteFrame.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kBPFramePasteAnnot' ]))

    widgets.append(toolbar.addSeparator(style='shelf'))

    widgets.append(button(
        'BluePencilJumpToPreviousFrameButton',
        command='maya.cmds.bluePencilFrame(stepBack=True)',
        image1='BP_goToPreviousFrame.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kBPFramePreviousAnnot' ]))

    widgets.append(button(
        'BluePencilJumpToNextFrameButton',
        command='maya.cmds.bluePencilFrame(stepForward=True)',
        image1='BP_goToNextFrame.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kBPFrameNextAnnot' ]))

    return widgets

def addImportExportSectionButtons(toolbar):
    buttons = []

    buttons.append(button(
        'BluePencilImportBluePencilFramesButton',
        command='maya.cmds.bluePencilFrame(importFrames=True)',
        image1='BP_importFrames.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kBPImportAnnot' ]))

    buttons.append(button(
        'BluePencilExportBluePencilFramesButton',
        command='maya.cmds.bluePencilFrame(exportFrames=True)',
        image1='BP_exportFrames.png',
        annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kBPExportAnnot' ]))

    return buttons

class BluePencilToolBar(object):
    _instance = None
    _procsDeclared = False

    def __init__(self):
        self.initializeEmptyContent()

    def initializeEmptyContent(self):
        self.content = ''
        self.topLevelLayout = ''
        self.sections = {}
        self.separators = []
        self.updateCallbacks = []
        self.layoutChangeCallbacks = []

    def create(self):
        # Create the content of the toolbar
        self.initializeEmptyContent()

        self.topLevelLayout = cmds.formLayout()
        self.content = cmds.flowLayout(cs=7)

        with LayoutManager(self.content):
            # Drawing section
            addDrawingSectionButtons(self)

            self.addSeparator(style='shelf')

            # Transform Button
            transformBtn = checkableButton(
                name='BluePencilTransformMode',
                cmd='maya.cmds.bluePencilUtil(transform=True)',
                image1='BP_transform.png',
                annotation=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kBPTransformButtonAnnot' ])

            def updateTransformButton():
                cmds.iconTextCheckBox(transformBtn, e=True, v=cmds.bluePencilUtil(query=True, transform=True))
            updateTransformButton()
            self.updateCallbacks.append(updateTransformButton)

            self.addSeparator(style='shelf')

            # Color Selector
            addColorSelector(self)

            # Layer manager section
            # self.addSection(
            #     'showBPToolBarLayerSection', 
            #     _L10N('kShowHideLayersAnnot', "Show/Hide layers" ),
            #     addLayerSectionButtons)

            # Ghosting section
            self.addSection(
                'showBPToolBarGhostingSection', 
                maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kShowHideGhostingAnnot' ],
                addGhostingSectionButtons)

            # Retiming section
            self.addSection(
                'showBPToolBarRetimingSection', 
                maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kShowHideRetimingAnnot' ],
                addRetimingSectionWidgets)

            # Frames section
            self.addSection(
                'showBPToolBarFramesSection', 
                maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kShowHideFramesAnnot' ],
                addFramesSectionWidgets)

            # Import/Export section
            self.addSection(
                'showBPToolBarImportExportSection', 
                maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kShowHideImportExportAnnot' ],
                addImportExportSectionButtons)

    def toggleSection(self, arg, optionVarName):
        with ParentManager(self.content):
            state = arg
            if state < 0: 
                state = not cmds.optionVar(q=optionVarName)

            section = self.sections[optionVarName]
            horizontal = isToolbarHorizontal()

            # Hide/Show buttons in section
            for button in section[CONTENT]:
                cmds.control(button, edit=True, manage=state)

            # Update icon
            updateToggleButtonIcon(section[TOGGLE], state, horizontal)

            # Update option var
            cmds.optionVar(intValue=(optionVarName, state))

            if state:
                # Update layout-dependent controls which might still be hidden
                for callback in self.layoutChangeCallbacks:
                    callback(horizontal)

    def addSeparator(self, style="none"):
        separator = cmds.separator(h=ICON_SIZE, w=CONTROL_SPACING, style=style)
        self.separators.append(separator)
        return separator

    def updateSeparators(self, horizontal):
        width = CONTROL_SPACING if horizontal else ICON_SIZE
        height = ICON_SIZE if horizontal else CONTROL_SPACING

        for separator in self.separators:
            cmds.separator(separator, e=True, h=height, w=width, hr=not horizontal)

    def addSection(self, optionVarName, annotation, contentCB):
        # Initialize option var
        cmds.optionVar(init=False, category=OPT_VAR_CATEGORY, iv=(optionVarName, 1))

        # Create the toggle button
        toggleButton = cmds.iconTextButton(
            annotation=annotation,
            c=lambda : self.toggleSection(-1, optionVarName))

        # Create the section content
        contentElements = contentCB(self)

        # Store section data
        self.sections[optionVarName] = {
            OPT : optionVarName,
            TOGGLE: toggleButton,
            CONTENT: contentElements
        }

        # Set the initial show/hide state based on option var
        self.toggleSection(cmds.optionVar(q=optionVarName), optionVarName)

    def update(self):
        for callback in self.updateCallbacks:
            callback()

    def visibilityChanged(self, arg):
        # Callback triggered when toolbar is shown or hidden
        shown = cmds.workspaceControl(BP_TOOLBAR_NAME, q=True, visible=True)
        BluePencilToolBar.triggerVisibilityUpdate()

    def init(self, name):
        cmds.workspaceControl(name, e=True,
            visibleChangeCommand=self.visibilityChanged,
            closeCommand=f'{pythonImport}; BluePencilToolBar.onClose()',
            minimumWidth=DPI(TOOLBAR_SIZE),
            minimumHeight=DPI(TOOLBAR_SIZE))

        horizontal = cmds.workspaceControl(BP_TOOLBAR_NAME, q=True, horizontal=True)
        self.updateLayoutDirection(cmds.workspaceControl(name, q=1, horizontal=horizontal))

    def updateTopLevelLayout(self, horizontal):
        if self.topLevelLayout != "" and self.content != "":
            kMargin = 8
            gPanelHandleOffset = mel.eval('global int $gPanelHandleOffset; $gPanelHandleOffset=$gPanelHandleOffset;')

            if horizontal:
                cmds.formLayout(self.topLevelLayout, edit=True, attachForm=[
                    (self.content, "top", kMargin),
                    (self.content, "left", gPanelHandleOffset + kMargin),
                    (self.content, "bottom", 0),
                    (self.content, "right",  0)])
            else:
                cmds.formLayout(self.topLevelLayout, edit=True, attachForm=[
                    (self.content, "top", gPanelHandleOffset + kMargin),
                    (self.content, "left", kMargin),
                    (self.content, "bottom", 0),
                    (self.content, "right",  0)])

    def updateSectionIcons(self):
        for optionVarName, section in self.sections.items(): 
            updateToggleButtonIcon(section[TOGGLE], cmds.optionVar(q=section[OPT]), isToolbarHorizontal())

    def updateLayoutDirection(self, horizontal):
        if self.content != "" and cmds.flowLayout(self.content, q=True, exists=True):
            cmds.flowLayout(self.content, 
                e=True, horizontal=horizontal)

            self.updateTopLevelLayout(horizontal)
            self.updateSectionIcons()
            self.updateSeparators(horizontal)

            for callback in self.layoutChangeCallbacks:
                callback(horizontal)

    @staticmethod
    def createToolBar():
        BluePencilToolBar._instance = BluePencilToolBar()
        BluePencilToolBar._instance.create()

    @staticmethod
    def initToolBar(name):
        if BluePencilToolBar._instance:
            BluePencilToolBar._instance.init(name)

    @staticmethod
    def onClose():
        BluePencilToolBar._instance = None

    @staticmethod
    def updateToolBar():
        if BluePencilToolBar._instance:
            BluePencilToolBar._instance.update()

    @staticmethod
    def updateBluePencilLayoutDirection(horizontal):
        if BluePencilToolBar._instance: 
            BluePencilToolBar._instance.updateLayoutDirection(horizontal)

    @staticmethod
    def toolBarVisible():
        exists = cmds.workspaceControl(BP_TOOLBAR_NAME, q=True, exists=True)
        return exists and cmds.workspaceControl(BP_TOOLBAR_NAME, q=True, visible=True)

    @staticmethod
    def toggleToolBar():
        if BluePencilToolBar.toolBarVisible():
            BluePencilToolBar.hideToolBar()
        else:
            BluePencilToolBar.showToolBar()

    @staticmethod
    def hideToolBar():
        cmds.workspaceControl(BP_TOOLBAR_NAME, e=True, close=True)

    @staticmethod
    def triggerVisibilityUpdate():
        callbacks = mel.eval('global string $bpToolBarButtonUpdateCmds[];$bpToolBarButtonUpdateCmds=$bpToolBarButtonUpdateCmds;')
        for cmd in callbacks:
            mel.eval(cmd)

    @staticmethod
    def showToolBar():
        # Declare procs for callbacks that need to be in mel format.
        if not BluePencilToolBar._procsDeclared:
            mel.eval(fr'''
                global proc updateBluePencilLayoutDirection(int $horizontal) {{ 
                    python("{pythonImport}; BluePencilToolBar.updateBluePencilLayoutDirection(" + $horizontal + ")");
                }}
                global proc initBluePencilToolBar(string $name) {{
                    python("{pythonImport}; BluePencilToolBar.initToolBar(\"" + $name + "\")");
                }}
                ''')
            BluePencilToolBar._procsDeclared = True

        currContext = cmds.currentCtx()
        currentTool = cmds.contextInfo(currContext, c=True)

        if currentTool == "bpDraw":
            if not cmds.workspaceControl(BP_TOOLBAR_NAME, q=True, exists=True):
                # Create toolbar if it does not exist
                oldParent = cmds.setParent(q=True)

                cmds.workspaceControl(BP_TOOLBAR_NAME,
                    label=maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolBar.kBluePencilToolBarTitle' ],
                    uiScript=f'{pythonImport}; BluePencilToolBar.createToolBar()',
                    requiredPlugin="bluePencil",
                    dockToControl=("MainPane","top"),
                    initCallback='initBluePencilToolBar',
                    layoutDirectionCallback='updateBluePencilLayoutDirection',
                    actLikeMayaUIElement=True,
                    initialHeight=TOOLBAR_SIZE,
                    initialWidth=TOOLBAR_DEFAULT_WIDTH,
                    heightProperty="fixed",
                    retain=False)

                cmds.setParent(oldParent)
            else:
                # Show toolbar if already created
                cmds.workspaceControl(BP_TOOLBAR_NAME, 
                    e=True, 
                    visible=True)

        BluePencilToolBar.triggerVisibilityUpdate()
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
