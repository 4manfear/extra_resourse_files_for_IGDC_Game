import maya
maya.utils.loadStringResourcesForModule(__name__)

from maya.app.prefs.OptionVar import OptionVar, OPTION_VAR_TYPE_BOOL, OPTION_VAR_TYPE_INT, OPTION_VAR_TYPE_RGB, OPTION_VAR_TYPE_STRING
from maya.app.prefs.OptionVarManager import OptionVarManager
from maya.common.utils import Singleton
from future.utils import with_metaclass

PREF_CATEGORY = r'Blue Pencil'

# Active tool options
#======================================================================
class ActiveToolPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "active tool" preference.
    '''
    ov_id = 'bluePencilActiveTool' # optionVar name and unique preference ID
    default_value = 1 # brush tool

    def __init__(self):
        ''' Initialize the preference interface '''
        super( ActiveToolPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilActiveTool' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilActiveToolTip'  ]

#======================================================================
class ActiveColorPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "active color" preference.
    '''
    ov_id = 'bluePencilActiveColor' # optionVar name and unique preference ID
    default_value = [143, 193, 207]

    def __init__(self):
        ''' Initialize the preference interface '''
        super( ActiveColorPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_RGB, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilActiveColor' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilActiveColorTip'  ]

# Pencil options
#======================================================================
class PencilSizePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "pencil size" preference.
    '''
    ov_id = 'bluePencilPencilSize' # optionVar name and unique preference ID
    default_value = 12

    def __init__(self):
        ''' Initialize the preference interface '''
        super( PencilSizePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilPencilSize' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilPencilSizeTip'  ]

#======================================================================
class PencilOpacityPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "pencil opacity" preference.
    '''
    ov_id = 'bluePencilPencilOpacity' # optionVar name and unique preference ID
    default_value = 100

    def __init__(self):
        ''' Initialize the preference interface '''
        super( PencilOpacityPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilPencilOpacity' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilPencilOpacityTip'  ]

#======================================================================
class PencilTabletOpacityEnabledPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "pencil tablet opacity enabled" preference.
    '''
    ov_id = 'bluePencilPencilTabletOpacityEnabled' # optionVar name and unique preference ID
    default_value = False

    def __init__(self):
        ''' Initialize the preference interface '''
        super( PencilTabletOpacityEnabledPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, self.default_value, PREF_CATEGORY)

#======================================================================
class PencilTabletSizeEnabledPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "pencil tablet size enabled" preference.
    '''
    ov_id = 'bluePencilPencilTabletSizeEnabled' # optionVar name and unique preference ID
    default_value = True

    def __init__(self):
        ''' Initialize the preference interface '''
        super( PencilTabletSizeEnabledPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, self.default_value, PREF_CATEGORY)

#======================================================================
class PencilSizeCurvePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "pencil size curve" preference.
    How tablet pressure input is mapped to pencil size if that option is enabled.
    Curve points are encoded as a CSV series in the form "Value,Position,Interpolation..."
    Value and Postion are floats from 0 to 1.
    Interpolation is an int. See MRampAttribute::MInterpolation for supported values.
    '''
    ov_id = 'bluePencilPencilSizeCurve' # optionVar name and unique preference ID
    default_value = "0.2,0,3,1,1,3,0.9,0.6,3,0.4,0.25,3"

    def __init__(self):
        ''' Initialize the preference interface '''
        super( PencilSizeCurvePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_STRING, self.default_value, PREF_CATEGORY)

#======================================================================
class PencilOpacityCurvePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "pencil opacity curve" preference.
    How tablet pressure input is mapped to pencil opacity if that option is enabled.
    Curve points are encoded as a CSV series in the form "Value,Position,Interpolation..."
    Value and Postion are floats from 0 to 1.
    Interpolation is an int. See MRampAttribute::MInterpolation for supported values.
    '''
    ov_id = 'bluePencilPencilOpacityCurve' # optionVar name and unique preference ID
    default_value = "0.05,0,3,1,1,3,0.8,0.5,3,0.2,0.2,3"

    def __init__(self):
        ''' Initialize the preference interface '''
        super( PencilOpacityCurvePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_STRING, self.default_value, PREF_CATEGORY)

# Brush options
#======================================================================
class BrushSizePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "brush size" preference.
    '''
    ov_id = 'bluePencilBrushSize' # optionVar name and unique preference ID
    default_value = 20

    def __init__(self):
        ''' Initialize the preference interface '''
        super( BrushSizePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilBrushSize' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilBrushSizeTip'  ]

#======================================================================
class BrushOpacityPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "brush opacity" preference.
    '''
    ov_id = 'bluePencilBrushOpacity' # optionVar name and unique preference ID
    default_value = 100

    def __init__(self):
        ''' Initialize the preference interface '''
        super( BrushOpacityPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilBrushOpacity' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilBrushOpacityTip'  ]

#======================================================================
class BrushHardnessPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "brush hardness" preference.
    '''
    ov_id = 'bluePencilBrushHardness' # optionVar name and unique preference ID
    default_value = 50

    def __init__(self):
        ''' Initialize the preference interface '''
        super( BrushHardnessPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)

#======================================================================
class BrushTabletOpacityEnabledPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "brush tablet opacity enabled" preference.
    '''
    ov_id = 'bluePencilBrushTabletOpacityEnabled' # optionVar name and unique preference ID
    default_value = True

    def __init__(self):
        ''' Initialize the preference interface '''
        super( BrushTabletOpacityEnabledPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, self.default_value, PREF_CATEGORY)

#======================================================================
class BrushTabletSizeEnabledPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "brush tablet size enabled" preference.
    '''
    ov_id = 'bluePencilBrushTabletSizeEnabled' # optionVar name and unique preference ID
    default_value = True

    def __init__(self):
        ''' Initialize the preference interface '''
        super( BrushTabletSizeEnabledPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, self.default_value, PREF_CATEGORY)

#======================================================================
class BrushSizeCurvePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "brush size curve" preference.
    How tablet pressure input is mapped to brush size if that option is enabled.
    Curve points are encoded as a CSV series in the form "Value,Position,Interpolation..."
    Value and Postion are floats from 0 to 1.
    Interpolation is an int. See MRampAttribute::MInterpolation for supported values.
    '''
    ov_id = 'bluePencilBrushSizeCurve' # optionVar name and unique preference ID
    default_value = "0.2,0,3,1,1,3,0.9,0.6,3,0.4,0.25,3"

    def __init__(self):
        ''' Initialize the preference interface '''
        super( BrushSizeCurvePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_STRING, self.default_value, PREF_CATEGORY)

#======================================================================
class BrushOpacityCurvePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "brush opacity curve" preference.
    How tablet pressure input is mapped to brush opacity if that option is enabled.
    Curve points are encoded as a CSV series in the form "Value,Position,Interpolation..."
    Value and Postion are floats from 0 to 1.
    Interpolation is an int. See MRampAttribute::MInterpolation for supported values.
    '''
    ov_id = 'bluePencilBrushOpacityCurve' # optionVar name and unique preference ID
    default_value = "0.05,0,3,1,1,3,0.8,0.5,3,0.2,0.2,3"

    def __init__(self):
        ''' Initialize the preference interface '''
        super( BrushOpacityCurvePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_STRING, self.default_value, PREF_CATEGORY)

#======================================================================
class BrushHardnessCurvePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "brush hardness curve" preference.
    Controls how brush opacity falls off along the radius to give a softer look.
    Curve points are encoded as a CSV series in the form "Value,Position,Interpolation..."
    Value and Postion are floats from 0 to 1.
    Interpolation is an int. See MRampAttribute::MInterpolation for supported values.
    '''
    ov_id = 'bluePencilBrushHardnessCurve' # optionVar name and unique preference ID
    default_value = "1,0,3,0,1,3,0.1,0.6,3,0.8,0.2,3"

    def __init__(self):
        ''' Initialize the preference interface '''
        super( BrushHardnessCurvePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_STRING, self.default_value, PREF_CATEGORY)

#======================================================================
class BrushHardnessMinCurvePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "brush hardness min curve" preference.
    Controls how brush opacity falls off along the radius to give a softer look.
    The falloff will be interpolated between the min and max curves based on hardness.
    Curve points are encoded as a CSV series in the form "Value,Position,Interpolation..."
    Value and Postion are floats from 0 to 1.
    Interpolation is an int. See MRampAttribute::MInterpolation for supported values.
    '''
    ov_id = 'bluePencilBrushHardnessMinCurve' # optionVar name and unique preference ID
    default_value = "0.125,0,3,0,1,3,0.035,0.6,3,0.12,0.1,3"

    def __init__(self):
        ''' Initialize the preference interface '''
        super( BrushHardnessMinCurvePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_STRING, self.default_value, PREF_CATEGORY)

#======================================================================
class BrushHardnessMidCurvePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "brush hardness mid curve" preference.
    Controls how brush opacity falls off along the radius to give a softer look.
    The falloff will be interpolated between the min, mid and max curves based on hardness.
    Curve points are encoded as a CSV series in the form "Value,Position,Interpolation..."
    Value and Postion are floats from 0 to 1.
    Interpolation is an int. See MRampAttribute::MInterpolation for supported values.
    '''
    ov_id = 'bluePencilBrushHardnessMidCurve' # optionVar name and unique preference ID
    default_value = "0.5,0,3,0,1,3,0.07,0.7,3,0.45,0.3,3"

    def __init__(self):
        ''' Initialize the preference interface '''
        super( BrushHardnessMidCurvePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_STRING, self.default_value, PREF_CATEGORY)

#======================================================================
class BrushHardnessMaxCurvePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "brush hardness max curve" preference.
    Controls how brush opacity falls off along the radius to give a softer look.
    The falloff will be interpolated between the min and max curves based on hardness.
    Curve points are encoded as a CSV series in the form "Value,Position,Interpolation..."
    Value and Postion are floats from 0 to 1.
    Interpolation is an int. See MRampAttribute::MInterpolation for supported values.
    '''
    ov_id = 'bluePencilBrushHardnessMaxCurve' # optionVar name and unique preference ID
    default_value = "1,0,3,0,1,3,0.9,0.5,3,0.55,0.8,3,0.047,0.95,3"

    def __init__(self):
        ''' Initialize the preference interface '''
        super( BrushHardnessMaxCurvePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_STRING, self.default_value, PREF_CATEGORY)

# Eraser options
#======================================================================
class EraserSizePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "eraser size" preference.
    '''
    ov_id = 'bluePencilEraserSize' # optionVar name and unique preference ID
    default_value = 80

    def __init__(self):
        ''' Initialize the preference interface '''
        super( EraserSizePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilEraserSize' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilEraserSizeTip'  ]

#======================================================================
class EraserTabletSizeEnabledPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "eraser tablet size enabled" preference.
    '''
    ov_id = 'bluePencilEraserTabletSizeEnabled' # optionVar name and unique preference ID
    default_value = False

    def __init__(self):
        ''' Initialize the preference interface '''
        super( EraserTabletSizeEnabledPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, self.default_value, PREF_CATEGORY)

#======================================================================
class EraserSizeCurvePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "eraser size curve" preference.
    How tablet pressure input is mapped to eraser size if that option is enabled.
    Curve points are encoded as a CSV series in the form "Value,Position,Interpolation..."
    Value and Postion are floats from 0 to 1.
    Interpolation is an int. See MRampAttribute::MInterpolation for supported values.
    '''
    ov_id = 'bluePencilEraserSizeCurve' # optionVar name and unique preference ID
    default_value = "0.2,0,3,1,1,3,0.9,0.6,3,0.4,0.25,3"

    def __init__(self):
        ''' Initialize the preference interface '''
        super( EraserSizeCurvePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_STRING, self.default_value, PREF_CATEGORY)

# Text options
#======================================================================
class TextFontFamilyPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "text font family" preference.
    '''
    ov_id = 'bluePencilTextFontFamily' # optionVar name and unique preference ID
    default_value = 'Arial'

    def __init__(self):
        ''' Initialize the preference interface '''
        super( TextFontFamilyPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_STRING, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilTextFontFamily' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilTextFontFamilyTip'  ]

#======================================================================
class TextSizePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "text size" preference.
    '''
    ov_id = 'bluePencilTextSize' # optionVar name and unique preference ID
    default_value = 40

    def __init__(self):
        ''' Initialize the preference interface '''
        super( TextSizePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilTextSize' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilTextSizeTip'  ]

#======================================================================
class TextOpacityPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "text opacity" preference.
    '''
    ov_id = 'bluePencilTextOpacity' # optionVar name and unique preference ID
    default_value = 100

    def __init__(self):
        ''' Initialize the preference interface '''
        super( TextOpacityPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilTextOpacity' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilTextOpacityTip'  ]

# Line options
#======================================================================
class LineSizePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "line size" preference.
    '''
    ov_id = 'bluePencilLineSize' # optionVar name and unique preference ID
    default_value = 12

    def __init__(self):
        ''' Initialize the preference interface '''
        super( LineSizePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilLineSize' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilLineSizeTip'  ]

#======================================================================
class LineOpacityPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "line opacity" preference.
    '''
    ov_id = 'bluePencilLineOpacity' # optionVar name and unique preference ID
    default_value = 100

    def __init__(self):
        ''' Initialize the preference interface '''
        super( LineOpacityPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilLineOpacity' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilLineOpacityTip'  ]

# Arrow options
#======================================================================
class ArrowSizePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "arrow size" preference.
    '''
    ov_id = 'bluePencilArrowSize' # optionVar name and unique preference ID
    default_value = 12

    def __init__(self):
        ''' Initialize the preference interface '''
        super( ArrowSizePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilArrowSize' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilArrowSizeTip'  ]

#======================================================================
class ArrowOpacityPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "arrow opacity" preference.
    '''
    ov_id = 'bluePencilArrowOpacity' # optionVar name and unique preference ID
    default_value = 100

    def __init__(self):
        ''' Initialize the preference interface '''
        super( ArrowOpacityPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilArrowOpacity' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilArrowOpacityTip'  ]

# Ellipse options
#======================================================================
class EllipseSizePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ellipse size" preference.
    '''
    ov_id = 'bluePencilEllipseSize' # optionVar name and unique preference ID
    default_value = 12

    def __init__(self):
        ''' Initialize the preference interface '''
        super( EllipseSizePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilEllipseSize' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilEllipseSizeTip'  ]

#======================================================================
class EllipseOpacityPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ellipse opacity" preference.
    '''
    ov_id = 'bluePencilEllipseOpacity' # optionVar name and unique preference ID
    default_value = 100

    def __init__(self):
        ''' Initialize the preference interface '''
        super( EllipseOpacityPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilEllipseOpacity' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilEllipseOpacityTip'  ]

# Rectangle options
#======================================================================
class RectangleSizePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "rectangle size" preference.
    '''
    ov_id = 'bluePencilRectangleSize' # optionVar name and unique preference ID
    default_value = 12

    def __init__(self):
        ''' Initialize the preference interface '''
        super( RectangleSizePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilRectangleSize' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilRectangleSizeTip'  ]

#======================================================================
class RectangleOpacityPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "rectangle opacity" preference.
    '''
    ov_id = 'bluePencilRectangleOpacity' # optionVar name and unique preference ID
    default_value = 100

    def __init__(self):
        ''' Initialize the preference interface '''
        super( RectangleOpacityPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilRectangleOpacity' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilRectangleOpacityTip'  ]

# Ghosting options
#======================================================================
class GhostPrevPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghost previous" preference.
    '''
    ov_id = 'bluePencilGhostPrev' # optionVar name and unique preference ID
    default_value = True

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostPrevPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostPrev' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostPrevTip'  ]

#======================================================================
class GhostNextPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghost next" preference.
    '''
    ov_id = 'bluePencilGhostNext' # optionVar name and unique preference ID
    default_value = True

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostNextPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostNext' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostNextTip'  ]

#======================================================================
class GhostPrevCountPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghost previous count" preference.
    '''
    ov_id = 'bluePencilGhostPrevCount' # optionVar name and unique preference ID
    default_value = 3

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostPrevCountPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostPrevCount' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostPrevCountTip'  ]

#======================================================================
class GhostNextCountPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghost next" preference.
    '''
    ov_id = 'bluePencilGhostNextCount' # optionVar name and unique preference ID
    default_value = 3

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostNextCountPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostNextCount' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostNextCountTip'  ]

#======================================================================
class GhostColorOverridePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghost color override" preference.
    '''
    ov_id = 'bluePencilGhostColorOverride' # optionVar name and unique preference ID
    default_value = False

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostColorOverridePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostColorOverride' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostColorOverrideTip'  ]

#======================================================================
class GhostColorOverridePrevPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghost color override previous" preference.
    '''
    ov_id = 'bluePencilGhostColorOverridePrev' # optionVar name and unique preference ID
    default_value = [113, 255, 255] # same as ghostPreColor

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostColorOverridePrevPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_RGB, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostColorOverridePrev' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostColorOverridePrevTip'  ]

#======================================================================
class GhostColorOverrideNextPreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghost color override next" preference.
    '''
    ov_id = 'bluePencilGhostColorOverrideNext' # optionVar name and unique preference ID
    default_value = [224, 173, 169] # same as ghostPostColor

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostColorOverrideNextPreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_RGB, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostColorOverrideNext' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilGhostColorOverrideNextTip'  ]

# Retiming tool options
#======================================================================
class RetimeMoveToNextFramePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "retime move to next frame" preference.
    '''
    ov_id = 'bluePencilRetimeMoveToNextFrame' # optionVar name and unique preference ID
    default_value = False

    def __init__(self):
        ''' Initialize the preference interface '''
        super( RetimeMoveToNextFramePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilRetimeMoveToNextFrame' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilRetimeMoveToNextFrameTip'  ]

#======================================================================
class RetimeFrameRangePreference(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "retime frame range" preference.
    '''
    ov_id = 'bluePencilRetimeFrameRange' # optionVar name and unique preference ID
    default_value = 1

    def __init__(self):
        ''' Initialize the preference interface '''
        super( RetimeFrameRangePreference, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, self.default_value, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilRetimeFrameRange' ]
        self.info  = maya.stringTable['y_maya_plugin_bluepencil_bluePencilToolPreferences.kBluePencilRetimeFrameRangeTip'  ]

#======================================================================
# Preference Management
#======================================================================
class BluePencilToolPreferences(with_metaclass(Singleton, object)):
    '''
    Class that initializes and aggregates all of the Blue Pencil tool preferences,
    as well as supplying an interface for updating the preference values
    :member option_vars:     Dictionary of optionVars that implement Blue Pencil preferences
                             KEY=optionVar name, VALUE=OptionVar object controlling it
    '''
    #----------------------------------------------------------------------
    def add_preference(self, option_var):
        ''' Add a new OptionVar to be managed by the preferences class '''
        OptionVarManager.manage( option_var )
        option_var.set_in_category( PREF_CATEGORY, True )
        self.option_vars[option_var.name] = option_var

    def revert_to_defaults(self):
        OptionVarManager.revert_to_defaults(PREF_CATEGORY)

    #----------------------------------------------------------------------
    def __init__(self):
        ''' Create all of the OptionVar objects used to manage the preferences.  '''
        self.option_vars = {}

        self.add_preference( ActiveToolPreference() )
        self.add_preference( ActiveColorPreference() )

        self.add_preference( PencilSizePreference() )
        self.add_preference( PencilOpacityPreference() )
        self.add_preference( PencilTabletOpacityEnabledPreference() )
        self.add_preference( PencilTabletSizeEnabledPreference() )
        self.add_preference( PencilSizeCurvePreference() )
        self.add_preference( PencilOpacityCurvePreference() )

        self.add_preference( BrushSizePreference() )
        self.add_preference( BrushOpacityPreference() )
        self.add_preference( BrushHardnessPreference() )
        self.add_preference( BrushTabletOpacityEnabledPreference() )
        self.add_preference( BrushTabletSizeEnabledPreference() )
        self.add_preference( BrushSizeCurvePreference() )
        self.add_preference( BrushOpacityCurvePreference() )
        self.add_preference( BrushHardnessCurvePreference() )
        self.add_preference( BrushHardnessMinCurvePreference() )
        self.add_preference( BrushHardnessMidCurvePreference() )
        self.add_preference( BrushHardnessMaxCurvePreference() )

        self.add_preference( EraserSizePreference() )
        self.add_preference( EraserTabletSizeEnabledPreference() )
        self.add_preference( EraserSizeCurvePreference() )

        self.add_preference( TextFontFamilyPreference() )
        self.add_preference( TextSizePreference() )
        self.add_preference( TextOpacityPreference() )

        self.add_preference( LineSizePreference() )
        self.add_preference( LineOpacityPreference() )

        self.add_preference( ArrowSizePreference() )
        self.add_preference( ArrowOpacityPreference() )

        self.add_preference( EllipseSizePreference() )
        self.add_preference( EllipseOpacityPreference() )

        self.add_preference( RectangleSizePreference() )
        self.add_preference( RectangleOpacityPreference() )

        self.add_preference( GhostPrevPreference() )
        self.add_preference( GhostNextPreference() )
        self.add_preference( GhostPrevCountPreference() )
        self.add_preference( GhostNextCountPreference() )
        self.add_preference( GhostColorOverridePreference() )
        self.add_preference( GhostColorOverridePrevPreference() )
        self.add_preference( GhostColorOverrideNextPreference() )

        self.add_preference( RetimeMoveToNextFramePreference() )
        self.add_preference( RetimeFrameRangePreference() )
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
