from __future__ import division
import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds as cmds
import maya.mel as mel
from .timeSliderPreferences import TimeSliderVisiblePreference
from random import choice

DefaultColors = [
        (204,92,92),
        (171,60,60),
        (217,132,72),
        (191,102,38),
        (191,163,77),
        (153, 122, 31),

        (158,131,95),
        (125,98,62),
        (71,179,107),
        (35, 140, 70),
        (67, 181, 191),
        (21, 130, 140),

        (71, 149, 204),
        (25, 107, 166),
        (145, 102, 204),
        (116, 71, 179),
        (196, 88, 142),
        (153, 67, 110)
    ]


def playback_slider_id():
    '''utility function to get the playbackSlider global name defined in mel'''
    return mel.eval('$tmpVar=$gPlayBackSlider')


def pickColor():
    return choice(DefaultColors)

def createBookmark(name=None, start=None, stop=None, color=None):
    '''createBookmark create a bookmark from time range selections'''
    selection = cmds.ls(sl=True)
    cmds.pluginInfo("timeSliderBookmark", edit=True, writeRequires=True)
    bm = cmds.createNode("timeSliderBookmark")
    updateBookmark(bm,start=start,stop=stop)
    if name != None:
        cmds.setAttr(bm + ".name", name, type="string")

    if color == None:
        color = [x/255.0 for x in pickColor()]
    cmds.setAttr(bm + ".color", *color)

    priority = getNextPriority()

    cmds.setAttr(bm + ".priority", priority)

    cmds.select(selection, replace=True)
    cmds.currentTime(stop)
    return bm

def editBookmark(bm):
    '''editBookmark, for now simply select the corresponding node so that user can edit it in the attribute editor'''
    cmds.select(bm)


def getCurrentPlayRange():
    return cmds.timeControl(playback_slider_id(), q=True, rangeArray=True)

def updateBookmark(bm,start=None, stop=None):
    ''''update Bookmark with the current time range selection in time control'''
    rng = getCurrentPlayRange()
    if start != None:
        rng[0] = start
    if stop != None:
        rng[1] = stop

    cmds.setAttr(bm + ".timeRangeStart", rng[0])
    cmds.setAttr(bm + ".timeRangeStop", rng[1])

def deleteBookmark(bm):
    ''''simply delete the corresponding node'''
    cmds.delete(bm)


def frameBookmark(bm):
    ''''set the playback range to the timeRange infromation in the bookmark'''
    start = cmds.getAttr(bm + ".timeRangeStart")
    stop = cmds.getAttr(bm + ".timeRangeStop")
    currentMin = cmds.playbackOptions(q=True, min=True)
    currentMax = cmds.playbackOptions(q=True, max=True)
    gLastPlabackRange = (currentMin,currentMax)

    if start <= stop:
        cmds.playbackOptions(e=True, min=start, max=stop)
    time = cmds.currentTime(q=True)
    #if current time is out of boundari set it to start
    if time < start or time > stop:
        cmds.currentTime(start)


def selectBookmark(bm):
    start = cmds.getAttr(bm + ".timeRangeStart")
    cmds.currentTime(start)


def getAllBookmarks(startTime=float("-inf"), stopTime=float("inf"), reverse=False):
    '''returns all timeSliderBookmark where its startTimeRange are between startTime and endTime
       if those params are not defines they considered -/+Infinity
       it return a sorted array based on their timeRangeStart'''

    allbookmarks = cmds.ls(type="timeSliderBookmark")
    allbookmarks = [x for x in allbookmarks if startTime <= cmds.getAttr(x + ".timeRangeStart") <= stopTime]
    allbookmarks.sort(key=lambda tsbm : cmds.getAttr(tsbm + ".timeRangeStart"), reverse=reverse)
    return allbookmarks


def getNextPriority():
    bms = getAllBookmarks()
    pmax = 0
    for bm in bms:
        bmpriority = cmds.getAttr(bm + ".priority")
        if pmax < bmpriority :
            pmax = bmpriority
    return pmax + 1

def isInBookmarkRange(bm, time):
    start = cmds.getAttr(bm + ".timeRangeStart")
    stop = cmds.getAttr(bm + ".timeRangeStop")
    return start <= time <= stop


def getBookmarkVisibility():
    '''return if the current state of visibility for bookmark system'''
    return TimeSliderVisiblePreference().get_value()

def toggleBookmarkVisibility():
    setBookmarkVisibility(not getBookmarkVisibility())

def setBookmarkVisibility(visible):
    '''change the visibility state of the bookmark system'''
    TimeSliderVisiblePreference().set_value(visible)

def deleteAllBookmark():
    '''Delete All bookmarks in the scene'''
    cmds.delete(getAllBookmarks())


def frameAllBookmark():
    '''frame the smallest start to the biggest end'''
    bms = getAllBookmarks()
    start = float("inf")
    stop = float("-inf")
    for bm in bms:
        bmstart = cmds.getAttr(bm + ".timeRangeStart")
        bmstop = cmds.getAttr(bm + ".timeRangeStop")
        start = bmstart if start > bmstart else start
        stop = bmstop if stop < bmstop else stop

    if start < stop and stop - start > 0 and len(bms) > 0:
        cmds.playbackOptions(e=True, min=start, max=stop)

def getHighestPriorityBookmark(bookmarks):
    p = 0
    highestbm = None
    for bm in bookmarks:
        bmp = cmds.getAttr(bm + ".priority")
        if bmp > p:
            p = bmp
            highestbm = bm
    return highestbm

def getBookmarkAtTime(time):
    '''return the bookmark that is considered on top at given time'''
    bms = getAllBookmarks()
    currentTime = time
    currents = [bm for bm in bms if isInBookmarkRange(bm, currentTime)]
    return getHighestPriorityBookmark(currents)

def deleteBookmarkAtTime(value=0, time=0):
    '''Delete bookmark at specified time'''
    bm = getBookmarkAtTime(time)
    if bm != None:
        deleteBookmark(bm)

STR_NOFRAMEBOOKMARK = maya.stringTable['y_maya_plugin_timeSliderBookmark_timeSliderBookmark.kNoFrameBookmarkAtTime' ]

def frameBookmarkAtTime(value=0, time=0):
    ''''frame bookmark at the given time'''
    bm = getBookmarkAtTime(time)
    if bm != None:
        frameBookmark(bm)
    else:
        cmds.error(STR_NOFRAMEBOOKMARK)


STR_NOBOOKMARK =maya.stringTable['y_maya_plugin_timeSliderBookmark_timeSliderBookmark.kNoBookmark' ]

def getBookmark(time, isPrev):
    bms = getAllBookmarks(reverse=isPrev)
    if len(bms) == 0:
        cmds.error(STR_NOBOOKMARK)
        return None

    for bm in bms:
        if ((isPrev and cmds.getAttr(bm + ".timeRangeStart") < time) or (not isPrev and cmds.getAttr(bm + ".timeRangeStart") > time)):
            return bm
    return bms[0]


def selectPreviousBookmarkAtTime(value=0, time=0):
    bm = getBookmark(time, isPrev=True)
    if bm:
        selectBookmark(bm)


def selectNextBookmarkAtTime(value=0, time=0):
    bm = getBookmark(time, isPrev=False)
    if bm:
        selectBookmark(bm)


def framePreviousBookmarkAtTime(value=0, time=0):
    ''''frame previous bookmark from the given time'''
    bm = getBookmark(time, isPrev=True)
    if bm:
        frameBookmark(bm)


def frameNextBookmarkAtTime(value=0, time=0):
    ''''frame next bookmark from the given time'''
    bm = getBookmark(time, isPrev=False)
    if bm:
        frameBookmark(bm)


def updateBookmarkAtTime(value=0, time=0):
    ''''update bookmark at given time'''
    bm = getBookmarkAtTime(time)
    if bm == None:
        return
    updateBookmark(bm)


def editBookmarkAtTime(time):
    '''edit the bookmark at given time'''
    bm = getBookmarkAtTime(time)
    if bm == None:
        return
    editBookmark(bm)


#Current Time utility function func
def getBookmarkAtCurrentTime():
    '''return the bookmark that is considered on top at current time'''
    return getBookmarkAtTime(cmds.currentTime(q=True))

def deleteBookmarkAtCurrentTime():
    '''Delete bookmark at current time'''
    deleteBookmarkAtTime(time=cmds.currentTime(q=True))

def frameBookmarkAtCurrentTime():
    ''''frame bookmark at the current time'''
    frameBookmarkAtTime(time=cmds.currentTime(q=True))


def framePreviousBookmarkAtCurrentTime():
    ''''frame previous bookmark from the current time'''
    framePreviousBookmarkAtTime(time=cmds.currentTime(q=True))

def frameNextBookmarkAtCurrentTime():
    ''''frame next bookmark from the current time'''
    frameNextBookmarkAtTime(time=cmds.currentTime(q=True))

def updateBookmarkAtCurrentTime():
    ''''update bookmark at current time'''
    updateBookmarkAtTime(time=cmds.currentTime(q=True))

def selectPreviousBookmarkAtCurrentTime():
    selectPreviousBookmarkAtTime(time=cmds.currentTime(q=True))

def selectNextBookmarkAtCurrentTime():
    selectNextBookmarkAtTime(time=cmds.currentTime(q=True))
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
