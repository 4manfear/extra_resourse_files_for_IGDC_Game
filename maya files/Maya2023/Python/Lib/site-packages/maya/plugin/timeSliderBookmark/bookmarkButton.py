import maya
maya.utils.loadStringResourcesForModule(__name__)

from builtins import object
import maya.cmds as cmds
from maya.common.ui import callback_tool
from functools import partial
from maya.debug.DebugTrace import DebugTrace
from . import timeSliderBookmark as tsb;
from .timeSliderPreferences import timeSliderBookmark_preferences_initialize
from .bookmarkManager import (BookmarkManager, CreateBookmarkDialog, RUNTIME_FRAME_BOOKMARK_CMD, RUNTIME_FRAME_BOOKMARK_NEXT_CMD,
                            RUNTIME_FRAME_BOOKMARK_PREVIOUS_CMD, DELETE_BOOKMARK_AT_CURRENT_TIME_CMD, DELETE_ALL_BOOKMARK_CMD,
                            BOOKMARK_TOGGLE_VISIBILITY_CMD, BOOKMARK_UPDATE_CMD)

from maya.plugin.timeSliderBookmark.bookmarkManager import editBookmarkAtTime

dbgtrace = DebugTrace()

STR_UNFRAME = maya.stringTable['y_maya_plugin_timeSliderBookmark_bookmarkButton.kUnframeTimeSliderBookmark' ]

#======================================================================
def local_dbg(msg):
    '''Access to the local debugging function, which just prepends the class name to debugging information'''
    dbgtrace.dbg( u'BookmarkButton: {}'.format( msg ) )

RUNTIME_BOOKMARK_EDIT_CMD = "EditBookmark"
RUNTIME_BOOKMARK_CREATE_CMD = "CreateTimeSliderBookmark"
RUNTIME_BOOKMARK_QUICK_CREATE_CMD = "QuickCreateTimeSliderBookmark"
BOOKMARK_MANAGER_CMD = "BookmarkManager"
BOOKMARK_UNFRAME_CMD = "PlaybackRangeAnimStartEnd"
RUNTIME_SELECT_BOOKMARK_NEXT_CMD = "NextTimeSliderBookmark"
RUNTIME_SELECT_BOOKMARK_PREVIOUS_CMD = "PreviousTimeSliderBookmark"

#======================================================================
def callback_bookmark_visibility(value):
    '''Callback invoked when the "Flush cache" menu item is selected'''
    tsb.setBookmarkVisibility(not tsb.getBookmarkVisibility())

def callback_create_bookmark(value):
    tsb.createBookmark()

def makeUnframeBookmarkItem():
    '''
    :return: Name of the menuItem widget that was created
    '''
    return cmds.menuItem(label=STR_UNFRAME, sourceType='mel', runTimeCommand=BOOKMARK_UNFRAME_CMD)

def makeEditBookmarkItem():
    '''
    :return: Name of the menuItem widget that was created
    '''
    return cmds.menuItem(sourceType='mel', runTimeCommand=RUNTIME_BOOKMARK_EDIT_CMD)

def makeCreateBookmarkItem():
    '''
    :return: Name of the menuItem widget that was created
    '''
    return cmds.menuItem(sourceType='mel', runTimeCommand=RUNTIME_BOOKMARK_CREATE_CMD)

def makeFrameBookmarkItem():
    '''
    :return: Name of the menuItem widget that was created
    '''
    return cmds.menuItem(sourceType='mel', runTimeCommand=RUNTIME_FRAME_BOOKMARK_CMD)

def makeSelectNextBookmarkItem():
    '''
    :return: Name of the menuItem widget that was created
    '''
    return cmds.menuItem(sourceType='mel', runTimeCommand=RUNTIME_SELECT_BOOKMARK_NEXT_CMD)

def makeSelectPreviousBookmarkItem():
    '''
    :return: Name of the menuItem widget that was created
    '''
    return cmds.menuItem(sourceType='mel', runTimeCommand=RUNTIME_SELECT_BOOKMARK_PREVIOUS_CMD)

def makeFrameNextBookmarkItem():
    '''
    :return: Name of the menuItem widget that was created
    '''
    return cmds.menuItem(sourceType='mel', runTimeCommand=RUNTIME_FRAME_BOOKMARK_NEXT_CMD)

def makeFramePreviousBookmarkItem():
    '''
    :return: Name of the menuItem widget that was created
    '''
    return cmds.menuItem(sourceType='mel', runTimeCommand=RUNTIME_FRAME_BOOKMARK_PREVIOUS_CMD)


def makeBookmarkVisibleItem():
    '''
    :return: Name of the menuItem widget that was created
    '''
    return cmds.menuItem(checkBox=tsb.getBookmarkVisibility()
                        , sourceType='mel'
                        , runTimeCommand=BOOKMARK_TOGGLE_VISIBILITY_CMD
                        )


def makeBookmarkDeleteItem():
    '''
    :return: Name of the menuItem widget that was created
    '''
    return cmds.menuItem(sourceType='mel', runTimeCommand=DELETE_BOOKMARK_AT_CURRENT_TIME_CMD)

def makeBookmarkManagerItem():
    '''
    :return: Name of the menuItem widget that was created
    '''
    return cmds.menuItem(sourceType='mel', runTimeCommand=BOOKMARK_MANAGER_CMD)

def makedeleteAllBookmarkItem():
    '''
    :return: Name of the menuItem widget that was created
    '''
    return cmds.menuItem(sourceType='mel', runTimeCommand=DELETE_ALL_BOOKMARK_CMD)


def createBookmarkMenus():
    '''
    Bookmark menu is used in .mel to create menuItem with all menus for bookmarks
    '''
    menu_id = cmds.menuItem(label=maya.stringTable['y_maya_plugin_timeSliderBookmark_bookmarkButton.kTimeSliderBookmark'], subMenu=True, tearOff=True, version="2020")
    BookmarkButton.create_menus(menu_id)
    cmds.setParent('..', menu=True)

def makeEditBookmarkAtTimeItem(time):
    return cmds.menuItem(runTimeCommand=RUNTIME_BOOKMARK_EDIT_CMD
                        , command=partial(editBookmarkAtTime, time=time))


def makeFrameBookmarkAtTimeItem(time):
    return cmds.menuItem(runTimeCommand=RUNTIME_FRAME_BOOKMARK_CMD
                        ,command=partial(tsb.frameBookmarkAtTime, time=time))

def makeSelectNextBookmarkAtTimeItem(time):
    return cmds.menuItem(runTimeCommand=RUNTIME_SELECT_BOOKMARK_NEXT_CMD
                        ,command=partial(tsb.selectNextBookmarkAtTime, time=time))

def makeSelectPreviousBookmarkAtTimeItem(time):
    return cmds.menuItem(runTimeCommand=RUNTIME_SELECT_BOOKMARK_PREVIOUS_CMD
                        ,command=partial(tsb.selectPreviousBookmarkAtTime, time=time))

def makeFrameNextBookmarkAtTimeItem(time):
    return cmds.menuItem(runTimeCommand=RUNTIME_FRAME_BOOKMARK_NEXT_CMD
                        ,command=partial(tsb.frameNextBookmarkAtTime, time=time))

def makeFramePreviousBookmarkAtTimeItem(time):
    return cmds.menuItem(runTimeCommand=RUNTIME_FRAME_BOOKMARK_PREVIOUS_CMD
                        ,command=partial(tsb.framePreviousBookmarkAtTime, time=time))

def makeUpdateBookmarkAtTimeItem(time):
    return cmds.menuItem(runTimeCommand=BOOKMARK_UPDATE_CMD
                        ,command=partial(tsb.updateBookmarkAtTime, time=time))

def makeBookmarkDeleteAtTimeItem(time):
    return cmds.menuItem(runTimeCommand=DELETE_BOOKMARK_AT_CURRENT_TIME_CMD
                        ,command=partial(tsb.deleteBookmarkAtTime, time=time))

def createTimeSliderMenus(parent_id, current_time):
    cmds.setParent(parent_id, menu=True)
    makeCreateBookmarkItem()
    makeEditBookmarkAtTimeItem(current_time)
    makeSelectNextBookmarkAtTimeItem(current_time)
    makeSelectPreviousBookmarkAtTimeItem(current_time)
    makeFrameBookmarkAtTimeItem(current_time)
    makeFramePreviousBookmarkAtTimeItem(current_time)
    makeFrameNextBookmarkAtTimeItem(current_time)
    makeUnframeBookmarkItem()
    makeUpdateBookmarkAtTimeItem(current_time)
    makeBookmarkDeleteAtTimeItem(current_time)
    cmds.menuItem(divider=True)
    makeBookmarkManagerItem()

class BookmarkButton(object):
    '''Bookmark button is used in the playbackRange.mel to
    add a button to create bookmark from time range selection'''
    WID_BUTTON          = 0
    WID_POPUP            = 1
    WID_BOOKMARK_VISIBLE = 2
    WID_BOOKMARKMANAGER = 3
    WID_DELETEALL = 4
    WID_BOOKMARK_CREATE = 5
    WID_BOOKMARK_FRAME = 6
    WID_BOOKMARK_FRAME_NEXT = 7
    WID_BOOKMARK_FRAME_PREVIOUS = 8
    WID_BOOKMARK_DELETE = 9
    WID_BOOKMARK_EDIT = 10


    def build(self):
        self.widgets[self.WID_BUTTON] = cmds.iconTextButton( image1="createBookmark.png"
                                                            , annotation=maya.stringTable['y_maya_plugin_timeSliderBookmark_bookmarkButton.ktimeSliderBookmarkMenu' ]
                                                            , version='2020'
                                                            , sourceType='mel'
                                                            , command=RUNTIME_BOOKMARK_CREATE_CMD)
        cmds.popupMenu( parent=self.widgets[self.WID_BUTTON], pmc=BookmarkButton.create_menus, pmo=True)
        return self.widgets[self.WID_BUTTON]

    @staticmethod
    def create_menus(parent_id, *args):
        cmds.setParent(parent_id, menu=True)
        makeCreateBookmarkItem()
        makeEditBookmarkItem()
        makeSelectNextBookmarkItem()
        makeSelectPreviousBookmarkItem()
        makeFrameBookmarkItem()
        makeFramePreviousBookmarkItem()
        makeFrameNextBookmarkItem()
        makeUnframeBookmarkItem()
        makeBookmarkDeleteItem()
        cmds.menuItem(divider=True)
        makeBookmarkVisibleItem()
        makedeleteAllBookmarkItem()
        makeBookmarkManagerItem()

    def __init__(self):
        #make sure preferences are loaded
        timeSliderBookmark_preferences_initialize()

        self.widgets = {}
        cmds.scriptJob(uiDeleted=(cmds.setParent(query=True), self.callback_ui_deleted))

    #----------------------------------------------------------------------
    @staticmethod
    def callback_ui_deleted(tool):
        '''
        Callback when the UI is deleted - cleans up the class variables.
        :param tool: BookmarkButton object attached to the UI that was deleted
        '''
        local_dbg( 'callback_ui_deleted' )
        tool.widgets = {}
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
