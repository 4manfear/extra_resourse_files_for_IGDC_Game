import maya.cmds as cmds
import maya.mel as mel

import maya.plugin.polyBoolean.booltoolUI as btui


def nodeVisibility(node):
    if not cmds.objExists(node):
        return btui.cs.visibilityHidden

    isInvisible = not cmds.getAttr(node + ".visibility")
    if isInvisible:
        return btui.cs.visibilityHidden

    if cmds.nodeType(node) == 'transform':
        node = cmds.listRelatives(node, s=True, f=True) or []
        if node:
            node = node[0]
        else:
            return

    if cmds.getAttr(node + '.overrideLevelOfDetail')==1:
        return btui.cs.visibilityBoundingBox

    isxray=mel.eval('displaySurface -q -xRay '+node)
    if isxray[0]==1:
        return btui.cs.visibilityXRay

    isWireframe = cmds.getAttr(node + '.overrideEnabled')
    isWireframe = isWireframe and not cmds.getAttr(node + '.overrideShading')
    isWireframe = isWireframe and not cmds.getAttr(node + '.castsShadows')
    isWireframe = isWireframe and not cmds.getAttr(node + '.receiveShadows')
    isWireframe = isWireframe and not cmds.getAttr(node + '.primaryVisibility')
    isWireframe = isWireframe and not cmds.getAttr(node + '.visibleInReflections')
    isWireframe = isWireframe and not cmds.getAttr(node + '.visibleInRefractions')
    return not isWireframe

def turnNodeBBox(node,turn):
    cmds.setAttr(node + '.overrideLevelOfDetail', turn)

def turnNodeXRay(node,turn):
    mel_cmd='displaySurface -xRay '+ str(turn) +' '+node
    mel.eval(mel_cmd)
    
def setNodeVisibility(node, visibility):
    is_hidden = (visibility == btui.cs.visibilityHidden)
    cmds.setAttr(node + '.visibility', not is_hidden)

    if is_hidden: return

    if cmds.nodeType(node) == 'transform':
        node = cmds.listRelatives(node, s=True, f=True) or []
        if node:
            node = node[0]
        else:
            return

    if (visibility == btui.cs.visibilityWireframe or visibility == btui.cs.visibilityXRay 
        or visibility == btui.cs.visibilityBoundingBox):
        cmds.setAttr(node + '.overrideEnabled', 1)
    if(visibility == btui.cs.visibilityBoundingBox):
        cmds.setAttr(node + '.overrideShading', 1)
        cmds.setAttr(node + '.castsShadows', 1)
        cmds.setAttr(node + '.receiveShadows', 1)
        cmds.setAttr(node + '.primaryVisibility', 1)
        cmds.setAttr(node + '.visibleInReflections', 1)
        cmds.setAttr(node + '.visibleInRefractions', 1)
        
        turnNodeXRay(node, 0)
        turnNodeBBox(node, 1)
    elif(visibility == btui.cs.visibilityXRay):
        cmds.setAttr(node + '.overrideShading', 1)
        cmds.setAttr(node + '.castsShadows', 1)
        cmds.setAttr(node + '.receiveShadows', 1)
        cmds.setAttr(node + '.primaryVisibility', 1)
        cmds.setAttr(node + '.visibleInReflections', 1)
        cmds.setAttr(node + '.visibleInRefractions', 1)

        turnNodeBBox(node, 0)
        turnNodeXRay(node, 1)
    else:
        turnNodeBBox(node, 0)
        turnNodeXRay(node, 0)
        cmds.setAttr(node + '.overrideShading', visibility)
        cmds.setAttr(node + '.castsShadows', visibility)
        cmds.setAttr(node + '.receiveShadows', visibility)
        cmds.setAttr(node + '.primaryVisibility', visibility)
        cmds.setAttr(node + '.visibleInReflections', visibility)
        cmds.setAttr(node + '.visibleInRefractions', visibility)

def isSelfMeshNode(node, meshNode):
    #Method 1: judge from output connections.
    """shape = cmds.listConnections(node + '.output') or []
    if shape:
        if cmds.ls(meshNode, uuid=True) in [cmds.ls(shape[0], uuid=True)]:
            return True
            """

    #Method 2: find inmesh connections.
    schilds=cmds.listRelatives(meshNode, children=True, shapes=True) #-shapes=1 -children=1
    if schilds:
        for child in schilds:
            inMeshConns = cmds.listConnections(child + '.inMesh') or []
            if inMeshConns:
                if cmds.ls(node, uuid=True) in [cmds.ls(x, uuid=True) for x in inMeshConns]:
                    return True
                else:
                    for inMeshConn in inMeshConns:
                        if cmds.attributeQuery('inputPolymesh',ex = True,node=inMeshConn):
                            inPolyMeshConns = cmds.listConnections(inMeshConn + '.inputPolymesh') or []
                            if cmds.ls(node, uuid=True) in [cmds.ls(x, uuid=True) for x in inPolyMeshConns]:
                                return True
    
    return False

def addMeshToBool(boolNode, meshNode):
    if cmds.objExists(meshNode) and cmds.nodeType(meshNode) in ['transform', 'mesh']:
        if cmds.nodeType(meshNode) == 'transform':
            nodes = cmds.listConnections(boolNode + '.inputMat')
            if nodes:
                if cmds.ls(meshNode, uuid=True) in [cmds.ls(x, uuid=True) for x in nodes]:
                    return
        else:
            existingConns = cmds.listConnections(meshNode + '.outMesh') or cmds.listConnections(meshNode + '.outSmoothMesh') or []
            if existingConns:
                if cmds.ls(boolNode, uuid=True) in [cmds.ls(x, uuid=True) for x in existingConns]:
                    return

        if isSelfMeshNode(boolNode, meshNode):
            return

        cmds.polyBooleanCmd(boolNode, e=True, am=meshNode)
        setNodeVisibility(meshNode, btui.cs.visibilityWireframe)

def setNodeOverrideColor(node, color):
    try:
        color = [x / 255.0 for x in color]
        cmds.setAttr(node + '.overrideRGBColors', 1)
        cmds.setAttr(node + '.overrideColorRGB', *color, typ='float3')
    except: pass

def setBoolMode(node, mode):
    cmds.setAttr(node + '.booleanMode', mode)

def setBoolType(node, types):
    for i, value in enumerate(types):
        if value == btui.cs.kBoolOpNoop:
            types[i] = btui.cs.kBoolOpUnion
    cmds.setAttr(node + '.operation', types, typ='Int32Array')
      
def setBoolColor(node, rgba):
    color = [rgba[0], rgba[1], rgba[2]]
    alpha = rgba[3]
    
    if cmds.nodeType(node) == 'transform':
        node = cmds.listRelatives(node, s=True, f=True) or []
        if node:
            node = node[0]
            cmds.setAttr(node + '.overrideRGBColors', 1)
            cmds.setAttr(node + '.overrideColorRGB', *color, typ='float3')
            cmds.setAttr(node + '.overrideColorA', alpha)
         
def setElementEnabled(node, elements):
    cmds.setAttr(node + '.elementEnabled', elements, typ='Int32Array')
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
