### See the file "LICENSE.txt" for the full license governing this code.
import maya.plugin.polyBoolean.booltoolAPI as btapi
import maya.plugin.polyBoolean.booltoolUI as btui

import maya.cmds as cmds
import maya.mel as mel
import maya.OpenMaya as om
import maya.app.flux.ae.api as loader

def registerTemplates():
    loader.registerTemplate('maya.plugin.polyBoolean.AEbooltoolTemplate.AEboolToolTemplate', 'polyBoolean')

nodeCallbacks = []

class MCallbackIdWrapper:
    def __init__(self, callbackId):
        self.callbackId = callbackId

    def __del__(self):
        om.MMessage.removeCallback(self.callbackId)

def isInBatch():
    return (om.MGlobal.mayaState() == om.MGlobal.kBatch or om.MGlobal.mayaState() == om.MGlobal.kLibraryApp)

def register():
    # Registers node created callbacks to manage all required connections
    try:
        global nodeCallbacks
        nodeCallbackId = om.MDGMessage.addNodeAddedCallback(onBoolToolCreated, "polyBoolean", None)
        nodeCallbacks.append(MCallbackIdWrapper(nodeCallbackId))

        if not isInBatch():
            setupUI()
    except Exception as e:
        raise

def deregister():
    # Clear up callbacks
    global nodeCallbacks
    nodeCallbacks = []
    if not isInBatch():
        tearDownUI()

def onBoolToolRemoved(mobj, dgmodifier, clientData):
    dep = om.MFnDependencyNode(mobj)
    pname = dep.name()
    nodes = cmds.listConnections(pname + '.inputPoly') or []
    if nodes:
        for n in nodes:
            btapi.setNodeVisibility(n, 1)

def onBoolToolCreated(mobj, clientData):
    nodeCallbackId = om.MNodeMessage.addNodeAboutToDeleteCallback(mobj, onBoolToolRemoved, None)
    nodeCallbacks.append(MCallbackIdWrapper(nodeCallbackId))

def setupUI():
    registerTemplates()

def tearDownUI():
    # nothing to remove
    return

def getPolyNodeVisibility(m):
    visibility = cmds.getAttr(m + '.visibility')
    parents=cmds.listRelatives(m, parent=True, f=True) or []
    if parents:
        visibility = visibility and cmds.getAttr(parents[0] + '.visibility')
        
    return visibility
        
 #btype: 1 = Union, 2 = A-B Difference, 3 = Intersection, 4 = B-A Difference, 5 = Slice, 6 = Hole PUnch, 7 = Cut Out, 8 = Split Edges
#objdisp: 0 - Wireframe, 1 - Shaded, 2 - Bounding Box, 3 - X-Ray, 4 - Hidden.
def createBoolTool(btype=1,objdisp=0, tagInt=1):
    createdNodes = []
    types = []

    existing = False
    meshes = cmds.ls(sl=True, dag=True, type="mesh", long=True, noIntermediate=True) or []

    createdNodes = cmds.polyBooleanCmd(op=btype, ti=tagInt)
    boolNode = createdNodes[1]

    nodes = cmds.listRelatives(createdNodes[0], s=True, f=True) or []
    if nodes and nodes[0] in meshes:
        # If we appended to an existing node, then we remove the original output
        # mesh from the selection list and set the types array to what it should be
        meshes.remove(nodes[0])
        existing = True

    ipnodes = cmds.listConnections(boolNode + '.inputPoly') or []
    # Set visibility via UI setting
    if ipnodes:
        for n in ipnodes:
            vis=getPolyNodeVisibility(n)
            if(vis):
                btapi.setNodeVisibility(n, objdisp)
            else:
                btapi.setNodeVisibility(n, btui.cs.visibilityHidden)
            types.append(btype)

    if existing:
        types = cmds.getAttr(createdNodes[1] + '.operation')

    return createdNodes
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
