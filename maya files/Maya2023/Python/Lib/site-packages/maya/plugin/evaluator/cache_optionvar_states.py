import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
This file contains OptionVar implementations for all of the caching preferences that do not
have separate Maya state information. (i.e. those whose value is solely contained within
an optionVar value.)

Keeping them in a separate file like this allows both the CacheEvaluatorManager and the
CachePreferences to access them without recursive imports.
'''
from maya.app.prefs.OptionVar import OptionVar, OPTION_VAR_TYPE_BOOL, OPTION_VAR_TYPE_FLOAT, OPTION_VAR_TYPE_INT
from maya.common.utils import Singleton
from future.utils import with_metaclass

__all__ = [ r'CachePreferenceHud'
          , r'CachePreferenceResourceGuard'
          , r'CachePreferenceMemoryThreshold'
          , r'CachePreferenceDiscardFramesOutOfRange'
          , r'CachePreferenceShowCacheStatus'
          , r'CachePreferenceShowWarningFrames'
          , r'CachePreferenceShowInvalidatedFrames'
          , r'CachePreferenceShowSubframes'
          , r'CachePreferenceTimesliderBarHeight'
          , r'CachePreferenceTimesliderBarSpacing'
          , r'CachePreferenceTimesliderBarPosition'
          , r'CachePreferenceShowWarningMessages'
          ]

PREF_CATEGORY = r'Cached Playback'

#======================================================================
class CachePreferenceHud(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "caching playback HUD visibility" preference.
    '''
    ov_id = r'cacheVisibility' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( CachePreferenceHud, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, False, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kCacheHUDText' ]
        self.info  = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kCacheHUDTip'  ]

#======================================================================
class CachePreferenceResourceGuard(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "caching playback resource guard mode" preference
    '''
    ov_id = r'cachedPlaybackResourceGuard' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( CachePreferenceResourceGuard, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, True, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kResourceGuardText' ]
        self.info  = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kResourceGuardTip'  ]

#======================================================================
class CachePreferenceMemoryThreshold(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "caching playback resource guard memory threshold" preference
    '''
    ov_id = r'cachedPlaybackMemoryThreshold' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( CachePreferenceMemoryThreshold, self ).__init__(self.ov_id, OPTION_VAR_TYPE_FLOAT, 50.0, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kMemoryThresholdText' ]
        self.info  = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kMemoryThresholdTip'  ]

    @staticmethod
    def ranges():
        ''' :return 4-tuple with the min/max/soft_min/soft_max values for the threshold'''
        return (0, 100, 0, 200)

#======================================================================
class CachePreferenceDiscardFramesOutOfRange(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "caching playback discards cache data outside of playback range" preference
    '''
    ov_id = r'cachedPlaybackDiscardFramesOutOfRange' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( CachePreferenceDiscardFramesOutOfRange, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, True, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kDiscardFramesOutOfRangeText' ]
        self.info  = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kDiscardFramesOutOfRangeTip'  ]

#======================================================================
class CachePreferenceShowCacheStatus(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "caching playback show cache status" preference
    '''
    ov_id = r'cachedPlaybackShowCacheStatus' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( CachePreferenceShowCacheStatus, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, True, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kCachedPlaybackShowCacheStatusText' ]
        self.info  = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kCachedPlaybackShowCacheStatusTip'  ]

#======================================================================
class CachePreferenceShowInvalidatedFrames(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "caching playback shows invalid frames in the Time Slider" preference
    '''
    ov_id = r'cachedPlaybackShowInvalidatedFrames' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( CachePreferenceShowInvalidatedFrames, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, False, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kShowInvalidatedFramesText' ]
        self.info  = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kShowInvalidatedFramesTip'  ]

#======================================================================
class CachePreferenceShowSubframes(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "caching playback shows subframes in the Time Slider" preference
    '''
    ov_id = r'cachedPlaybackShowCachedSubframes' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( CachePreferenceShowSubframes, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, True, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kShowSubframesText' ]
        self.info  = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kShowSubframesTip'  ]

#======================================================================
class CachePreferenceShowWarningFrames(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "caching playback shows warning frames in the Time Slider" preference
    '''
    ov_id = r'cachedPlaybackShowWarningFrames' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( CachePreferenceShowWarningFrames, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, True, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kShowWarningFramesText' ]
        self.info  = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kShowWarningFramesTip'  ]

#======================================================================
class CachePreferenceTimesliderBarHeight(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "caching playback Time Slider bar height" preference
    '''
    ov_id = r'cachedPlaybackHeight' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( CachePreferenceTimesliderBarHeight, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, 2, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kTimesliderBarHeightText' ]
        self.info  = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kTimesliderBarHeightTip'  ]

#======================================================================
class CachePreferenceTimesliderBarSpacing(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "Time Slider bar custom draw spacing" preference
    '''
    ov_id = r'timeSliderCustomDrawSpacing' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( CachePreferenceTimesliderBarSpacing, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, 1, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kTimesliderBarSpacingText' ]
        self.info  = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kTimesliderBarSpacingTip'  ]

#======================================================================
class CachePreferenceTimesliderBarPosition(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "caching playback Time Slider bar position" preference
    '''
    ov_id = r'cachedPlaybackPosition' # optionVar name and unique preference ID

    # This could be a dictionary but it's important to preserve the ordering so it's a list of lists.
    DATA = [ [ r'above' , maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kBarPositionAbove'    ]
                        , maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kBarPositionAboveTip' ]
             ]
           , [ r'below' , maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kBarPositionBelow'    ]
                        , maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kBarPositionBelowTip' ]
             ]
           ]
    # The first element of the list is treated as a dictionary key
    KEYS = [data[0] for data in DATA]

    def __init__(self):
        ''' Initialize the preference interface '''
        super( CachePreferenceTimesliderBarPosition, self ).__init__(self.ov_id, self.KEYS, self.KEYS[1], PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kTimesliderBarPositionText' ]
        self.info  = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kTimesliderBarPositionTip'  ]
        self.lookup = { mode : i+1 for i, mode in enumerate(self.KEYS) }

    def find_index(self, value):
        '''Find the index in the DATA list of the given enum value'''
        return self.lookup[value]

#======================================================================
class CachePreferenceShowWarningMessages(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "caching playback shows warning messages" preference
    '''
    ov_id = r'cachedPlaybackShowWarningMessages' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( CachePreferenceShowWarningMessages, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, True, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kShowWarningMessagesText' ]
        self.info  = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kShowWarningMessagesTip'  ]

#======================================================================
class CachePreferenceCacheSmoothMeshes(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "Cache smooth meshes" preference
    '''
    ov_id = r'cachedPlaybackCacheSmoothMeshes' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( CachePreferenceCacheSmoothMeshes, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, False, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kCacheSmoothMeshesText' ]
        self.info  = maya.stringTable['y_maya_plugin_evaluator_cache_optionvar_states.kCacheSmoothMeshesTip'  ]
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
