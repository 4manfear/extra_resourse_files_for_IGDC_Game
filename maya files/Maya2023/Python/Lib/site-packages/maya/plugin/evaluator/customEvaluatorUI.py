"""
Prototype platform to view the currently available custom evaluators and their
states.

Import via:

    from maya.plugin.evaluator.customEvaluatorUI import custom_evaluator_ui, custom_evaluator_display

and then create the window with:

    evaluatorUI = custom_evaluator_ui()

or visualize the custom evaluator clusters using display layers with:

    custom_evaluator_display('theevaluator_name')
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)

from builtins import range
import maya.cmds as cmds

__all__ = [ r'custom_evaluator_ready_state_change'
          , r'custom_evaluator_active_state_change'
          , r'custom_evaluator_ui'
          , r'custom_evaluator_display'
          ]

# UI Widget IDs
ID_WINDOW     = r'custom_evaluator_ui'
ID_FRAME      = r'custom_evaluator_uiList'
ID_EVALUATORS = r'CustomEvaluatorList'

#======================================================================

def custom_evaluator_ready_state_change(evaluator_name, new_value):
    """
    Callback when a checkbox is ticked to alter the ready state of a custom
    evaluator.
    """
    print( maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kReadyChange' ] % (evaluator_name, new_value) )
    cmds.evaluatorInternal( name=evaluator_name, ready=new_value )

#======================================================================

def custom_evaluator_active_state_change(evaluator_name, new_value):
    """
    Callback when a checkbox is ticked to alter the active state of a custom
    evaluator.
    """
    print( maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kActiveChange' ] % (evaluator_name, new_value) )
    cmds.evaluator( name=evaluator_name, enable=new_value )

#======================================================================

CUSTOM_EVALUATOR_SCRIPT_JOB = None
def custom_evaluator_ui():
    """
    Create a simple window showing the current status of the custom evaluators
    and providing a callback so that they can update the status when it changes.
    Layout is a row per evaluator with the following information:

        evaluator_name   Ready []   Active []   <Evaluator-specific information>
    """
    global CUSTOM_EVALUATOR_SCRIPT_JOB
    print( maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kCreate' ] )
    windowName = ID_WINDOW
    if not cmds.window( windowName, exists=True ):
        windowName = cmds.window( windowName,
                                  title=maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kWindowTitle' ],
                                  iconName=maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kWindowIconName' ] )
    else:
        cmds.deleteUI( ID_FRAME )
        cmds.setParent( windowName )
    if CUSTOM_EVALUATOR_SCRIPT_JOB is None:
        CUSTOM_EVALUATOR_SCRIPT_JOB = cmds.scriptJob( event=['customEvaluatorChanged','maya.plugin.evaluator.custom_evaluator_ui.custom_evaluator_ui()'] )
    cmds.frameLayout( ID_FRAME, label=maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kInfoLbl'] )
    cmds.rowColumnLayout( ID_EVALUATORS, numberOfColumns=4,
                          columnAlign=[(1, r'left'), (2, r'center'), (3, r'center'), (4,r'left')],
                          columnSpacing=[(1,10), (2,10), (3,10), (4,10)]
                        )
    evaluators = cmds.evaluator( query=True, name=True )
    for evaluator_name in evaluators:
        cmds.text(label=evaluator_name, font='boldLabelFont')
        cmds.checkBox( value=cmds.evaluatorInternal(name=evaluator_name, query=True, ready=True),
                       label=maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kReady'],
                       onCommand='maya.plugin.evaluator.custom_evaluator_ui.custom_evaluator_ready_state_change("%s",True)' % evaluator_name,
                       offCommand='maya.plugin.evaluator.custom_evaluator_ui.custom_evaluator_ready_state_change("%s",False)' % evaluator_name
                     )
        cmds.checkBox( value=cmds.evaluator(name=evaluator_name, query=True, enable=True),
                       label=maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kActive'],
                       onCommand='maya.plugin.evaluator.custom_evaluator_ui.custom_evaluator_active_state_change("%s",True)' % evaluator_name,
                       offCommand='maya.plugin.evaluator.custom_evaluator_ui.custom_evaluator_active_state_change("%s",False)' % evaluator_name
                     )
        nodeTypes = cmds.evaluator(name=evaluator_name, query=True, nodeType=True)
        if nodeTypes:
            nodeTypeCount = len(nodeTypes)
        else:
            nodeTypeCount = 0
        infoString = maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kNodeInfo' ] % nodeTypeCount
        info = cmds.evaluator( name=evaluator_name, query=True, info=True )
        if info and info:
            infoString = '%s, %s' % (infoString, info)
        cmds.text( label=infoString )
    cmds.setParent( '..' )
    cmds.button( label=maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kLblUpdate' ], command='maya.plugin.evaluator.custom_evaluator_ui.custom_evaluator_ui()' )
    cmds.setParent( '..' )
    cmds.showWindow( windowName )

#======================================================================

def custom_evaluator_display(custom_evaluator_name):
    """
    Take the named custom evaluator and put each of its evaluation clusters
    into a different display layer with a rotating colouring. (It's rotating
    because the display layers only have a small number of colours available
    whereas there could be a large number of clusters in the scene.)

    Although it only works for DAG nodes this provides a simple visual cue
    of how the custom evaluator has created its clusters.
    """
    print( maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kDisplay' ] )
    clusterInfo = cmds.evaluatorInternal( name=custom_evaluator_name, query=True, clusters=True )
    if clusterInfo is None:
        print( maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kNoCluster' ] % custom_evaluator_name )
    else:
        idx = 0
        colour = 1
        try:
            while idx < len(clusterInfo):
                clusterSize = clusterInfo[idx]
                clusterContents = []
                for subIndex in range(1,clusterSize+1):
                    objectName = clusterInfo[idx+subIndex]
                    if 'dagNode' in cmds.nodeType( objectName, inherited=True ):
                        clusterContents.append( objectName )
                # No sense creating a display layer when no DAG objects exist
                if clusterContents:
                    cmds.select( clusterContents )
                    newLayer = cmds.createDisplayLayer( noRecurse=True, name='%sLayer' % custom_evaluator_name )
                    cmds.setAttr( '%s.drawInfo.color' % newLayer, colour )
                    colour = (colour + 1) % 256
                    print( maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kShowCluster' ] % (newLayer, clusterContents) )
                idx += clusterSize + 1
        except Exception as ex:
            cmds.warning( maya.stringTable['y_maya_plugin_evaluator_customEvaluatorUI.kBadCluster' ] % (idx, str(ex)) )
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
