"""
This module is always imported during Maya's startup.  It is imported from
both the maya.app.startup.batch and maya.app.startup.gui scripts
"""
from past.builtins import execfile
import atexit
import maya
import maya.app
import maya.app.commands
from maya import cmds, utils
import maya.mel as mel

def setupScriptPaths():
    """
    Add Maya-specific directories to sys_path
    """
    # Extra libraries
    #
    from os import path as os_path
    from sys import path as sys_path
    try:
        # Tkinter libraries are included in the zip, add that subfolder
        p = [p for p in sys_path if p.endswith('.zip')][0]
        sys_path.append( os_path.join(p,'lib-tk') )
    except:
        pass
    
    # Per-version prefs scripts dir (eg .../maya8.5/prefs/scripts)
    #
    prefsDir = cmds.internalVar( userPrefDir=True )
    sys_path.append( os_path.join( prefsDir, 'scripts' ) )
    
    # Per-version scripts dir (eg .../maya8.5/scripts)
    #
    scriptDir = cmds.internalVar( userScriptDir=True )
    sys_path.append( os_path.dirname(scriptDir) )
    
    # If a user has packages installed here, it's because they want to
    # override Maya's site-packages paths.
    # MAYA-112606
    userSitePackagesDir = os_path.join( scriptDir, 'site-packages' )
    sys_path.insert(0, userSitePackagesDir )
    
    # User application dir (eg .../maya/scripts)
    #
    appDir = cmds.internalVar( userAppDir=True )
    sys_path.append( os_path.join( appDir, 'scripts' ) )
    
def executeUserSetup():
    """
    Look for userSetup.py in the search path and execute it in the "__main__"
    namespace
    """
    from os import path as os_path
    option = cmds.optionVar(exists='SafeModeExecUserSetupScript')
    if not option:
        cmds.optionVar(iv=['SafeModeExecUserSetupScript',1])
    isExec = cmds.optionVar(q='SafeModeExecUserSetupScript')
    if isExec != 1:
        return
    from os import environ as os_environ
    if 'MAYA_SKIP_USERSETUP_PY' not in os_environ:
        from sys import stdout as sys_stdout, stderr as sys_stderr
        try:
            option = cmds.optionVar(exists='SafeModeUserSetupHashOption')
            if not option:
                cmds.optionVar(iv=['SafeModeUserSetupHashOption',1])
            isExec = cmds.optionVar(q='SafeModeUserSetupHashOption')
            from sys import path as sys_path
            for path in sys_path[:]:
                scriptPath = os_path.join( os_path.normpath(path), 'userSetup.py' )
                scriptPath = scriptPath.replace("\\", "/")
                if os_path.isfile( scriptPath ):
                    import __main__
                    if isExec == 1:
                        evalExpres = "safemodecheckhash -pts \"" + scriptPath + "\" -wd 1;"
                        result = mel.eval(evalExpres)
                    execfile( scriptPath, __main__.__dict__ )
                    sys_stdout.flush()
                    sys_stderr.flush()
        except Exception as err:
            from traceback import extract_tb as traceback_extract_tb, format_list as traceback_format_list, format_exception_only as traceback_format_exception_only
            # err contains the stack of everything leading to execfile,
            # while sys.exc_info returns the stack of everything after execfile
            try:
                # extract the stack trace for the current exception
                from sys import exc_info as sys_exc_info
                etype, value, tb = sys_exc_info()
                tbStack = traceback_extract_tb(tb)
            finally:
                del tb # see warning in sys.exc_type docs for why this is deleted here
            sys_stdout.flush()
            sys_stderr.write("Failed to execute userSetup.py\n")
            sys_stderr.write("Traceback (most recent call last):\n")
            # format the traceback, excluding our current level
            result = traceback_format_list( tbStack[1:] ) + traceback_format_exception_only(etype, value)
            sys_stderr.write(''.join(result))
            sys_stderr.flush()

# Set up sys_path to include Maya-specific user script directories.
setupScriptPaths()

# Set up string table instance for application
maya.stringTable = utils.StringTable()

# Set up auto-load stubs for Maya commands implemented in libraries which are not yet loaded
maya.app.commands.processCommandList()

#Prevent AOVs from being imported.
#Only need to add those 2 callbacks if the maya version we run uses rendererers
import maya.app.startup.dontImportExportAOVs as dontImportExportAOVs
dontImportExportAOVs.initialize()
import maya.app.startup.masterLayerOnExport as masterLayerOnExport
masterLayerOnExport.initialize()

# Set up the maya logger before userSetup.py runs, so that any custom scripts that
# use the logger will have it available
utils.shellLogHandler()

# Register code to be run on exit
atexit.register( maya.app.finalize )
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
