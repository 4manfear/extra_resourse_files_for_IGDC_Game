import maya
maya.utils.loadStringResourcesForModule(__name__)

import moverlay

from PySide2 import QtWidgets, QtCore, QtGui
from PySide2.QtCore import QPoint, QPointF, QSize, Qt, SIGNAL, QObject
from PySide2.QtGui import QColor, QIcon, QPainter, QPainterPath
from PySide2.QtWidgets import QStyleOption, QStyle

import maya.cmds as cmds
import maya.OpenMaya as om
import maya.OpenMayaUI as omui
import shiboken2
import threading

from moverlay.maya import getMainMayaWindow, overlayManager
from moverlay.overlayDef import OverlayDef
from moverlay.enums import RelTo, OverlayStyle, Direction
from moverlay.utils import DPIScale
from moverlay import drawStyles

tailSize = DPIScale(8)
bgColor = QColor(217, 217, 217, 255)
margin = DPIScale(12)
buttonMargin = DPIScale(6)
closeSize = DPIScale(10)
overlayObjectName = 'crashRecoveryMessageOverlay'

g_recoveryOverlayInstance = None

def drawBubbleTail(painter):
    painter.save()
    painter.setBrush(bgColor)

    point = QPointF(tailSize, DPIScale(8))
    tail = QPainterPath(point)

    point += QPointF(0, tailSize * 2)
    tail.lineTo(point)

    point += QPointF(-tailSize, -tailSize)
    tail.lineTo(point)
    tail.closeSubpath()

    painter.drawPath(tail)
    painter.restore()

class CustomStyleWidget(QtWidgets.QWidget):
    def paintEvent(self, e):
        super(CustomStyleWidget, self).paintEvent(e)

        opt = QStyleOption()
        opt.init(self)

        # Move background to allow space for the tail
        opt.rect.setLeft(opt.rect.left() + tailSize - 1)

        p = QPainter(self)
        drawBubbleTail(p)
        self.style().drawPrimitive(QStyle.PE_Widget, opt, p, self)

def createCloseButton(closeCallback):
    close = QtWidgets.QToolButton()
    close.setAutoRaise(True)
    close.setIconSize(QSize(closeSize, closeSize))
    close.setIcon(QIcon(":/closeIconDark.svg"))
    QObject.connect(close, SIGNAL("clicked()"), closeCallback)
    return close

def createLabel(text):
    label = QtWidgets.QLabel(text)
    label.setStyleSheet("color: rgba(60, 60, 60, 255)")
    return label

def createContentWidget(text, closeCallback):
    closeLayout = QtWidgets.QHBoxLayout()
    closeLayout.setContentsMargins(0, buttonMargin, buttonMargin, 0)
    closeLayout.addStretch()
    closeLayout.addWidget(createCloseButton(closeCallback))

    labelLayout = QtWidgets.QVBoxLayout()
    labelLayout.setContentsMargins(margin + tailSize, 0, margin, margin)
    labelLayout.addWidget(createLabel(text))

    layout = QtWidgets.QVBoxLayout()
    layout.setContentsMargins(0, 0, 0, 0)
    layout.addLayout(closeLayout)
    layout.addLayout(labelLayout)

    widget = CustomStyleWidget()
    widget.setAttribute(Qt.WA_TranslucentBackground, True)
    widget.setStyleSheet("background-color: rgba({r}, {g}, {b}, 255); border-radius: {radius}px"\
        .format(radius=DPIScale(4), r=bgColor.red(), g=bgColor.green(), b=bgColor.blue()))
    widget.setLayout(layout)
    return widget

def destroyOverlay(overlay):
    overlayManager().deleteOverlay(overlay)

def createOverlay(label, closeCallback):
    mainWindow = getMainMayaWindow()
    parentTopLeft = mainWindow.frameGeometry().topLeft()
    parentOrigin = mainWindow.mapFromGlobal(parentTopLeft)

    appHomeWidgetPtr = omui.MQtUtil.findControl('mayaHomeButton')
    appHomeButton = shiboken2.wrapInstance(int(appHomeWidgetPtr), QtWidgets.QWidget)
    appHomeButtonRect = appHomeButton.rect()

    globalPos = appHomeButton.mapTo(mainWindow, QPoint(0, 0))
    appHomeButtonRect.moveTo(globalPos)
    appHomeButtonRect.translate(-parentOrigin.x(), -parentOrigin.y())
    appHomeButtonRect.translate(DPIScale(5), DPIScale(2))

    pos = appHomeButtonRect.topRight()

    overlayDef = OverlayDef(attachment=RelTo.TopLeft, offset=QSize(pos.x() - tailSize, pos.y()), \
        style=OverlayStyle.Custom)

    overlay = overlayManager().createOverlay(overlayDef)
    overlay.setAsWidget(createContentWidget(text=label, closeCallback=closeCallback))
    return overlay

class CrashRecoveryMsg(QObject):
    def __init__(self, text):
        super(CrashRecoveryMsg, self).__init__(getMainMayaWindow())
        self.setObjectName(overlayObjectName)
        self.isDestroyed = False
        self.destructionTimer = threading.Timer(90, self.destroyOverlay)
        self.overlay = createOverlay(text, self.destroyOverlay)

    def __del__(self):
        self.destroyOverlay()

    def show(self):
        self.overlay.show()
        self.destructionTimer.start()

    def destroyOverlay(self):
        if not self.isDestroyed and self.overlay:
            self.isDestroyed = True
            destroyOverlay(self.overlay)

def getCrashRecoveryMsg(crashFile, iconVisible):
    crashFileExists = cmds.file(crashFile, q=True, exists=True)

    if crashFileExists:
        fileText = maya.stringTable['y_maya_app_general_crashRecoveryMessage.kCrashRecoveryFile' ]
    else:
        fileText = maya.stringTable['y_maya_app_general_crashRecoveryMessage.kCrashRecoveryLastSaved' ]

    if iconVisible:
        text = maya.stringTable[ \
            'y_maya_app_general_crashRecoveryMessage.kCrashRecoveryMsg' \
             \
        ].format(fileText)
    else:
        text = maya.stringTable[ \
            'y_maya_app_general_crashRecoveryMessage.kCrashRecoveryConsoleMsg' \
             \
        ].format(fileText)

    return text

def destroyOverlayMessage():
    if g_recoveryOverlayInstance:
        g_recoveryOverlayInstance.destroyOverlay()

def initCrashRecoveryMessage():
    global g_recoveryOverlayInstance

    crashFile = cmds.crashInfo(q=True, cf=True)

    if len(crashFile):
        iconVisible = cmds.appHome(q=True, iv=True)
        message = getCrashRecoveryMsg(crashFile, iconVisible)
        if iconVisible:
            g_recoveryOverlayInstance = CrashRecoveryMsg(message)
            g_recoveryOverlayInstance.destroyed.connect(destroyOverlayMessage)
            g_recoveryOverlayInstance.show()
        else:
            om.MGlobal.displayWarning(message)

def hideCrashRecoveryMessage():
    mainWindow = getMainMayaWindow()
    overlay = mainWindow.findChild(QtCore.QObject, overlayObjectName)

    if overlay:
        overlay.deleteLater()

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
