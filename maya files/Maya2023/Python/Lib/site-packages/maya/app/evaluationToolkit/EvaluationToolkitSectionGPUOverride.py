import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
Support for the Evaluation Toolkit UI section containing controls for GPU Override
'''

__all__ = ['EvaluationToolkitSectionGPUOverride']

import os
import json
import maya.cmds as cmds
import maya.mel as mel
from maya.common.ui import LayoutManager, callback_tool
from maya.app.evaluationToolkit.evaluation_toolkit_utilities import EvaluationToolkitSection, section_layout, BUTTON_WIDTH, COLUMN_SPACING
from maya.debug.em_debug_utilities import dbg_deformations_to_dot, require_evaluation_graph, print_deformer_clusters, get_default_directory, open_file

#======================================================================
kWidgetHeight = 26

# Labels and annotations
kPrintLabel = maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kLabelPrint' ]
kShowLabel = maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kLabelShow' ]
kOutputFormat = maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kChooseFormatText' ]
kOutputLocation = maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kInspectionOutputLocation' ]
kIncludePlugsLabel = maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kLabelIncludePlugs' ]
kIncludePlugsAnnotation = maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kAnnotationIncludePlugs' ]
kReuseModes = [ (maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kReuseNever' ], 'never'),
                (maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kReuseImmediate' ], 'immediate'),
                (maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kReuseAlways' ], 'always') ]

# Messages
kNoSelectionError = maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kPrintSelectedErrorMessage' ]

#======================================================================
def _isPluginLoaded(pluginName):
    '''
    check to see if the plugin is loaded
    '''
    return cmds.pluginInfo(pluginName, loaded=True, query=True)

#======================================================================
def _getReuseModeIndex(mode):
    for i,m in enumerate(kReuseModes):
        if mode == m[1]:
            return (i+1)
    return 1

#======================================================================
def _menu(menu_grp_widget):
    '''Helper to convert a menu group widget name to its child menu name'''
    return menu_grp_widget + r'|OptionMenu'

#======================================================================
class EvaluationToolkitSectionGPUOverride(EvaluationToolkitSection):
    '''
    Class providing support for UI and functionality of the evaluation toolkit GPU Override section.
    '''

    #----------------------------------------------------------------------
    def __init__(self, title, start_closed, get_graphviz_manager):
        '''
        Set up the framework for the GPU Override controls
        :param title: Name of the main GPU Override section
        :param start_closed: Whether the section should start closed or not
        :param get_graphviz_manager: Callback to retrieve a GraphVizManager for use in DOT/PDF file generation
        '''

        self.get_graphviz_manager = get_graphviz_manager
        self.widgets = {}
        self.three_column_layout = dict(numberOfColumns=3
                                        , adjustableColumn=2
                                        , columnAlign=[(1, 'right'), (2, 'center'), (3, 'left')]
                                        , columnAttach=[(1, 'right', 0), (2, 'both', 0), (3, 'left', 0)]
                                        , columnSpacing=[(1,COLUMN_SPACING), (2,COLUMN_SPACING), (3,COLUMN_SPACING)]
                                        , columnWidth=[(1,150), (3,150)]
                                        , rowSpacing=(1,6)
                                        )


        self.layout_widget = cmds.frameLayout(label=title, **section_layout(start_closed))
        with LayoutManager( self.layout_widget ):
            with LayoutManager(cmds.rowColumnLayout(**self.three_column_layout)):

                cmds.text(label=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kActiveDeformationChains' ])
                cmds.button(label=kPrintLabel, width=BUTTON_WIDTH, command=callback_tool(self, self.callback_print_chains))
                cmds.separator(style='none', height=1)

                cmds.text(label=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kMeshInformation' ])
                cmds.button(label=kPrintLabel, width=BUTTON_WIDTH, command=callback_tool(self, self.callback_print_meshes))
                cmds.separator(style='none', height=1)

                cmds.text(label=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kSelectedNodesStatus' ])
                cmds.button(label=kPrintLabel, width=BUTTON_WIDTH, command=callback_tool(self, self.callback_print_selected))
                cmds.separator(style='none', height=1)

                cmds.text(label=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kDeformerClusters' ])
                cmds.button(label=kPrintLabel, width=BUTTON_WIDTH, command=callback_tool(self, self.callback_print_deformer_clusters))
                cmds.separator(style='none', height=1)

            with LayoutManager( cmds.frameLayout(label=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kGraphOutputInspection' ], **section_layout(False)) ):
                    self.graphical_frame_layout()

            with LayoutManager( cmds.frameLayout(label=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kReuse' ], **section_layout(False)) ):
                self.reuseSrc = cmds.optionMenuGrp(label=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kReuseSrc' ], changeCommand=callback_tool(self, self.callback_reuseSrc))
                self.reuseDef = cmds.optionMenuGrp(label=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kReuseDef' ], changeCommand=callback_tool(self, self.callback_reuseDef))
                self.reuseSnk = cmds.optionMenuGrp(label=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kReuseSnk' ], changeCommand=callback_tool(self, self.callback_reuseSnk))

                for mode in kReuseModes:
                    cmds.menuItem(parent=_menu(self.reuseSrc), label=mode[0])
                    cmds.menuItem(parent=_menu(self.reuseDef), label=mode[0])
                    cmds.menuItem(parent=_menu(self.reuseSnk), label=mode[0])

            with LayoutManager( cmds.frameLayout(label=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kDebug' ], **section_layout(False)) ):
                self.minVerts = cmds.checkBoxGrp(annotation=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kAnnotationMinVerts' ],
                                                 label='',
                                                 label1=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kLabelMinVerts' ],
                                                 value1=True,
                                                 changeCommand=callback_tool(self, self.callback_minVerts))
 
    #----------------------------------------------------------------------
    def graphical_frame_layout(self):
        '''Add the frame that contains the graph visual inspection features'''

        with LayoutManager(cmds.rowColumnLayout(**self.three_column_layout)):

                # - - - - - - - - - - - - - - - - - - - -
                # Format type selection

                cmds.text(label=kOutputFormat, align='right', height=kWidgetHeight)
                self.widgets['graphicalFormats'] = cmds.optionMenu( height=kWidgetHeight
                                                 , changeCommand=callback_tool(self, self.callback_update_graphical_output_format)
                                                 )
                cmds.menuItem(parent=self.widgets['graphicalFormats'], label='PDF')
                cmds.menuItem(parent=self.widgets['graphicalFormats'], label='SVG')
                cmds.menuItem(parent=self.widgets['graphicalFormats'], label='PNG')
                cmds.menuItem(parent=self.widgets['graphicalFormats'], label='DOT')

                self.widgets['graphIncludePlugs'] = cmds.checkBox( annotation=kIncludePlugsAnnotation
                                                             , label=kIncludePlugsLabel
                                                             , value=True
                                                             )

                # - - - - - - - - - - - - - - - - - - - -
                # Output file name

                cmds.text( label=kOutputLocation, align='right', height=kWidgetHeight )
                scene_name = os.path.splitext(os.path.basename(cmds.file(q=True, sceneName=True)))[0]
                outfile_name = '{}.deformgraph.pdf'.format(scene_name)
                self.widgets['graphicalFile'] = cmds.textField( text=os.path.join( get_default_directory(), outfile_name ) )
                self.widgets['graphicalBrowse'] = cmds.symbolButton( image='navButtonBrowse.png'
                                                               , command=callback_tool(self, self.callback_choose_graphical_output_location)
                                                               )

                # - - - - - - - - - - - - - - - - - - - -
                # Show graph visualization

                cmds.text(label=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kShowGraphVisualization' ])
                cmds.button(label=kShowLabel, width=BUTTON_WIDTH, command=callback_tool(self, self.callback_visualize_deformations))
                cmds.separator(style='none', height=1)


    #----------------------------------------------------------------------
    @staticmethod
    @require_evaluation_graph
    def callback_print_chains(tool):
        assert tool
        cmds.deformerEvaluator(dch=True, act=True)

    #----------------------------------------------------------------------
    @staticmethod
    @require_evaluation_graph
    def callback_print_meshes(tool):
        assert tool
        cmds.deformerEvaluator(dch=True)

    #----------------------------------------------------------------------
    @staticmethod
    @require_evaluation_graph
    def callback_print_selected(tool):
        assert tool
        if not cmds.ls(selection=True):
            cmds.error(kNoSelectionError)
            return

        cmds.deformerEvaluator()

    #----------------------------------------------------------------------
    @staticmethod
    @require_evaluation_graph
    def callback_print_deformer_clusters(tool):
        assert tool
        print_deformer_clusters()

    #----------------------------------------------------------------------
    @staticmethod
    @require_evaluation_graph
    def callback_visualize_deformations(tool):
        assert tool
        deformationInfo = cmds.deformerEvaluator(query=True, dumpInfo=True)
        tool.visualize_deformation_graph(deformationInfo)

    #----------------------------------------------------------------------
    @staticmethod
    def callback_update_graphical_output_format(tool):
        '''Callback invoked when graphical inspection output format is changed'''
        graphical_format = cmds.optionMenu(tool.widgets['graphicalFormats'], query=True, select=True)
        (path,_) = os.path.splitext( cmds.textField( tool.widgets['graphicalFile'], query=True, text=True ) )
        new_file = path + ['.pdf','.svg','.png','.dot'][graphical_format-1]
        cmds.textField( tool.widgets['graphicalFile'], edit=True, text=new_file )

    #----------------------------------------------------------------------
    @staticmethod
    def callback_choose_graphical_output_location(tool):
        '''Callback invoked when the graphical inspection file browser button is selected'''
        graphical_format = cmds.optionMenu(tool.widgets['graphicalFormats'], query=True, select=True)
        current_file = cmds.textField( tool.widgets['graphicalFile'], query=True, text=True )
        file_filter = ['PDF file (*.pdf)','SVG file (*.svg)', 'PNG file (*.png)', 'DOT file (*.dot)'][graphical_format-1]
        result = cmds.fileDialog2(
                      caption=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kGraphicalInspectionChooseOutputFile' ]
                    , fileMode=0
                    , fileFilter=file_filter
                    , okCaption=maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kGraphicalInspectionChooseButton' ]
                    , startingDirectory=os.path.dirname(current_file)
                    )
        if result:
            assert len(result) == 1
            chosen_file = os.path.normpath(result[0])
            cmds.textField(tool.widgets['graphicalFile'], edit=True, text=chosen_file)

    #----------------------------------------------------------------------
    @staticmethod
    def callback_reuseSrc(tool):
        modeIndex = cmds.optionMenuGrp(tool.reuseSrc, query=True, select=True)
        mode = kReuseModes[modeIndex-1][1]
        cmds.deformerEvaluator(ru=(mode, '', ''))

    #----------------------------------------------------------------------
    @staticmethod
    def callback_reuseDef(tool):
        modeIndex = cmds.optionMenuGrp(tool.reuseDef, query=True, select=True)
        mode = kReuseModes[modeIndex-1][1]
        cmds.deformerEvaluator(ru=('', mode, ''))
    #----------------------------------------------------------------------
    @staticmethod
    def callback_reuseSnk(tool):
        modeIndex = cmds.optionMenuGrp(tool.reuseSnk, query=True, select=True)
        mode = kReuseModes[modeIndex-1][1]
        cmds.deformerEvaluator(ru=('', '', mode))

    #----------------------------------------------------------------------
    @staticmethod
    def callback_minVerts(tool):
        useMinVerts = cmds.checkBoxGrp(tool.minVerts, query=True, value1=True)
        cmds.deformerEvaluator(lmv=useMinVerts)

    #----------------------------------------------------------------------
    def update_ui(self):
        assert self
        gpuOn = cmds.optionVar(query='gpuOverride')
        plgOn = _isPluginLoaded('deformerEvaluator')
        cmds.frameLayout(self.layout_widget, edit=True, enable=gpuOn and plgOn)

        modes = cmds.deformerEvaluator(ru=True, q=True) if plgOn else ['never', 'never', 'never']
        cmds.optionMenuGrp(self.reuseSrc, edit=True, select=_getReuseModeIndex(modes[0]))
        cmds.optionMenuGrp(self.reuseDef, edit=True, select=_getReuseModeIndex(modes[1]))
        cmds.optionMenuGrp(self.reuseSnk, edit=True, select=_getReuseModeIndex(modes[2]))

        useMinVerts = cmds.deformerEvaluator(query=True, lmv=True) if plgOn else True
        cmds.checkBoxGrp(self.minVerts, edit=True, value1=useMinVerts)

    #----------------------------------------------------------------------
    def get_output_file_info(self):
        ''':return: 2-tuple containing
                    1. Name of the .dot file to generate
                    2. Name of the graphical(.svg/.png/...) file to generate (None if only DOT format was requested)
        '''
        graph_file = cmds.textField( self.widgets['graphicalFile'], query=True, text=True )
        if graph_file is None or len(graph_file) == 0:
            graph_file = os.path.join(get_default_directory(), u'DeformationGraph.dot')

        graphical_format = cmds.optionMenu(self.widgets['graphicalFormats'], query=True, select=True)

        # Ignore the extension and replace with .dot/.pdf/.svg as appropriate
        (file_name,_) = os.path.splitext( graph_file )
        out_dot = '{}.dot'.format( file_name )

        if graphical_format == 1:
            out_img = '{}.pdf'.format( file_name )
        elif graphical_format == 2:
            out_img = '{}.svg'.format( file_name )
        elif graphical_format == 3:
            out_img = '{}.png'.format( file_name )
        else:
            out_img = None

        return (out_dot, out_img)

#----------------------------------------------------------------------
    def visualize_deformation_graph(self, deformationInfo):
        '''Visualize JSON deformation graph info using graphviz'''
        (out_dot, out_img) = self.get_output_file_info()
        include_plugs = cmds.checkBox( self.widgets['graphIncludePlugs'], query=True, value=True )

        # Messages might contain non-JSON strings so we need to search through them
        jsonInfo = None
        for message in deformationInfo:
            try:
                jsonInfo = json.loads(message)
                break # just accept the first valid JSON we find
            except ValueError:
                continue

        try:
            if not jsonInfo:
                raise RuntimeError(maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kJSONParseFailed' ])

            dbg_deformations_to_dot(jsonInfo, include_plugs, out_dot)

            if out_img is not None:
                gv_mgr = self.get_graphviz_manager()
                if not gv_mgr.convert_dot_to(out_dot, out_img, False):
                    raise RuntimeError(maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kImageGenerationFailed' ].format(out_img))
                open_file( out_img )
            else:
                open_file( out_dot )
        except RuntimeError as ex:
            cmds.warning(maya.stringTable['y_maya_app_evaluationToolkit_EvaluationToolkitSectionGPUOverride.kPrintDeformationVizFailed' ].format(ex))
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
