import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
Helper class that manages the ghosting mode manipulation. Most of the ghosting information
is stored on individual nodes, making it difficult to deal with as an aggregate.
This class provides a simple manager that consolidates the operations on ghosts, both the
preferences and the node values, into a common location.

The object is set up to be called as a static class wherever a ghosting interface is needed:

    from maya.app.ghosting.GhostingManager import GhostingManager
    ghosting_mgr = GhostingManager()
    ghosting_mgr.SOME_PREFERENCE = SOME_VALUE
    ghosting_mgr.unghost_all()

Most of this interface goes through the ghosting() command to handle its operation.
'''
from builtins import object
import json
import maya.cmds as cmds
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceAllInRange
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceCustomFrames
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceEnabled
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceFarOpacity
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceGeometryFilter
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferencePostFrames
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferencePreFrames
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceGhostsStep
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceHierarchy
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceJointFilter
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceLocatorFilter
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceMode
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceNearOpacity
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferencePostColour
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferencePreColour
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferencePreset
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceUseDriver
from maya.debug.DebugTrace import DebugTrace

try: # Compatibility trick to check unicode and non-unicode string types
    basestring       # Python2 supports basestring
except NameError:
    basestring = str # Python3 supports str

__all__ = [ r'GhostingManager'
          , r'string_to_frames'
          ]

#----------------------------------------------------------------------
def string_to_frames(frame_string):
    '''
    :return: A list of integers, parsed from the string as a comma-separated list
    :param frame_string: Comma-separated list of frames to convert to a list of integers
    '''
    frame_list = []
    # Since the string should be a list of integers I'll make the json module parse it for me
    json_frame_string = r'{ "frames" : [' + frame_string + r'] }'
    try:
        json_frames = json.loads( json_frame_string )
        frame_list = list(set(json_frames[r'frames']))
        frame_list.sort()
    except Exception as ex:
        raise ValueError( maya.stringTable['y_maya_app_ghosting_GhostingManager.kFrameParseFailure' ].format( frame_string, ex ) )

    return frame_list

#======================================================================
class GhostingManager(DebugTrace):
    '''
    Class for managing the ghosting state in a 'with' format. Remembers
    and restores the ghosting mode and parameters.
    Use properties to make it easier to access the ghosting information.
    Certain properties are re-interpretations of other properties. By convention they have "_as_" in their name for easy identification
    '''
    # Constants used for identifying properties
    ALL_IN_RANGE    = r'all_in_range'
    CUSTOM_FRAMES   = r'custom_frames'
    ENABLED         = r'enabled'
    FAR_OPACITY     = r'far_opacity'
    GEOMETRY_FILTER = r'geometry_filter'
    POST_FRAMES     = r'post_frames'
    PRE_FRAMES      = r'pre_frames'
    GHOSTS_STEP     = r'ghosts_step'
    HIERARCHY       = r'hierarchy'
    JOINT_FILTER    = r'joint_filter'
    LOCATOR_FILTER  = r'locator_filter'
    MODE            = r'mode'
    NEAR_OPACITY    = r'near_opacity'
    POST_COLOUR     = r'post_colour'
    PRE_COLOUR      = r'pre_colour'
    PRESET          = r'preset'
    USE_DRIVER      = r'use_driver'

    # Mapping of the property names to the name of the ghosting command flag that controls it
    CMD_FLAGS  = { ALL_IN_RANGE    : r'allInRange'
                 , CUSTOM_FRAMES   : r'customFrames'
                 , ENABLED         : r'enabled'
                 , FAR_OPACITY     : r'farOpacity'
                 , GEOMETRY_FILTER : r'geometryFilter'
                 , POST_FRAMES     : r'postFrames'
                 , PRE_FRAMES      : r'preFrames'
                 , GHOSTS_STEP     : r'ghostsStep'
                 , HIERARCHY       : r'hierarchy'
                 , JOINT_FILTER    : r'jointFilter'
                 , LOCATOR_FILTER  : r'locatorFilter'
                 , MODE            : r'mode'
                 , NEAR_OPACITY    : r'nearOpacity'
                 , POST_COLOUR     : r'postColor'
                 , PRE_COLOUR      : r'preColor'
                 , PRESET          : r'preset'
                 , USE_DRIVER      : r'useDriver'
                 }

    DEFAULT_SETTINGS = { ALL_IN_RANGE    : GhostingPreferenceAllInRange().value_default
                       , CUSTOM_FRAMES   : string_to_frames( GhostingPreferenceCustomFrames().value_default )
                       , ENABLED         : GhostingPreferenceEnabled().value_default
                       , FAR_OPACITY     : GhostingPreferenceFarOpacity().value_default
                       , GEOMETRY_FILTER : GhostingPreferenceGeometryFilter().value_default
                       , POST_FRAMES     : GhostingPreferencePostFrames().value_default
                       , PRE_FRAMES      : GhostingPreferencePreFrames().value_default
                       , GHOSTS_STEP     : GhostingPreferenceGhostsStep().value_default
                       , HIERARCHY       : GhostingPreferenceHierarchy().value_default
                       , JOINT_FILTER    : GhostingPreferenceJointFilter().value_default
                       , LOCATOR_FILTER  : GhostingPreferenceLocatorFilter().value_default
                       , MODE            : GhostingPreferenceMode().value_default
                       , NEAR_OPACITY    : GhostingPreferenceNearOpacity().value_default
                       , POST_COLOUR     : GhostingPreferencePostColour().value_default
                       , PRE_COLOUR      : GhostingPreferencePreColour().value_default
                       , PRESET          : GhostingPreferencePreset().value_default
                       , USE_DRIVER      : GhostingPreferenceUseDriver().value_default
                       }

    #----------------------------------------------------------------------
    @staticmethod
    def properties():
        ''':return: List of the names of properties on this class'''
        return list( GhostingManager.DEFAULT_SETTINGS.keys() )

    #----------------------------------------------------------------------
    class GhostingManagerState(object):
        '''
        State information of the ghosting parameters. Used by GhostingManager to
        preserve and restore state.
        '''
        def __init__(self):
            '''Set all of the options to None to flag unread values'''
            for option in GhostingManager.properties():
                setattr( self, option, None )
            self.needs_restoring = False

        #----------------------------------------------------------------------
        def __str__(self):
            '''Nicer formatting for the ghosting state'''

            as_str = 'STATE :\n'

            for option in GhostingManager.properties():
                as_str += '    {} = {}\n'.format( option, getattr( self, option ) )

            return as_str

        #----------------------------------------
        def is_same_state(self, other_state):
            '''
            :return: True if this state is the same as the one passed in, else False
            :param other_state: GhostingManagerState to compare with
            '''
            for option in GhostingManager.properties():
                if getattr(self, option) != getattr( other_state, option ):
                    return False
            return True

        #----------------------------------------
        def save_state(self, manager):
            '''
            Save the current state values of the manager
            :param manager: PlaybackManager whose state is to be saved
            '''
            for option in GhostingManager.properties():
                setattr( self, option, getattr( manager, option ) )
                

        #----------------------------------------
        def restore_state(self, manager):
            '''
            Restore the manager's state from this state object.
            If nothing changed then the restore is skipped, for efficiency.
            :param manager: GhostingManager whose state is to be restored
            '''
            # Prevent multiple calls
            if not self.needs_restoring:
                
                return

            try:
                for option in GhostingManager.properties():
                    
                    setattr( manager, option, getattr(self, option) )

            except Exception as ex:
                cmds.warning( maya.stringTable['y_maya_app_ghosting_GhostingManager.kRestoreError' ].format(ex) )

            self.needs_restoring = False

    #----------------------------------------------------------------------
    def __init__(self):
        '''Defining both __enter__ and __init__ so that either one can be used'''
        super( GhostingManager, self ).__init__()
        self.debugging = r'ghosting' in (cmds.dbtrace( query=True ) or [])
        

        self.state = self.GhostingManagerState()
        self.state.save_state( self )

    #----------------------------------------------------------------------
    @staticmethod
    def default_settings():
        '''
        This method returns a dictionary of the default settings for all ghosting values.
        :return: A dictionary of all of the ghosting settings where the KEY is the name of the setting and VALUE is its default value
        '''
        return GhostingManager.DEFAULT_SETTINGS

    #----------------------------------------------------------------------
    def all_settings(self):
        '''
        This method in conjunction with restore_settings() allows you to bracket a section of code in which you
        can freely modify settings and know that they will be restored when you are done.
        This does *not* deal with settings on nodes, only the ghosting operation values.
        :return: A dictionary of all of the settings that can be saved and restored where the KEY is the name of the setting and VALUE is its current value
        '''
        settings = {}
        for setting in list(self.properties()):
            settings[setting] = getattr(self, setting)
        return settings

    #----------------------------------------------------------------------
    def __enter__(self):
        '''Beginning of scope object for "with" statement. __init__ does all intialization'''
        
        return self

    #----------------------------------------------------------------------
    def __exit__(self,exit_type,exit_value,traceback):
        '''Ensure the state is restored if this object goes out of scope'''
        
        
        
        from traceback import format_list, extract_tb
        
        self.restore()

    #----------------------------------------------------------------------
    def __str__(self):
        '''Nicer formatting for the ghosting state'''
        as_str = maya.stringTable['y_maya_app_ghosting_GhostingManager.kStateTitle' ]
        as_str += maya.stringTable['y_maya_app_ghosting_GhostingManager.kStateRestoreFlag' ].format( [maya.stringTable['y_maya_app_ghosting_GhostingManager.kNoRestore' ], maya.stringTable['y_maya_app_ghosting_GhostingManager.kNeedsRestore' ]][self.state.needs_restoring] )
        as_str += str( self.state )

        return as_str

    #----------------------------------------------------------------------
    def get_current_state(self):
        '''
        :return: GhostingManagerState object containing the current state of the playback options.
        Meant to be mainly used for testing.
        '''
        current_state = self.GhostingManagerState()
        current_state.save_state( self )
        return current_state

    #----------------------------------------------------------------------
    def restore_state(self, state_to_restore):
        '''
        Restore the ghosting values to the known values. Useful for resetting state between tests.
        '''
        
        state_to_restore.restore_state( self )

    #----------------------------------------------------------------------
    def restore(self):
        '''
        Restore the ghosting values to their original values (i.e. the ones
        present when this object was constructed).

        It's necessary to call this when using the "with GhostingManager()"
        syntax. It's only needed when you explicitly instantiate the manager.
        Then you have to call this if you want your original state restored,
        or wait for the unknown point in the future where this object is
        destroyed.
        '''
        
        self.restore_state( self.state )

    #----------------------------------------------------------------------
    def reset_all(self):
        '''Reset all of the preferences to their default values'''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerResetAll' ] )
        cmds.ghosting( resetAll=True )

    #----------------------------------------------------------------------
    def unghost_all(self):
        '''Turn off all ghosts in the scene individually'''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerUnghostAll' ] )
        cmds.ghosting( action=r'unghostAll' )

    #----------------------------------------------------------------------
    def unghost_selected(self, use_hierarchy=None):
        '''
        Turn off ghosts on selected objects in the scene individually
        :param use_hierarchy: None means use current hierarchy, True or False means set before using
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerUnghostSelected' ] )
        if use_hierarchy is None:
            cmds.ghosting( action=r'unghost' )
        else:
            cmds.ghosting( action=r'unghost', hierarchy=use_hierarchy )

    #----------------------------------------------------------------------
    def ghost_selected(self, use_hierarchy=None):
        '''
        Turn on ghosting for all selected objects in the scene
        :param use_hierarchy: None means use current hierarchy, True or False means set before using
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerGhostSelected' ] )
        if use_hierarchy is None:
            cmds.ghosting( action=r'ghost' )
        else:
            cmds.ghosting( action=r'ghost', hierarchy=use_hierarchy )

    #----------------------------------------------------------------------
    def ghost_objects(self, objects_to_ghost):
        '''
        Turn on ghosting for all specified objects in the scene
        :param objects_to_ghost: List of DAG objects for which ghosting is to be enabled
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerGhostObjects' ] )
        cmds.ghosting( objects_to_ghost, action=r'ghost' )

    #----------------------------------------------------------------------
    def ghost_frames(self, node):
        '''
        :return: The list of frames on the given object for which ghosts currently exist
        :param node: Object whose ghost frames are to be returned
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerGhostFrames' ] )
        return cmds.ghosting( node, query=True, frames=True )

    #----------------------------------------------------------------------
    @staticmethod
    def ghosted_objects():
        '''Return the list of all currently ghosted objects'''
        return cmds.ghosting( query=True, ghostedObjects=True ) or []

    #----------------------------------------------------------------------
    def apply_all_in_range(self, new_all_in_range_value, apply_to_all_ghosts=True):
        '''
        Set the default all-in-range value and apply it to all currently active ghosts.
        :param new_all_in_range_value: New value to be applied to the current ghosts
        :param apply_to_all_ghosts: If True then change the value for all current ghosts, otherwise only the selected ones
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerApplyAllInRange' ].format( new_all_in_range_value ) )
        apply_args = { r'allGhostedObjects' : True } if apply_to_all_ghosts else {}
        cmds.ghosting( edit=True, allInRange=new_all_in_range_value, **apply_args )
        cmds.refresh( force=True ) # Update the ghost appearances

    #----------------------------------------------------------------------
    def apply_custom_frames(self, new_custom_frames, apply_to_all_ghosts=True):
        '''
        Set the default custom frames and apply it to all currently active ghosts.
        :param new_custom_frames: List of frame numbers to be applied to the current ghosts
        :param apply_to_all_ghosts: If True then change the value for all current ghosts, otherwise only the selected ones
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerApplyCustomFrames' ].format( new_custom_frames ) )
        if isinstance(new_custom_frames, basestring):
            custom_frame_list = string_to_frames( new_custom_frames )
        elif isinstance(new_custom_frames, int):
            custom_frame_list = [new_custom_frames]
        elif isinstance(new_custom_frames, list):
            custom_frame_list = new_custom_frames
        else:
            raise ValueError( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerBadCustomFrames' ].format(type(new_custom_frames)) )
        custom_frame_list = custom_frame_list or [] # Avoid the None case
        assert isinstance(custom_frame_list, list)

        # The command cannot handle an empty list so use the special signal value to indicate the list should be emptied
        if not custom_frame_list:
            custom_frame_list = [GhostingPreferenceCustomFrames.SIGNAL_DELETE]

        apply_args = { r'allGhostedObjects' : True } if apply_to_all_ghosts else {}
        cmds.ghosting( edit=True, customFrames=custom_frame_list, **apply_args )
        cmds.refresh( force=True ) # Update the ghost appearances

    #----------------------------------------------------------------------
    def apply_far_opacity(self, new_far_opacity_value, apply_to_all_ghosts=True):
        '''
        Set the default far opacity value and apply it to all currently active ghosts.
        :param new_far_opacity_value: New value to be applied to the current ghosts
        :param apply_to_all_ghosts: If True then change the value for all current ghosts, otherwise only the selected ones
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerApplyFarOpacity' ].format( new_far_opacity_value ) )
        apply_args = { r'allGhostedObjects' : True } if apply_to_all_ghosts else {}
        cmds.ghosting( edit=True, farOpacity=new_far_opacity_value, **apply_args )
        cmds.refresh( force=True ) # Update the ghost appearances

    #----------------------------------------------------------------------
    def apply_post_frames(self, new_post_frames_value, apply_to_all_ghosts=True):
        '''
        Set the default post frames value and apply it to all currently active ghosts.
        :param new_post_frames_value: New value to be applied to the current ghosts
        :param apply_to_all_ghosts: If True then change the value for all current ghosts, otherwise only the selected ones
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerApplyPostFrames' ].format( new_post_frames_value ) )
        apply_args = { r'allGhostedObjects' : True } if apply_to_all_ghosts else {}
        cmds.ghosting( edit=True, postFrames=new_post_frames_value, **apply_args )
        cmds.refresh( force=True ) # Update the ghost appearances

    #----------------------------------------------------------------------
    def apply_pre_frames(self, new_pre_frames_value, apply_to_all_ghosts=True):
        '''
        Set the default pre frames value and apply it to all currently active ghosts.
        :param new_pre_frames_value: New value to be applied to the current ghosts
        :param apply_to_all_ghosts: If True then change the value for all current ghosts, otherwise only the selected ones
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerApplyPreFrames' ].format( new_pre_frames_value ) )
        apply_args = { r'allGhostedObjects' : True } if apply_to_all_ghosts else {}
        cmds.ghosting( edit=True, preFrames=new_pre_frames_value, **apply_args )
        cmds.refresh( force=True ) # Update the ghost appearances

    #----------------------------------------------------------------------
    def apply_ghosts_step(self, new_ghosts_step_value, apply_to_all_ghosts=True):
        '''
        Set the default ghosts step value and apply it to all currently active ghosts.
        :param new_ghosts_step_value: New value to be applied to the current ghosts
        :param apply_to_all_ghosts: If True then change the value for all current ghosts, otherwise only the selected ones
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerApplyGhostsStep' ].format( new_ghosts_step_value ) )
        apply_args = { r'allGhostedObjects' : True } if apply_to_all_ghosts else {}
        cmds.ghosting( edit=True, ghostsStep=new_ghosts_step_value, **apply_args )
        cmds.refresh( force=True ) # Update the ghost appearances

    #----------------------------------------------------------------------
    def apply_mode(self, new_mode, apply_to_all_ghosts=True):
        '''
        Set the default ghosting mode and apply it to all currently active ghosts.
        :param new_mode: New ghosting mode to be applied to the current ghosts
        :param apply_to_all_ghosts: If True then change the value for all current ghosts, otherwise only the selected ones
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerApplyMode' ].format( new_mode ) )
        apply_args = { r'allGhostedObjects' : True } if apply_to_all_ghosts else {}
        cmds.ghosting( edit=True, mode=new_mode, **apply_args )
        cmds.refresh( force=True ) # Update the ghost appearances

    #----------------------------------------------------------------------
    def apply_near_opacity(self, new_near_opacity_value, apply_to_all_ghosts=True):
        '''
        Set the default near opacity value and apply it to all currently active ghosts.
        :param new_near_opacity_value: New value to be applied to the current ghosts
        :param apply_to_all_ghosts: If True then change the value for all current ghosts, otherwise only the selected ones
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerApplyNearOpacity' ].format( new_near_opacity_value ) )
        apply_args = { r'allGhostedObjects' : True } if apply_to_all_ghosts else {}
        cmds.ghosting( edit=True, nearOpacity=new_near_opacity_value, **apply_args )
        cmds.refresh( force=True ) # Update the ghost appearances

    #----------------------------------------------------------------------
    def apply_post_colour(self, new_post_colour_value, apply_to_all_ghosts=True):
        '''
        Set the default post-colour value and apply it to all currently active ghosts.
        :param new_post_colour_value: New value to be applied to the current ghosts
        :param apply_to_all_ghosts: If True then change the value for all current ghosts, otherwise only the selected ones
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerApplyPostColour' ].format( new_post_colour_value ) )
        apply_args = { r'allGhostedObjects' : True } if apply_to_all_ghosts else {}
        cmds.ghosting( edit=True, postColor=new_post_colour_value, **apply_args )
        cmds.refresh( force=True ) # Update the ghost appearances

    #----------------------------------------------------------------------
    def apply_pre_colour(self, new_pre_colour_value, apply_to_all_ghosts=True):
        '''
        Set the default pre-colour value and apply it to all currently active ghosts.
        :param new_pre_colour_value: New value to be applied to the current ghosts
        :param apply_to_all_ghosts: If True then change the value for all current ghosts, otherwise only the selected ones
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerApplyPreColour' ].format( new_pre_colour_value ) )
        apply_args = { r'allGhostedObjects' : True } if apply_to_all_ghosts else {}
        cmds.ghosting( edit=True, preColor=new_pre_colour_value, **apply_args )
        cmds.refresh( force=True ) # Update the ghost appearances

    #----------------------------------------------------------------------
    def apply_preset(self, new_preset_value, apply_to_all_ghosts=True):
        '''
        Set the default preset value and apply it to all currently active ghosts.
        :param new_preset_value: New value to be applied to the current ghosts
        :param apply_to_all_ghosts: If True then change the value for all current ghosts, otherwise only the selected ones
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerApplyPreset' ].format( new_preset_value ) )
        apply_args = { r'allGhostedObjects' : True } if apply_to_all_ghosts else {}
        cmds.ghosting( edit=True, preset=new_preset_value, **apply_args )
        cmds.refresh( force=True ) # Update the ghost appearances

    #----------------------------------------------------------------------
    def apply_use_driver(self, new_use_driver_value, apply_to_all_ghosts=True):
        '''
        Set the default use-driver value and apply it to all currently active ghosts.
        :param new_use_driver_value: New value to be applied to the current ghosts
        :param apply_to_all_ghosts: If True then change the value for all current ghosts, otherwise only the selected ones
        '''
        self.dbg( maya.stringTable['y_maya_app_ghosting_GhostingManager.kGhostingManagerApplyUseDriver' ].format( new_use_driver_value ) )
        apply_args = { r'allGhostedObjects' : True } if apply_to_all_ghosts else {}
        cmds.ghosting( edit=True, useDriver=new_use_driver_value, **apply_args )
        cmds.refresh( force=True ) # Update the ghost appearances

    #----------------------------------------------------------------------
    # Implement preference values as properties for simplicity
    #----------------------------------------------------------------------
    @property
    def all_in_range(self):
        '''Return ghosting's enabled state'''
        return cmds.ghosting( query=True, allInRange=True )

    @all_in_range.setter
    def all_in_range(self, new_value):
        '''
        Change the all-in-range value for ghosting with keyframes. The caller is responsible for
        triggering a refresh if needed to update the ghost drawings.
        :param new_value:
        '''
        # pylint: disable=no-self-use
        assert isinstance(new_value, bool) # The command engine says "expected int"; this is less misleading

        cmds.ghosting( allInRange=new_value )

    #----------------------------------------------------------------------
    @property
    def custom_frames(self):
        '''Return the list of default custom frames'''
        return cmds.ghosting( query=True, customFrames=True ) or []

    @custom_frames.setter
    def custom_frames(self, new_value):
        '''
        Change the default list of custom frames. The caller is responsible for
        triggering a refresh if needed to update the ghost drawings.
        :param new_value: new value for the custom frames
        '''
        # pylint: disable=no-self-use
        if isinstance(new_value, basestring):
            new_value = string_to_frames( new_value )
        else:
            new_value = list( set(new_value) ) # Ensure uniqueness
        assert isinstance(new_value, list)

        # The command cannot handle an empty list so use the special signal value to indicate the list should be emptied
        if not new_value:
            new_value = [GhostingPreferenceCustomFrames.SIGNAL_DELETE]

        cmds.ghosting( customFrames=new_value )

    @property
    def custom_frames_as_string(self):
        ''':return: A comma-separated string representing the custom frames in the list, made unique and sorted first'''
        self.custom_frames = list(set(self.custom_frames))
        self.custom_frames.sort()
        return r','.join([str(frame) for frame in self.custom_frames])

    @property
    def custom_frames_as_command_argument(self):
        '''
        :return: A representation of the custom frame list that can be passed through to the ghosting command.
        Due to a quirk in the command engine we cannot pass an empty list to it so the command accepts a special value for that
        '''
        frame_args = self.custom_frames
        if not frame_args:
            frame_args = string_to_frames( '' )
        return frame_args

    #----------------------------------------------------------------------
    @property
    def enabled(self):
        '''Return ghosting's enabled state'''
        return cmds.ghosting( query=True, enable=True )

    @enabled.setter
    def enabled(self, new_value):
        '''
        Change the enabled state of ghosting visibility. The caller is responsible for
        triggering a refresh if needed to update the ghost drawings.
        :param new_value: new value for enabled, True or False
        '''
        # pylint: disable=no-self-use
        assert isinstance(new_value, bool) # The command engine says "expected int"; this is less misleading

        cmds.ghosting( enable=new_value )

    #----------------------------------------------------------------------
    @property
    def far_opacity(self):
        '''Return the opacity value of ghosts farthest from the current time'''
        return cmds.ghosting( query=True, farOpacity=True )

    @far_opacity.setter
    def far_opacity(self, new_value):
        '''
        Change the opacity value of ghosts farthest from the current time. The caller is responsible for
        triggering a refresh if needed to update the ghost drawings.
        :param new_value: new value for far opacity
        '''
        # pylint: disable=no-self-use

        cmds.ghosting( farOpacity=new_value )

    #----------------------------------------------------------------------
    @property
    def geometry_filter(self):
        '''Return ghosting's default geometry filter value'''
        return cmds.ghosting( query=True, geometryFilter=True )

    @geometry_filter.setter
    def geometry_filter(self, new_value):
        '''
        Change the the default geometry filter value for ghosting operations.
        :param new_value: new value for the default geometry filter value, True or False
        '''
        # pylint: disable=no-self-use
        assert isinstance(new_value, bool) # The command engine says "expected int"; this is less misleading

        cmds.ghosting( geometryFilter=new_value )

    #----------------------------------------------------------------------
    @property
    def post_frames(self):
        '''Return the current default value for number of ghosted frames after the current time'''
        return cmds.ghosting( query=True, postFrames=True )

    @post_frames.setter
    def post_frames(self, new_value):
        '''
        Change the the default value for ghosted frames after the current time.
        This doesn't modify any current existing ghosts, it only sets the value to use in future operations when unspecified.
        :param new_value: new value for the default number of post frames. Must be >=0
        '''
        # pylint: disable=no-self-use
        assert isinstance(new_value, int) and new_value >= 0

        cmds.ghosting( postFrames=new_value )

    #----------------------------------------------------------------------
    @property
    def pre_frames(self):
        '''Return the current default value for number of ghosted frames before the current time'''
        return cmds.ghosting( query=True, preFrames=True )

    @pre_frames.setter
    def pre_frames(self, new_value):
        '''
        Change the the default value for ghosted frames before the current time.
        This doesn't modify any current existing ghosts, it only sets the value to use in future operations when unspecified.
        :param new_value: new value for the default number of pre frames. Must be >=0
        '''
        # pylint: disable=no-self-use
        assert isinstance(new_value, int) and new_value >= 0

        cmds.ghosting( preFrames=new_value )

    #----------------------------------------------------------------------
    @property
    def ghosts_step(self):
        '''Return the current default value for the number of steps between ghosts'''
        return cmds.ghosting( query=True, ghostsStep=True )

    @ghosts_step.setter
    def ghosts_step(self, new_value):
        '''
        Change the the default value for the number of steps between ghosts.
        This doesn't modify any current existing ghosts, it only sets the value to use in future operations when unspecified.
        :param new_value: new value for the default steps. Must be >0
        '''
        # pylint: disable=no-self-use
        assert isinstance(new_value, int) and new_value > 0

        cmds.ghosting( ghostsStep=new_value )

    #----------------------------------------------------------------------
    @property
    def hierarchy(self):
        '''Return ghosting's default hierarchy value'''
        return cmds.ghosting( query=True, hierarchy=True )

    @hierarchy.setter
    def hierarchy(self, new_value):
        '''
        Change the the default hierarchy value for ghosting operations.
        :param new_value: new value for the default hierarchy value, True or False
        '''
        # pylint: disable=no-self-use
        assert isinstance(new_value, bool) # The command engine says "expected int"; this is less misleading

        cmds.ghosting( hierarchy=new_value )

    #----------------------------------------------------------------------
    @property
    def joint_filter(self):
        '''Return ghosting's default joint filter value'''
        return cmds.ghosting( query=True, jointFilter=True )

    @joint_filter.setter
    def joint_filter(self, new_value):
        '''
        Change the the default joint filter value for ghosting operations.
        :param new_value: new value for the default joint filter value, True or False
        '''
        # pylint: disable=no-self-use
        assert isinstance(new_value, bool) # The command engine says "expected int"; this is less misleading

        cmds.ghosting( jointFilter=new_value )

    #----------------------------------------------------------------------
    @property
    def locator_filter(self):
        '''Return ghosting's default locator filter value'''
        return cmds.ghosting( query=True, locatorFilter=True )

    @locator_filter.setter
    def locator_filter(self, new_value):
        '''
        Change the the default locator filter value for ghosting operations.
        :param new_value: new value for the default locator filter value, True or False
        '''
        # pylint: disable=no-self-use
        assert isinstance(new_value, bool) # The command engine says "expected int"; this is less misleading

        cmds.ghosting( locatorFilter=new_value )

    #----------------------------------------------------------------------
    @property
    def mode(self):
        '''Return the current default ghosting mode'''
        return cmds.ghosting( query=True, mode=True )

    @mode.setter
    def mode(self, new_value):
        '''
        Change the default ghosting mode.
        :param new_value: new value for the ghosting mode, one of the ghosting_optionvar_states.py#GHOSTING_MODES constants
        '''
        # pylint: disable=no-self-use
        cmds.ghosting( mode=new_value )

    #----------------------------------------------------------------------
    @property
    def near_opacity(self):
        '''Return the opacity value of ghosts nearest to the current time'''
        return cmds.ghosting( query=True, nearOpacity=True )

    @near_opacity.setter
    def near_opacity(self, new_value):
        '''
        Change the opacity value of ghosts nearest to the current time. The caller is responsible for
        triggering a refresh if needed to update the ghost drawings.
        :param new_value: new value for near opacity
        '''
        # pylint: disable=no-self-use
        cmds.ghosting( nearOpacity=new_value )

    #----------------------------------------------------------------------
    @property
    def pre_colour(self):
        '''Return the default colour value of ghosts before the current time'''
        return cmds.ghosting( query=True, preColor=True )

    @pre_colour.setter
    def pre_colour(self, new_value):
        '''
        Change the default colour value of ghosts before the current time. The caller is responsible for
        triggering a refresh if needed to update the ghost drawings.
        :param new_value: new value for pre-colour
        '''
        # pylint: disable=no-self-use
        cmds.ghosting( preColor=new_value )

    #----------------------------------------------------------------------
    @property
    def post_colour(self):
        '''Return the default colour value of ghosts before the current time'''
        return cmds.ghosting( query=True, postColor=True )

    @post_colour.setter
    def post_colour(self, new_value):
        '''
        Change the default colour value of ghosts before the current time. The caller is responsible for
        triggering a refresh if needed to update the ghost drawings.
        :param new_value: new value for post-colour
        '''
        # pylint: disable=no-self-use
        cmds.ghosting( postColor=new_value )

    #----------------------------------------------------------------------
    @property
    def preset(self):
        ''':return: the default value of the preset setting'''
        return cmds.ghosting( query=True, preset=True )

    @preset.setter
    def preset(self, new_value):
        '''
        Change the default value of the preset setting.
        :param new_value: new value of the preset setting - must be in ghosting_optionvar_states.py#GHOSTING_PRESETS
        '''
        # pylint: disable=no-self-use
        cmds.ghosting( preset=new_value )

    #----------------------------------------------------------------------
    @property
    def use_driver(self):
        '''Return the default use driver value of ghosts'''
        return cmds.ghosting( query=True, useDriver=True )

    @use_driver.setter
    def use_driver(self, new_value):
        '''
        Change the default use driver of ghosts. The caller is responsible for
        triggering a refresh if needed to update the ghost drawings.
        :param new_value: new value for useDriver
        '''
        # pylint: disable=no-self-use
        assert isinstance(new_value, bool) # The command engine says "expected int"; this is less misleading
        cmds.ghosting( useDriver=new_value )
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
