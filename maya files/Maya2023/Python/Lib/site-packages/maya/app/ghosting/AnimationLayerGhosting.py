import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
A collection of helper method to ghost/unghost animation layers.
Check its usage in layerEditor.mel
'''

import maya.cmds as cmds
import maya.mel as mel

__all__ = [ r'ghost_animation_layer',
            r'unghost_animation_layer',
            r'refresh_animation_layer_ghost_color'
          ]

def ghost_objects(dag_objects):
    # type: (Set[str]) -> None
    '''
    Apply animation layer ghost settings and enable ghosting on dag_objects.
    '''
    if dag_objects == None:
        return

    ghosted = cmds.ghosting(dag_objects, action=r'ghost')

    if ghosted != None:
        dag_objects = set(dag_objects).union(set(ghosted))

    for dag in dag_objects:
        cmds.setAttr(r'{0}.ghostingMode'.format(dag), 0) #kGhostBeforeAfter
        cmds.setAttr(r'{0}.ghostPreFrames'.format(dag), 0)
        cmds.setAttr(r'{0}.ghostPostFrames'.format(dag), 0)

def unghost_objects(dag_objects):
    # type: (Set[str]) -> None
    '''
    Disable ghosting on dag_objects.
    '''
    cmds.ghosting(dag_objects, action=r'unghost')

def layer_ghosted(layer):
    # type: (str) -> bool
    '''
    Get the value of layer.ghost
    '''
    return cmds.getAttr(r"{0}.ghost".format(layer))

def set_layer_ghosted(layer, ghosted):
    # type: (str, bool) -> None
    '''
    Set the value of layer.ghost
    '''
    cmds.setAttr(r"{0}.ghost".format(layer), ghosted)

def root_layer():
    # type: () -> str
    '''
    Return the root animation layer.
    '''
    return cmds.animLayer(query=True, root=True)

def nodes_in_layer(layer):
    # type: (str) -> Set[str]
    '''
    Return a set of nodes that being keyed on the given layer.
    '''
    plugs = cmds.animLayer(layer, query=True, attribute=True)
    if plugs == None:
        return set()
    nodes = [plug.split(r'.')[0] for plug in plugs]
    nodes = set(nodes)
    return nodes

def child_layers(layer):
    # type: (str) -> List[str]
    '''
    Return the child layers of the given layer.
    '''
    return cmds.animLayer(layer, query=True, children=True)

def descendant_layers(layer):
    # type: (str) -> Generator[str]
    '''
    Return a generator of animation layer that are descendant to the given layer.
    '''
    children = child_layers(layer)
    if children != None:
        for child in children:
            yield child
            for descendant in descendant_layers(child):
                yield descendant

def ghosted_layers():
    # type: () -> Generator[str]
    '''
    Return all the animation layers that were ghosted.
    '''
    root = root_layer()
    for layer in descendant_layers(root):
        if layer_ghosted(layer) :
            yield layer

def nodes_in_layers(layers):
    # type: (str) -> Set[str]
    '''
    Return a set of nodes in the given list of layers.
    '''
    nodes = set()
    if layers != None:
        for layer in layers:
            nodes |= nodes_in_layer(layer)
    return nodes

def affected_nodes(layer):
    # type: (str) -> Set[str]
    '''
    Return a set of nodes that should be ghost/unghost when toggle the ghosting the given animation layer.
    Usually return the set of nodes keyed in the given layer.
    With the special case of the root animation layer.
    Where all the nodes affected by animation layers will be included.
    '''
    # Maybe we should show all the nodes 'above' this animation layer?
    nodes = nodes_in_layer(layer)
    # If this animation layer is empty (e.g. BaseAnimation layer)
    # Try ghost all the nodes in descendant layers to show the difference
    if nodes == None or len(nodes) == 0:
        nodes = nodes_in_layers(descendant_layers(layer))
    return nodes

def ghost_animation_layer(layer, check_selection=False):
    # type: (str) -> None
    '''
    Ghost the given animation layer and the nodes keyed on it.
    This call will change ghosting settings on the affected nodes.
    '''
    set_layer_ghosted(layer, True)
    nodes = affected_nodes(layer)

    if len(nodes) == 0:
        return

    if check_selection:
        selected = set(cmds.ls(sl=True))
        if len(selected) > 0:
            nodes &= selected
            if len(nodes) == 0:
                message = maya.stringTable['y_maya_app_ghosting_AnimationLayerGhosting.kGhostNoSelectionInLayer']
                message = r"{0} '{1}'".format(message, layer)
                mel.eval(r'warning("{0}")'.format(message))
                return

    # print("nodes ghosted : "+str(nodes))
    ghost_objects(nodes)

def unghost_animation_layer(layer):
    # type: (str) -> None
    '''
    Unghost the given animation layer and nodes whos last ghost is the given layer.
    '''
    set_layer_ghosted(layer, False)

    # If root layer is ghosted, objects in this layer must be ghosted there as well
    # Do not ghost them
    if layer_ghosted(root_layer()):
        return

    nodes = affected_nodes(layer)
    # Do not unghost nodes that are still ghosted by another animation layer
    nodes -= nodes_in_layers(ghosted_layers())

    if len(nodes) == 0:
        return

    # print("nodes unghosted : "+str(nodes))
    unghost_objects(nodes)

def refresh_animation_layer_ghost_color(layer):
    # type: (str) -> None
    '''
    Refresh the ghost color in viewport.
    '''
    nodes = affected_nodes(layer)

    if len(nodes) == 0:
        return

    # Re-enabling ghosts is the only way to 
    # force the viewport to update animation layer ghost color
    unghost_objects(nodes)
    ghost_objects(nodes)
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
