import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
Collection of classes embodying the implementation of ghosting preferences.

The main interface is the GhostingPreferences object, a singleton object that manages
all of the preferences, as well as the synchronization of those preferences between
the optionVars that hold them and the commands that implement them.

All of the preferences are driven by the helper classes derived from OptionVar.

The name of the optionVars each controls is their static ov_id member.
'''
from functools import partial
import maya.cmds as cmds
from maya.common.utils import Singleton
from maya.app.prefs.OptionVarManager import OptionVarManager
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceAllInRange
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceCustomFrames
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceEnabled
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceFarOpacity
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceGeometryFilter
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferencePreFrames
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferencePostFrames
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceGhostsStep
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceHierarchy
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceJointFilter
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceLocatorFilter
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceMode
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceNearOpacity
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferencePostColour
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferencePreColour
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferencePreset
from maya.app.ghosting.ghosting_optionvar_states import GhostingPreferenceUseDriver
from future.utils import with_metaclass

__all__ = [ r'initialize_ghosting_preferences'
          , r'GhostingPreferences'
          ]

#======================================================================
class GhostingPreferences(with_metaclass(Singleton, object)):
    '''
    Class that initializes and aggregates all of the ghosting preferences.

    :member option_vars:     Dictionary of optionVars that implement ghosting preferences
                             KEY=optionVar name, VALUE=OptionVar object controlling it
    :member pref_change_job: scriptJob ID for the ghostingPreferencesChanged event
    '''

    #----------------------------------------------------------------------
    def add_preference(self, option_var):
        ''' Add a new OptionVar to be managed by the ghosting class '''
        OptionVarManager.manage( option_var )
        option_var.set_in_category( r'ghosting', True )
        self.option_vars[option_var.name] = option_var

    #----------------------------------------------------------------------
    def add_non_preference(self, option_var):
        ''' Add a new OptionVar that isn't affected by the preference operations '''
        OptionVarManager.manage( option_var )
        self.option_vars[option_var.name] = option_var

    #----------------------------------------------------------------------
    @staticmethod
    def callback_state_changed(tool):
        '''
        Callback invoked when any of the state information on the ghosting evaluator affecting
        the preferences has changed. Only a generic event is triggered so all of the optionVars
        need to be updated even though only one is changing.
        '''
        for option_var in list(tool.option_vars.values()):
            # The return value indicates if the preference changed values - if not, there
            # is no need to update the clients.
            if option_var.do_read_preference_from_state():
                option_var.update_clients()

    #----------------------------------------------------------------------
    def monitor_state_changes(self, enable_listening):
        '''
        Set the state of monitoring for preference changes. Preference changes can
        only be monitored when the plug-in is loaded so confirm it's possible when
        enabling.

        :param enable_listening: True if preference changes should be monitored.
        '''
        if enable_listening:
            script_job_events = cmds.scriptJob( listEvents=True ) or []
            if r'ghostingPreferencesChanged' in script_job_events:
                self.pref_change_job = cmds.scriptJob(event=(r'ghostingPreferencesChanged', partial(self.callback_state_changed, tool=self)))
        elif self.pref_change_job is not None:
            cmds.scriptJob( kill=self.pref_change_job )
            self.pref_change_job = None

    #----------------------------------------------------------------------
    def __init__(self):
        ''' Create all of the OptionVar objects used to manage the preferences.  '''
        self.option_vars = {}
        self.pref_change_job = None
        self.monitor_load = False
        self.monitor_unload = False
        self.plugin_clients = {}

        # Add each of the preferences to the internal list
        try:
            self.add_preference( GhostingPreferenceAllInRange() )
            self.add_preference( GhostingPreferenceCustomFrames() )
            self.add_preference( GhostingPreferenceEnabled() )
            self.add_preference( GhostingPreferenceFarOpacity() )
            self.add_preference( GhostingPreferenceGeometryFilter() )
            self.add_preference( GhostingPreferenceJointFilter() )
            self.add_preference( GhostingPreferenceLocatorFilter() )
            self.add_preference( GhostingPreferencePreFrames() )
            self.add_preference( GhostingPreferencePostFrames() )
            self.add_preference( GhostingPreferenceGhostsStep() )
            self.add_preference( GhostingPreferenceHierarchy() )
            self.add_preference( GhostingPreferenceMode() )
            self.add_preference( GhostingPreferenceNearOpacity() )
            self.add_preference( GhostingPreferencePostColour() )
            self.add_preference( GhostingPreferencePreColour() )
            self.add_preference( GhostingPreferencePreset() )
            self.add_preference( GhostingPreferenceUseDriver() )
        except Exception as ex:
            cmds.error( maya.stringTable['y_maya_app_ghosting_ghosting_preferences.kPrefErr' ].format( ex ) )

#======================================================================
def initialize_ghosting_preferences():
    '''
    Initialize all of the optionVar monitoring used by the ghosting preferences.
    This doesn't set up or read any optionVar values, it only creates the
    OptionVar classes required to manage the preferences.

    This function must be called on startup so that the management is in place
    before any commands or UI try to access them.
    '''

    # If there was already an existing singleton then no initialization is needed
    if Singleton.singleton_exists( GhostingPreferences ):
        return

    # Just creating an object will create the singleton that persists independently
    # from this code. It doesn't have to be referenced here.
    GhostingPreferences()

    # Ensure that the Maya state starts in agreement with the optionVar values
    OptionVarManager.set_state_from_preferences()
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
