import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
This file contains OptionVar implementations for all of the ghosting preferences that do not
have separate Maya state information. (i.e. those whose value is solely contained within
an optionVar value.)
'''
from maya.common.utils import Singleton
from maya.app.prefs.OptionVar import OptionVar, OPTION_VAR_TYPE_BOOL, OPTION_VAR_TYPE_STRING, OPTION_VAR_TYPE_INT, OPTION_VAR_TYPE_FLOAT, OPTION_VAR_TYPE_RGB
from future.utils import with_metaclass

__all__ = [ r'GhostingPreferenceAllInRange'
          , r'GhostingPreferenceCustomFrames'
          , r'GhostingPreferenceEnabled'
          , r'GhostingPreferenceFarOpacity'
          , r'GhostingPreferenceGeometryFilter'
          , r'GhostingPreferencePostFrames'
          , r'GhostingPreferencePreFrames'
          , r'GhostingPreferenceGhostsStep'
          , r'GhostingPreferenceHierarchy'
          , r'GhostingPreferenceJointFilter'
          , r'GhostingPreferenceLocatorFilter'
          , r'GhostingPreferenceMode'
          , r'GhostingPreferenceNearOpacity'
          , r'GhostingPreferencePostColour'
          , r'GhostingPreferencePreColour'
          , r'GhostingPreferencePreset'
          , r'GhostingPreferenceUseDriver'
          , r'GHOSTING_MODE_PRE_AND_POST_FRAMES'
          , r'GHOSTING_MODE_PRE_FRAMES'
          , r'GHOSTING_MODE_POST_FRAMES'
          , r'GHOSTING_MODE_CUSTOM_FRAMES'
          , r'GHOSTING_MODE_KEYFRAMES'
          , r'GHOSTING_MODE_ALL_KEYFRAMES'
          , r'GHOSTING_MODES'
          , r'GHOSTING_MODE_ATTRIBUTE_VALUES'
          , r'GHOSTING_PRESET_1S'
          , r'GHOSTING_PRESET_2S'
          , r'GHOSTING_PRESET_4S'
          , r'GHOSTING_PRESET_5S'
          , r'GHOSTING_PRESET_10S'
          , r'GHOSTING_PRESET_CUSTOM'
          , r'GHOSTING_PRESETS'
          , r'INDEX_ENUM_ID'
          , r'INDEX_ENUM_NAME'
          , r'INDEX_ENUM_INFO'
          , r'INDEX_ENUM_DATA'
          ]

# These mode names should match the ones found in Tghosting.h
GHOSTING_MODE_PRE_AND_POST_FRAMES   = r'preAndPost'
GHOSTING_MODE_PRE_FRAMES            = r'pre'
GHOSTING_MODE_POST_FRAMES           = r'post'
GHOSTING_MODE_CUSTOM_FRAMES         = r'custom'
GHOSTING_MODE_KEYFRAMES             = r'keyframes'
GHOSTING_MODE_ALL_KEYFRAMES         = r'allKeyframes' # Not a real mode; represents the mode 'keyframes' with 'allInRange' set to True for attribute mapping
GHOSTING_MODES = [ GHOSTING_MODE_PRE_AND_POST_FRAMES
                 , GHOSTING_MODE_PRE_FRAMES
                 , GHOSTING_MODE_POST_FRAMES
                 , GHOSTING_MODE_CUSTOM_FRAMES
                 , GHOSTING_MODE_KEYFRAMES
]
# Mapping of mode names to DAG node "aGhostingMode" attribute values
GHOSTING_MODE_ATTRIBUTE_VALUES = { GHOSTING_MODE_PRE_AND_POST_FRAMES    : 0
                                 , GHOSTING_MODE_PRE_FRAMES             : 1
                                 , GHOSTING_MODE_POST_FRAMES            : 2
                                 , GHOSTING_MODE_CUSTOM_FRAMES          : 3
                                 , GHOSTING_MODE_KEYFRAMES              : 4
                                 , GHOSTING_MODE_ALL_KEYFRAMES          : 5
                                 }

# Names of the presets available; used by GhostingPreferencePreset and GhostingEditor.py
GHOSTING_PRESET_1S = r'1s'
GHOSTING_PRESET_2S = r'2s'
GHOSTING_PRESET_4S = r'4s'
GHOSTING_PRESET_5S = r'5s'
GHOSTING_PRESET_10S = r'10s'
GHOSTING_PRESET_CUSTOM = r'Custom'
GHOSTING_PRESETS = [ GHOSTING_PRESET_1S
                   , GHOSTING_PRESET_2S
                   , GHOSTING_PRESET_4S
                   , GHOSTING_PRESET_5S
                   , GHOSTING_PRESET_10S
                   , GHOSTING_PRESET_CUSTOM
                   ]

#----------------------------------------------------------------------
# Convenience index into the 'type' data below when the type is an enum list
INDEX_ENUM_ID    = 0
INDEX_ENUM_NAME  = 1
INDEX_ENUM_INFO  = 2
INDEX_ENUM_DATA  = 3

PREF_CATEGORY = r'Ghosting'

#======================================================================
def _aggregate_enum_info(enum_data):
    '''
    Take the enum_info and aggregate the list of enum values and their descriptions into
    an overall description string.
    :param enum_data: List of lists for allowed enum values and their associated text.
    :return: Aggregated string consisting of one line per enum value and its description.
    '''
    aggregate = ''
    # Initialize the aggregate tooltips and reverse index lists used by the UI.
    from sys import version_info as sys_version_info
    for enum_info in enum_data:
        if sys_version_info[0] < 3:
            aggregate += '\n{}: {}'.format( enum_info[INDEX_ENUM_NAME].encode('utf8'), enum_info[INDEX_ENUM_INFO].encode('utf8') )
        else:
            aggregate += '\n{}: {}'.format( enum_info[INDEX_ENUM_NAME], enum_info[INDEX_ENUM_INFO] )
    return aggregate

#======================================================================
class GhostingPreferenceAllInRange(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghost all in range" preference.
    '''
    ov_id = r'ghostAllInRange' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferenceAllInRange, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, True, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostAllInRangeTitle' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostAllInRangeTip'   ]

#======================================================================
class GhostingPreferenceCustomFrames(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghosting custom frames" preference.
    Internally the frames are handled as an array of integers but it is easier to use a string to store the preference.
    If this becomes cumbersome then the OptionVar class should be updated to handle integer arrays.
    '''
    ov_id = r'ghostingCustomFrames' # optionVar name and unique preference ID
    # Special constant for telling custom frame list to clear (works around a shortcoming of the command
    # engine that makes it unable to set a multi-flag to an empty list).
    SIGNAL_DELETE = -9999999

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferenceCustomFrames, self ).__init__(self.ov_id, OPTION_VAR_TYPE_STRING, "", PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingCustomFramesTitle' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingCustomFramesTip'   ]

#======================================================================
class GhostingPreferenceEnabled(OptionVar):
    '''
    Class containing the information for the "ghosting enabled" preference.
    '''
    ov_id = r'ghostingEnabled' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferenceEnabled, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, True, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingEnabledTitle' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingEnabledTip'   ]

#======================================================================
class GhostingPreferenceFarOpacity(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "minimum alpha value of ghosts" preference.
    '''
    ov_id = r'ghostsFarOpacity' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferenceFarOpacity, self ).__init__(self.ov_id, OPTION_VAR_TYPE_FLOAT, 0.15, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingFarOpacityTitle' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingFarOpacityTip'   ]

#======================================================================
class GhostingPreferenceGeometryFilter(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghosting geometry filter" preference.
    '''
    ov_id = r'ghostingGeometryFilter' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferenceGeometryFilter, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, False, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingGeometryFilterTitle' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingGeometryFilterTip'   ]

#======================================================================
class GhostingPreferencePreFrames(OptionVar):
    '''
    Class containing the information for the "pre frames" preference.
    '''
    ov_id = r'preFrames' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferencePreFrames, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, 3, PREF_CATEGORY)
        self.title = maya.stringTable[ 'y_maya_app_ghosting_ghosting_optionvar_states.kPreFramesLbl'  ]
        self.info  = maya.stringTable[ 'y_maya_app_ghosting_ghosting_optionvar_states.kPreFramesAnn'  ]

#======================================================================
class GhostingPreferencePostFrames(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "post frames" preference.
    '''
    ov_id = r'postFrames' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferencePostFrames, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, 3, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kPostFramesLbl' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kPostFramesAnn' ]

#======================================================================
class GhostingPreferenceGhostsStep(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghosting frame step" preference.
    '''
    ov_id = r'ghostsStep' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferenceGhostsStep, self ).__init__(self.ov_id, OPTION_VAR_TYPE_INT, 1, PREF_CATEGORY)
        self.title = maya.stringTable[ 'y_maya_app_ghosting_ghosting_optionvar_states.kGhostsFrameStepLbl'  ]
        self.info  = maya.stringTable[ 'y_maya_app_ghosting_ghosting_optionvar_states.kGhostsFrameStepAnn'  ]
        self.title_key = maya.stringTable[ 'y_maya_app_ghosting_ghosting_optionvar_states.kGhostsKeyframeStepLbl'  ]
        self.info_key  = maya.stringTable[ 'y_maya_app_ghosting_ghosting_optionvar_states.kGhostsKeyframeStepAnn'  ]

#======================================================================
class GhostingPreferenceHierarchy(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghosting hierarchy" preference.
    '''
    ov_id = r'ghostingHierarchy' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferenceHierarchy, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, True, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingHierarchyTitle' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingHierarchyTip'   ]

#======================================================================
class GhostingPreferenceJointFilter(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghosting joint filter" preference.
    '''
    ov_id = r'ghostingJointFilter' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferenceJointFilter, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, False, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingJointFilterTitle' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingJointFilterTip'   ]

#======================================================================
class GhostingPreferenceLocatorFilter(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghosting locator filter" preference.
    '''
    ov_id = r'ghostingLocatorFilter' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferenceLocatorFilter, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, False, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingLocatorFilterTitle' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingLocatorFilterTip'   ]

#======================================================================
class GhostingPreferenceMode(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghosting mode" preference
    '''
    ov_id = r'ghostingMode' # optionVar name and unique preference ID

    # This could be a dictionary but it's important to preserve the ordering so it's a list of lists.
    DATA = [ [ GHOSTING_MODE_PRE_AND_POST_FRAMES,   maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingModePreAndPostLabel' ]
             ,                                      maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingModePreAndPostInfo'  ]
             ]
           , [ GHOSTING_MODE_PRE_FRAMES,            maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingModePreLabel' ]
             ,                                      maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingModePreInfo'  ]
             ]
           , [ GHOSTING_MODE_POST_FRAMES,           maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingModePostLabel' ]
             ,                                      maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingModePostInfo'  ]
             ]
           , [ GHOSTING_MODE_CUSTOM_FRAMES,         maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingModeCustomFramesLabel' ]
             ,                                      maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingModeCustomFramesInfo'  ]
             ]
           , [ GHOSTING_MODE_KEYFRAMES,             maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingModeKeyframesLabel' ]
             ,                                      maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingModeKeyframesInfo'  ]
             ]
           ]
    # The first element of the list is treated as a dictionary key
    KEYS = [data[0] for data in DATA]

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferenceMode, self ).__init__(self.ov_id, GhostingPreferenceMode.KEYS, GhostingPreferenceMode.KEYS[0], PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingModeTitle' ]
        info_tip = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingModeTip'   ]
        from sys import version_info as sys_version_info
        if sys_version_info[0] < 3:
            self.info  = info_tip.encode('utf8') + _aggregate_enum_info(GhostingPreferenceMode.DATA)
        else:
            self.info  = info_tip + _aggregate_enum_info(GhostingPreferenceMode.DATA)
        self.lookup = { mode : i for i, mode in enumerate(GhostingPreferenceMode.KEYS) }

    def find_index(self, value):
        '''Find the index in the DATA list of the given enum value'''
        return self.lookup[value]

#======================================================================
class GhostingPreferenceNearOpacity(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "maximum alpha value of ghosts" preference.
    '''
    ov_id = r'ghostsNearOpacity' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferenceNearOpacity, self ).__init__(self.ov_id, OPTION_VAR_TYPE_FLOAT, 0.5, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingNearOpacityTitle' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingNearOpacityTip'   ]

#======================================================================
class GhostingPreferencePostColour(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "colour of ghosts after the current time" preference.
    '''
    ov_id = r'ghostsPostColor' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferencePostColour, self ).__init__(self.ov_id, OPTION_VAR_TYPE_RGB, [0.878, 0.678, 0.663], PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPostColourTitle' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPostColourTip'   ]

#======================================================================
class GhostingPreferencePreColour(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "colour of ghosts before the current time" preference.
    '''
    ov_id = r'ghostsPreColor' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferencePreColour, self ).__init__(self.ov_id, OPTION_VAR_TYPE_RGB, [0.447, 1.0, 1.0], PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPreColourTitle' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPreColourTip'   ]

#======================================================================
class GhostingPreferencePreset(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghosting preset" preference
    '''
    ov_id = r'ghostingPreset' # optionVar name and unique preference ID

    # This could be a dictionary but it's important to preserve the ordering so it's a list of lists.
    # The list items are KEY, LABLE, ANNOTATION, and PRESET_DATA
    DATA = [ [ GHOSTING_PRESET_1S,     maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPreset1sLabel' ]
             ,                         maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPreset1sInfo'  ]
             ,                         1
             ]
           , [ GHOSTING_PRESET_2S,     maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPreset2sLabel' ]
             ,                         maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPreset2sInfo'  ]
             ,                         2
             ]
           , [ GHOSTING_PRESET_4S,     maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPreset4sLabel' ]
             ,                         maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPreset4sInfo'  ]
             ,                         4
             ]
           , [ GHOSTING_PRESET_5S,     maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPreset5sLabel' ]
             ,                         maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPreset5sInfo'  ]
             ,                         5
             ]
           , [ GHOSTING_PRESET_10S,    maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPreset10sLabel' ]
             ,                         maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPreset10sInfo'  ]
             ,                         10
             ]
           , [ GHOSTING_PRESET_CUSTOM, maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPresetCustomLabel' ]
             ,                         maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPresetCustomInfo'  ]
             ,                         None
             ]
           ]
    # The first element of the list is treated as a dictionary key
    KEYS = [data[0] for data in DATA]

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferencePreset, self ).__init__(self.ov_id, GhostingPreferencePreset.KEYS, GhostingPreferencePreset.KEYS[0], PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPresetsFramesTitle' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPresetsFramesTip'   ]
        self.title_key = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPresetsKeyframesTitle' ]
        info_key_tip = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingPresetsKeyframesTip'   ]
        from sys import version_info as sys_version_info
        if sys_version_info[0] < 3:
            self.info_key  = info_key_tip.encode('utf8') + _aggregate_enum_info(GhostingPreferencePreset.DATA)
        else:
            self.info_key  = info_key_tip + _aggregate_enum_info(GhostingPreferencePreset.DATA)
        self.lookup = { mode : i+1 for i, mode in enumerate(GhostingPreferencePreset.KEYS) }

    def find_index(self, value):
        '''Find the index in the DATA list of the given enum value'''
        return self.lookup[value]

    def step_preset(self, value):
        '''
        :return: the step value mandated by the given preset value, None if no change is caused by setting that preset
        :param value: Preset whose step value is to be looked up
        '''
        preset_step_value = None
        try:
            preset_index = self.find_index( value )
            preset_step_value = self.DATA[preset_index][INDEX_ENUM_DATA]
        except KeyError:
            pass # Lookup failure returns "no change"
        return preset_step_value

#======================================================================
class GhostingPreferenceUseDriver(with_metaclass(Singleton, OptionVar)):
    '''
    Class containing the information for the "ghosting use driver" preference.
    '''
    ov_id = r'ghostingUseDriver' # optionVar name and unique preference ID

    def __init__(self):
        ''' Initialize the preference interface '''
        super( GhostingPreferenceUseDriver, self ).__init__(self.ov_id, OPTION_VAR_TYPE_BOOL, False, PREF_CATEGORY)
        self.title = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingUseDriverTitle' ]
        self.info  = maya.stringTable['y_maya_app_ghosting_ghosting_optionvar_states.kGhostingUseDriverTip'   ]
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
