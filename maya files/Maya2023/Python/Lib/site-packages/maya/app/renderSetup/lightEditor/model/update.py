import maya.cmds as cmds
import maya.api.OpenMaya as OpenMaya

import maya.app.renderSetup.model.typeIDs as typeIDs

# Refresh types
kRefreshNone = 0
kRefreshUI = 1
kRefreshIsolateState = 2

# Track requested refresh type
_refreshRequested = kRefreshNone

def refreshRequested():
    global _refreshRequested
    return _refreshRequested

def setRefreshRequested(refreshType):
    global _refreshRequested
    _refreshRequested = refreshType

def requestRefresh(refreshType):
    # Do a deferred refresh if a requested of higher or is not alalready
    # or if a higher order refresh is requested.
    if refreshType > refreshRequested():
        setRefreshRequested(refreshType)
        cmds.evalDeferred("import maya.app.renderSetup.lightEditor.model.update as update; update.doRefresh(" + str(refreshType) + ")", lowestPriority=True)

def doRefreshItem(item):
    # For groups refresh children recursively
    if item.typeId() == typeIDs.lightGroup:
        for c in item.getChildren():
            doRefreshItem(c)
    # Request UI update
    item.itemChanged()

def doRefresh(refreshType):
    try:
        import maya.app.renderSetup.lightEditor.model.editor as lightEditor
        if lightEditor.hasInstance():
            # If full refresh update the isolate state
            if refreshType == kRefreshIsolateState:
                lightEditor.instance().updateIsolateState()
            # Update UI if not in batch mode
            if not cmds.about(batch=True):
                for c in lightEditor.instance().getChildren():
                    doRefreshItem(c)
    finally:
        setRefreshRequested(kRefreshNone)

def addChangeCallbacks(node):
    """ Add callback needed for keeping enabled up to date in the light editor item tree when
    selfEnabled changes on an item."""

    def _dirtyCB(nodeObj, plug, data):
        if plug.attribute() == type(node).selfEnabled:
            requestRefresh(refreshType = kRefreshUI)
        elif plug.attribute() == type(node).isolateSelected:
            requestRefresh(refreshType = kRefreshIsolateState)

    # Create the callback
    return [OpenMaya.MNodeMessage.addNodeDirtyPlugCallback(node.thisMObject(), _dirtyCB)]
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
