"""
    This module defines a base class to manage the expanded state.
"""

from builtins import object
import maya.api.OpenMaya as OpenMaya

import maya.app.renderSetup.model.observable as observable
import maya.cmds as cmds

import maya.app.renderSetup.model.undo as undo


_EXPANDED_STATE_ATTRIBUTE_SHORT_NAME = 'es'
EXPANDED_STATE_ATTRIBUTE_NAME = 'expandedState'

class ExpandedStateNotification(object):
    def __init__(self):
        pass

class ExpandedStateChangedObservable(observable.SingletonObservable):
    def __init__(self):
        super(ExpandedStateChangedObservable, self).__init__()

def _hasExpandedStatePlug(node):
    return OpenMaya.MFnDependencyNode(node.thisMObject()).hasAttribute(EXPANDED_STATE_ATTRIBUTE_NAME)

def _getExpandedStatePlug(node):
    if not _hasExpandedStatePlug(node):
        # Use the command in order to allow undo/redo
        cmds.addAttr(node.name(),
                     shortName=_EXPANDED_STATE_ATTRIBUTE_SHORT_NAME,
                     longName=EXPANDED_STATE_ATTRIBUTE_NAME, at='bool')
    return OpenMaya.MFnDependencyNode(node.thisMObject()).findPlug(EXPANDED_STATE_ATTRIBUTE_NAME, True)

def getExpandedStateValue(node):
    return _getExpandedStatePlug(node).asBool() if _hasExpandedStatePlug(node) else True

def setExpandedStateValue(node, val, notifyObservers=True):
    if val is None:
        cmds.deleteAttr(node.name(), at=EXPANDED_STATE_ATTRIBUTE_NAME)
    else:
        with undo.NotifyCtxMgr('Set Expanded State', ExpandedStateChangedObservable().itemChanged):
            if not _hasExpandedStatePlug(node):
                cmds.addAttr(node.name(), shortName=_EXPANDED_STATE_ATTRIBUTE_SHORT_NAME, longName=EXPANDED_STATE_ATTRIBUTE_NAME, at='bool')
            cmds.setAttr(node.name() + ".expandedState", val)
            # The notifyObservers variable is set to False when one of the
            # observers is calling the current function.
            # Notifying itself would create an infinite loop.
            if notifyObservers:
                ExpandedStateChangedObservable().itemChanged(node)

def _encodeProperties(node, dict):
    if _hasExpandedStatePlug(node):
        # The JSON file will only show the expandedState key if it's false as the default value if true
        if not getExpandedStateValue(node):
            dict[EXPANDED_STATE_ATTRIBUTE_NAME] = False

def _decodeProperties(node, dict, mergeType, prependToName):
    if EXPANDED_STATE_ATTRIBUTE_NAME in dict:
        setExpandedStateValue(node, dict[EXPANDED_STATE_ATTRIBUTE_NAME])
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
