"""Group node class and utility functions.

   This module provides the group class, as well as utility
   functions to operate on groups.

   A group is a list of collections and/or groups.

   Render layer membership is determined from enabled / disabled, in
   conjunction with isolate select."""

import maya.app.renderSetup.model.nodeList as nodeList
import maya.app.renderSetup.model.typeIDs as typeIDs
import maya.app.renderSetup.model.undo as undo

import maya.app.renderSetup.common.utils as commonUtils

import maya.app.renderSetup.model.jsonTranslatorUtils as jsonTranslatorUtils
import maya.app.renderSetup.model.jsonTranslatorGlobals as jsonTranslatorGlobals

import maya.app.renderSetup.model.container as container

class Group(container.Container):
    """
    Group node.

    A group has an ordered list of children (groups or collections)

    """

    kTypeId = typeIDs.group
    kTypeName = container.Container.kGroupTypeName

    @staticmethod
    def creator():
        return Group()

    @staticmethod
    def initializer():
        Group.inheritAttributesFrom(container.Container.kTypeName)

    def getGroups(self):
        return self.getChildren(cls=Group)

    def isGroup(self):
        return True

    def typeId(self):
        return Group.kTypeId

    def typeName(self):
        return Group.kTypeName

    @undo.chunk('Append to group')
    def appendChild(self, child):
        """ Add a child as the highest-priority child."""

        nodeList.append(self, child)
        self._childAttached(child)

    @undo.chunk('Attach to group')
    def attachChild(self, pos, child):
        """ Attach a child at a specific position. """

        nodeList.insert(self, pos, child)
        self._childAttached(child)

    def getGroupByName(self, groupName, nested=False):
        for group in nodeList.forwardListNodeClassGenerator(self, cls=Group):
            if group.name() == groupName:
                return group
            elif nested:
                group2 = group.getGroupByName(groupName, True)
                if group2:
                    return group2
        return None

    def isAbstractClass(self):
        # Override method inherited from base class: not an abstract class.
        return False

    def getSelector(self):
        """ Returns none because groups do not have selectors """
        return None

    def hasSelector(self):
        """ Groups do not have selectors but they contain objects
        that can have selectors """
        return False

    def _encodeProperties(self, dict):
        super(Group, self)._encodeProperties(dict)
        dict[self._getSelfEnabledPlug().partialName(useLongNames=True)] = self.isSelfEnabled()
        dict[self._getIsolatePlug().partialName(useLongNames=True)] = self.isIsolateSelected()

        dict[jsonTranslatorGlobals.CHILDREN_ATTRIBUTE_NAME] = jsonTranslatorUtils.encodeObjectArray(self.getChildren())

    def _decodeProperties(self, dict, mergeType, prependToName):
        super(Group, self)._decodeProperties(dict, mergeType, prependToName)

        if self._getSelfEnabledPlug().partialName(useLongNames=True) in dict:
            self.setSelfEnabled(dict[self._getSelfEnabledPlug().partialName(useLongNames=True)])

        if mergeType != jsonTranslatorGlobals.DECODE_AND_RENAME:
            if self._getIsolatePlug().partialName(useLongNames=True) in dict:
                self.setIsolateSelected(dict[self._getIsolatePlug().partialName(useLongNames=True)])

        if jsonTranslatorGlobals.CHILDREN_ATTRIBUTE_NAME in dict:
            self._decodeChildren(dict[jsonTranslatorGlobals.CHILDREN_ATTRIBUTE_NAME],
                                 mergeType,
                                 prependToName)

def getAllGroupClasses():
    """ Returns the list of Group subclasses """
    # There are currently no subclasses
    return commonUtils.getSubClasses(Group)

def create(name, nodeType=container.Container.kGroupTypeName, parent=None, **selArgs):
    return container.create(name, nodeType, parent, **selArgs)

def delete(group):
    container.delete(group)

def unapply(group):
    container.unapply(group)

def groups(g):
    return g.getGroups()
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
