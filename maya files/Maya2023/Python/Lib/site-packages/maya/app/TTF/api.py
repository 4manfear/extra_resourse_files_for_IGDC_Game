import maya.app.TTF.store as store

def initTTF(willShow=True):
    # Postpone importing the data manager
    # so that it doesn't affect startup
    import maya.app.TTF.dataManager as tDm

    if store.dataManager is None:
        store.dataManager = tDm.DataManager()

    if willShow:
        if store.dataManager.needsToFinishLoading:
            store.dataManager.finishLoading()

    for edit in store.scheduledEdits:
        command, itemInfo = edit
        item = tDm.TTFItem(command, command, 
            itemInfo.get('label', ''),
            itemInfo.get('description', ''),
            itemInfo.get('longAnnotation', ''),
            itemInfo.get('categories', '').split(';'),
            itemInfo.get('image', ''),
            itemInfo.get('keywords', '').split(';'),
            itemInfo.get('plugin', ''),
            itemInfo.get('helpUrl', ''))
        tags = itemInfo.get('tags', '').split(';')
        store.dataManager.addItem(item, tags)

    store.scheduledEdits = []

def addCategory(category, categoryStr):
    store.ttfCategories[category] = categoryStr

# This is called by TrunTimeCommandCmd notifyTTF, and is how commands are
# added to TTF.
def addTTFItem(command, itemInfo):
    # Postpone adding the items to the database
    # as that may not be needed
    store.scheduledEdits.append((command, itemInfo))

def delTTFItem(command):
    pass

def dataManager():
    return store.dataManager# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
