from maya.app.flux.imports import *
import maya.app.flux.core as fx
from maya.app.flux.core import pix
import maya.OpenMayaUI as omui
import json
import os
import re
import inspect
from os.path import commonprefix
import maya.mel as mel
from copy import deepcopy
import threading

import maya.app.TTF.uiElements as dUI
import maya.app.TTF.api
dm = lambda: maya.app.TTF.api.dataManager()
import maya.app.TTF.ui as tUI

class TagPopup(qt.QDialog):
    def __init__(self, parent, pos, activeTags):
        super(TagPopup, self).__init__(parent=parent)
        self.model = dm().getAllTags()
        self.activeTags = deepcopy(activeTags)

        self.setWindowFlags(qt.Qt.Popup|qt.Qt.FramelessWindowHint|qt.Qt.NoDropShadowWindowHint)
        self.setGeometry(pos.x(), pos.y(), pix(150), pix(80))
        self.setLayout(qt.QVBoxLayout())
        self.layout().setContentsMargins(pix(0),pix(0),pix(0),pix(0))
        self.layout().setSpacing(pix(0))

        fx.setWidgetBackgroundColor(self, tUI.colors['gray'])

        self.setStyleSheet('''
            QDialog{
                border:none;
            }
            QScrollBar {
                border: none;
                margin: 0;
                width: %dpx;
                background:rgba(0,0,0,0);
            }
            QScrollBar::handle {
                background: rgba(93,93,93,217);
                border-right: %dpx solid rgba(55,55,55,217);
            }
            QScrollBar::add-page, QScrollBar::sub-page {
                border:none;
                background: rgba(55,55,55,217);
            }
            QScrollBar::add-line {
                width: 0;
                height: 0;
                border: none;
                background: none;
            }

            QScrollBar::sub-line {
                width: 0;
                height: 0;
                border: none;
                background: none;
            }
        ''' % (pix(5), pix(1)))

        #background: rgba(93,93,93,204)

        wrapper = qt.QWidget()
        fx.setHLayout(wrapper, pix(0), pix(0),pix(0),pix(2),pix(0))

        self.layout().addWidget(wrapper)

        self.tagBtn = fx.ImageButton('TTF_Filter')
        self.tagBtn.setFixedHeight(pix(22))
        self.tagBtn.setFixedWidth(pix(22))
        self.tagBtn.hoverBackgroundColor = qt.QColor(*tUI.colors['gray'])
        self.tagBtn.setConstantBackground(True)
        wrapper.layout().addWidget(self.tagBtn)

        self.fieldGroup = qt.QWidget()
        self.fieldGroup.setFixedHeight(pix(18))
        
        self.fieldGroup.setLayout(qt.QHBoxLayout())
        self.fieldGroup.layout().setContentsMargins(pix(0),pix(0),pix(0),pix(0))
        self.fieldGroup.layout().setSpacing(pix(0))
        self.fieldGroup.setAutoFillBackground(True)
        fx.setWidgetBackgroundColor(self.fieldGroup, [43,43,43])
        fx.setWidgetBaseColor(self.fieldGroup,[0,0,0,0])

        wrapper.layout().addWidget(self.fieldGroup)

        self.tagList = qt.QWidget()
        self.tagList.setLayout(qt.QHBoxLayout())
        self.tagList.layout().setContentsMargins(pix(2),pix(0),pix(1),pix(0))
        self.tagList.layout().setSpacing(pix(2))
        for tag in self.activeTags:
            color = dm().getColorForTag(tag)
            dtag = dUI.TTFTag(tag, color=color)
            dtag.clicked.connect(self.deleteTag)
            self.tagList.layout().addWidget(dtag)
        self.fieldGroup.layout().activate()
        if len(self.activeTags) == 0:
            self.tagList.hide()
        self.fieldGroup.layout().addWidget(self.tagList)

        self.lineEdit = dUI.TTFField([])
        self.lineEdit.setTextMargins(pix(0),pix(0),pix(0),pix(0))
        self.lineEdit.setPlaceholderText(fx.res('kEnterTag'))
        self.lineEdit.setStyleSheet('QLineEdit{background-color: rgba(0,0,0,0); border: none;}')
        self.lineEdit.installEventFilter(self)
        self.lineEdit.textChanged.connect(self.textChanged)
        self.fieldGroup.layout().addWidget(self.lineEdit)

        self.listWidget = dUI.TagListWidget()
        self.listWidget.clicked.connect(self.rowClicked)
        self.listWidget.setFixedHeight(pix(140))
        self.listWidget.setIconSize(qt.QSize(pix(14),pix(14)))
        self.listWidget.setFocusPolicy(qt.Qt.NoFocus)
        self.listWidget.setStyleSheet('''
            /* Won't work without borders set */
            QListView{
                border:0px solid black;
                background-color:rgba(0,0,0,0);
            }
            QListView::item {
                border: 0px solid black;
            }
            QListView::item::selected {
                background:rgba(51,115,153,230);
            }
            QListView::icon {
                left: %dpx;
            }
            QListView::text {
                left: %dpx;
            }

            ''' % ( pix(3), pix(7) ))
        self.layout().addWidget(self.listWidget)

        if 'Favorites' in self.model:
            self.model.remove('Favorites')
            self.model = ['Favorites'] + self.model
        self.populateList(self.model)

        if self.listWidget.count() > 0:
            self.setSelection(1)

        self.lineEdit.setFocus()

    def rowClicked(self, row):
        self.addTag()
        self.textChanged()

    def populateList(self, items):
        for i in items:
            item = qt.QListWidgetItem(i)
            icon = tUI.getColoredCircle(dm().getColorForTag(i))
            item.setIcon(qt.QIcon(icon))
            item.setSizeHint(qt.QSize(item.sizeHint().width(), pix(14)))
            self.listWidget.addItem(item)

    def textChanged(self):
        self.results = []
        p = re.compile(u'.*%s.*' % re.escape(self.lineEdit.text()), re.I | re.U)

        for key in self.model:
            if p.match(key):
                self.results.append(key)

        if len(self.lineEdit.text()) == 0:
            self.results = self.model

        self.results = sorted(self.results, key=lambda item: (len(item), item))
        if len(self.lineEdit.text()) == 0 and 'Favorites' in self.results:
            self.results.remove('Favorites')
            self.results = ['Favorites'] + self.results

        self.listWidget.clear()
        self.populateList(self.results)

        if self.listWidget.count() > 0:
            self.setSelection(1)

    def fixUI(self):
        self.listWidget.hide()
        self.listWidget.show()

        if len(self.results) > 0:
            self.listWidget.show()
        else:
            self.listWidget.hide()

        height = min(self.listWidget.count(), 10)
        height = 6 * pix(13)

        self.listWidget.setFixedHeight(height)
        self.layout().activate()
        self.resize(self.sizeHint())
        self.listWidget.viewport().repaint()
        self.repaint()

    def focusOutEvent(self, event):
        self.accept()

    def leaveEvent(self, e):
        self.accept()
        return super(TagPopup, self).leaveEvent(e)

    def clearSelection(self):
        self.listWidget.selectionModel().clearSelection()

    def getCurrentIndex(self):
        row = 0
        selectedIndexes = self.listWidget.selectionModel().selectedRows()
        if len(selectedIndexes) != 0:
            row = selectedIndexes[0].row() + 1

        return row

    def setSelection(self, nav):
        row = self.getCurrentIndex()

        self.clearSelection()

        row += nav

        if row <= 0:
            return
        else:
            if row > self.listWidget.count():
                row = 1
            row -= 1
            self.listWidget.setCurrentRow(row)
            self.listWidget.item(row).setSelected(True)

    def deleteTag(self, specificTag=None):
        layout = self.tagList.layout()
        if layout.count() == 0:
            return
        else:
            index = None
            if specificTag in self.activeTags:
                index = self.activeTags.index(specificTag)
            else:
                index = layout.count()-1

            layout.itemAt(index).widget().hide()
            layout.activate()
            item = layout.takeAt(index)
            item.widget().deleteLater()
            del self.activeTags[index]

            if len(self.activeTags) == 0:
                self.tagList.hide()
                self.fieldGroup.layout().activate()

            self.textChanged()

    def addTag(self, tag=None):
        if tag is None:
            row = self.getCurrentIndex() - 1
            tag = self.listWidget.item(row).text()
        if tag not in self.activeTags:
            self.activeTags.append(tag)
            color = dm().getColorForTag(tag)
            dtag = dUI.TTFTag(tag, color=color)
            dtag.clicked.connect(self.deleteTag)
            self.tagList.layout().addWidget(dtag)
            self.tagList.show()
            self.tagList.repaint()
            self.fieldGroup.layout().activate()
        self.lineEdit.setText('')

    def eventFilter(self, widget, event):
        if (event.type() == qt.QEvent.KeyPress and widget is self.lineEdit):
            key = event.key()

            nav = None
            if key == qt.Qt.Key_Up:
                nav = -1
            if key == qt.Qt.Key_Down:
                nav = 1
            if nav:
                self.setSelection(nav)
                return True             

            if key == qt.Qt.Key_Return:
                if self.getCurrentIndex() == 0:
                    self.addTag(self.lineEdit.text())
                else:
                    self.addTag()
                return True   

            if key == qt.Qt.Key_Space:
                if self.getCurrentIndex() != 0:
                    self.addTag()
                return True   

            if (key == qt.Qt.Key_Backspace and self.lineEdit.cursorPosition() == 0 
                and not self.lineEdit.hasSelectedText()):
                self.deleteTag()
                return True

        return qt.QWidget.eventFilter(self, widget, event)

    @staticmethod
    def getChoice(parent, pos, activeTags):
        dialog = TagPopup(parent,pos, activeTags)
        result = dialog.exec_()
        tags = dialog.activeTags
        return (tags, result == qt.QDialog.Accepted)

class MainTagListWidget(qt.QListWidget):
    clicked = qt.Signal(int)
    def __init__(self, parent=None):
        qt.QListWidget.__init__(self, parent=parent)
        self.setMouseTracking(True)

    def mouseMoveEvent(self, e):
        qt.QListWidget.mousePressEvent(self,e)
        pos = e.pos()
        index = self.indexAt(e.pos())
        if index.isValid():
            row = index.row()
            self.selectionModel().clearSelection()
            self.setCurrentRow(row)
            self.item(row).setSelected(True)

    def mousePressEvent(self, e):
        qt.QListWidget.mousePressEvent(self,e)
        pos = e.pos()
        index = self.indexAt(e.pos())
        if index.isValid():
            row = index.row()
            self.clicked.emit(row)

class MainTagPopup(qt.QDialog):
    addTag = qt.Signal(str)
    def __init__(self, tags):
        qt.QDialog.__init__(self)
        self.setWindowFlags(qt.Qt.Popup|qt.Qt.FramelessWindowHint|qt.Qt.NoDropShadowWindowHint)
        fx.setVLayout(self)

        fx.setWidgetBackgroundColor(self, tUI.colors['gray'])

        self.setStyleSheet('''
            QDialog{
                border:none;
            }
            QScrollBar {
                border: none;
                margin: 0;
                width: %dpx;
                background:rgba(0,0,0,0);
            }
            QScrollBar::handle {
                background: rgba(93,93,93,217);
                border-right: %dpx solid rgba(55,55,55,217);
            }
            QScrollBar::add-page, QScrollBar::sub-page {
                border:none;
                background: rgba(55,55,55,217);
            }
            QScrollBar::add-line {
                border: none;
                background: none;
            }

            QScrollBar::sub-line {
                border: none;
                background: none;
            }
        ''' % (pix(5), pix(1)))

        topBar = fx.HWidget()
        topBar.setMargins(pix(0),pix(0),pix(0),pix(0))
        topBar.setSpacing(pix(0))

        self.tagBtn = fx.ImageButton('TTF_Filter')
        self.tagBtn.setFixedHeight(pix(22))
        self.tagBtn.setFixedWidth(pix(22))
        self.tagBtn.clicked.connect(self.close)
        self.tagBtn.hoverBackgroundColor = qt.QColor(*tUI.colors['gray'])
        self.tagBtn.setConstantBackground(True)
        topBar.addWidget(self.tagBtn)

        self.lineEdit = qt.QLineEdit()
        self.lineEdit.setTextMargins(pix(0),pix(0),pix(0),pix(0))
        self.lineEdit.setPlaceholderText(fx.res('kSearchFilters'))
        self.lineEdit.setStyleSheet('QLineEdit{background-color: rgb(43,43,43); border: none;}')
        self.lineEdit.installEventFilter(self)
        self.lineEdit.textChanged.connect(self.textChanged)
        self.lineEdit.setFixedHeight(pix(18))

        topBar.addWidget(self.lineEdit)
        topBar.addSpacing(pix(2))

        self.layout().addWidget(topBar)

        self.listWidget = MainTagListWidget()
        self.listWidget.setContentsMargins(pix(0),pix(0),pix(0),pix(0))
        self.listWidget.setSpacing(pix(0))
        self.listWidget.setStyleSheet('''
            /* Won't work without borders set */
            QListView{
                border:0px solid black;
                background-color:rgba(0,0,0,0);
            }
            QListView::item {
                border: 0px solid black;
            }
            QListView::item::selected {
                background:rgba(51,115,153,230);
            }
            QListView::icon {
                left: %dpx;
            }
            QListView::text {
                left: %dpx;
            }

            ''' % (pix(3), pix(7)))
        self.listWidget.setFocusPolicy(qt.Qt.NoFocus)
        self.listWidget.clicked.connect(self.rowClicked)
        self.layout().addWidget(self.listWidget)

        self.allTags = sorted(tags)
        if 'Favorites' in self.allTags:
            self.allTags.remove('Favorites')
            self.allTags = ['Favorites'] + self.allTags
        self.populateList(self.allTags)

        self.lineEdit.setFocus()

        self.installEventFilter(self)

    def clearSelection(self):
        self.listWidget.selectionModel().clearSelection()

    def getCurrentIndex(self):
        row = 0
        selectedIndexes = self.listWidget.selectionModel().selectedRows()
        if len(selectedIndexes) != 0:
            row = selectedIndexes[0].row() + 1

        return row

    def setSelection(self, nav):
        row = self.getCurrentIndex() + nav

        if self.listWidget.count() == 0:
            return

        self.clearSelection()

        if row <= 0:
            row = self.listWidget.count()

        if row > self.listWidget.count():
            row = 1

        row -= 1
        self.listWidget.setCurrentRow(row)
        self.listWidget.item(row).setSelected(True)

    def eventFilter(self, widget, event):
        if (event.type() == qt.QEvent.KeyPress and widget is self.lineEdit):
            key = event.key()

            nav = None
            if key == qt.Qt.Key_Up:
                nav = -1
            if key == qt.Qt.Key_Down:
                nav = 1

            if nav:
                self.setSelection(nav)
                return True

            # prevent loss of focus
            if key == qt.Qt.Key_Shift:
                return True               

            if key == qt.Qt.Key_Return:
                if self.listWidget.count() != 0:
                    row = self.getCurrentIndex() - 1
                    tag = self.listWidget.item(row).text()
                    self.addTag.emit(tag)

                self.close()
                return True

            if (key == qt.Qt.Key_Colon):
                self.close()
                return True

            if key == qt.Qt.Key_Backspace and len(self.lineEdit.text()) == 0:
                self.close()
                return True

        return False

    def textChanged(self, *args):
        self.listWidget.clear()

        results = None
        text = self.lineEdit.text()
        if len(text) == 0:
            results = self.allTags
        else:
            p = re.compile(u'.*%s.*' % re.escape(self.lineEdit.text()), re.I | re.U)
            results = [key for key in self.allTags if p.match(key)]
            results = sorted(results, key=lambda i: (len(i), i))

        self.populateList(results)

    def populateList(self, items):
        if len(items) > 0:
            self.listWidget.show()
        else:
            self.listWidget.hide()

        for i in items:
            item = qt.QListWidgetItem(i)
            icon = tUI.getColoredCircle(dm().getColorForTag(i))
            item.setIcon(qt.QIcon(icon))
            item.setSizeHint(qt.QSize(item.sizeHint().width(), pix(14)))
            self.listWidget.setIconSize(qt.QSize(pix(14),pix(14)))
            self.listWidget.addItem(item)

        if len(items) > 0:
            self.listWidget.item(0).setSelected(True)
        self.setFixedHeight(pix(22) + min(self.listWidget.count()*pix(14), pix(140)))

    def rowClicked(self, row):
        tag = self.listWidget.item(row).text()
        self.addTag.emit(tag)
        self.close()
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
