from builtins import object
from builtins import range
from maya.app.flux.imports import *
import json
import os
import re

########### utility ############

def loadInconsolata():
    if 'Inconsolata' not in qt.QFontDatabase().families():
        currentDirectory = os.path.dirname(__file__)
        resourcesPath = os.path.join(currentDirectory, 'Resources')
        fontPath = os.path.join(resourcesPath, 'Inconsolata-Regular.ttf')
        fontId = qt.QFontDatabase.addApplicationFont(fontPath)

def openWebUrl(url):
    cmds.showHelp(url, absolute=True)

def openWebSearch(search):
    cmds.showHelp('?query=%s' % search, docs=True)

def openWebDocs(command, lang):
    cmds.help(command, doc=True, lng=lang)

def mayaPrefsFolder():
    return cmds.about(pd=True)

def getAssignCommandAnnotation(index):
    return cmds.assignCommand(index, query=True, ann=True)

def getAssignCommandsMap():
    count = cmds.assignCommand(query=True, numElements=True) or 0
    toolsPackage = {}
            
    for index in range(1, count+1):
        cmd = cmds.assignCommand(index, query=True, command=True)
        if len(cmd):
            toolsPackage[cmd] = index
    return toolsPackage

def getAssignCommandHotkey(index):
    keyString = cmds.assignCommand(index, query=True, keyString=True)

    if not (len(keyString) > 0 and keyString[0] != "NONE"):
        return ''

    isLower = len(keyString[0]) == 1 and keyString[0].islower()
    isMacOS = cmds.about(mac=True)

    keys = {}
    if isMacOS:
        keys = {
            'control':  u'\u2303',
            'alt':      u'\u2325',
            'shift':    u'\u21E7',
            'super':    u'\u2318'
        }
    else:
        keys = {
            'control':  'Win',
            'alt':      'Alt',
            'shift':    'Shift',
            'super':    'Ctrl'
        }

    displayString = []

    if "1" == keyString[5]: displayString.append(keys['control'])
    if "1" == keyString[1]: displayString.append(keys['alt'])
    if "1" == keyString[6]: displayString.append(keys['shift'])
    if "1" == keyString[2]: displayString.append(keys['super'])
    
    if keyString[0].lower() == 'left':
        displayString.append(u'\u2190')
    elif keyString[0].lower() == 'right':
        displayString.append(u'\u2192')
    elif keyString[0].lower() == 'del':
        displayString.append(u'\u2326')
    elif isLower:
        displayString.append(keyString[0].upper())
    else:
        displayString.append(keyString[0])

    if isMacOS:
        return ''.join(displayString)
    else:
        return '+'.join(displayString)

def onMayaQuitCallback(func):
    jobId = cmds.scriptJob(runOnce=True, e=['quitApplication', func])
    return ScriptJobWrapper(jobId)

class ScriptJobWrapper(object):
    def __init__(self, scriptJobId):
        self.scriptJobId = scriptJobId

    def __del__(self):
        if cmds.scriptJob(exists=self.scriptJobId):
            cmds.scriptJob(kill=self.scriptJobId)

def hexToRGB(color):
    if not color:
        color = '#48AAB5'
    value = color.lstrip('#')
    lv = len(value.strip())
    return [int(value[i:i + lv // 3], 16) for i in range(0, lv, lv // 3)]

def rgbToHex(color):
    return '#%02x%02x%02x' % (color[0], color[1], color[2])

# Selection Context

def getNodeType(name):
    return cmds.nodeType(name)
    
def getSelectedNodes():
    return cmds.ls(sl=True)
    
def getRelatives(name):
    relatives = cmds.listRelatives(name, fullPath=True)
    
    if relatives is None:
        return []

    if name in relatives:
        relatives.remove(name)
        
    additional = []
    
    for r in relatives:
        additional += getRelatives(r)
        
    relatives += additional
    
    return relatives

def getSelectionStatistics():
    nodes = getSelectedNodes()
    types = {}

    for n in nodes:
        t = getNodeType(n)
        if t not in types:
            types[t] = 0
        types[t] += 1
        relatives = getRelatives(n)
        if relatives:
            for r in set(relatives):
                t = getNodeType(r)
                if t not in types:
                    types[t] = 0
                types[t] += 1
    return types

def getSuggestedContext():
    types = getSelectionStatistics()
    if 'transform' in types:
        types.pop('transform')
    
    ctx = None
    candidates = sorted(types, key=types.__getitem__)
    if (not len(candidates) == 0) and (not len(candidates) > 1 and types[candidates[-1]] == types[candidates[-2]]):
        ctx = candidates[-1]

    return ctx

def printSelectionStatistics():    
    print('Statistics:', getSelectionStatistics())
    print('Context:', getSuggestedContext())# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
