from maya.app.flux.imports import *
import maya.app.flux.core as fx
#reload(fx)
from maya.app.flux.core import pix
import json
import os
import maya.mel as mel

import maya.app.TTF.api
dm = lambda: maya.app.TTF.api.dataManager()
import maya.app.TTF.ui as tUI

def openPrefsWindow():
    prefsWindow = TTFPrefsWindow(parent=fx.mayaWindow())
    prefsWindow.setProperty("saveWindowPref", True )
    prefsWindow.show()
    prefsWindow.window().raise_()
    prefsWindow.raise_()
    prefsWindow.activateWindow()

class ListHeader(qt.QWidget):
    clicked = qt.Signal()
    def __init__(self, name):
        qt.QWidget.__init__(self)
        fx.setHLayout(self, pix(2),pix(5),pix(2),pix(5),pix(2))
        layout = self.layout()
        layout.addWidget(qt.QLabel(name))
        layout.addStretch()

        btn = fx.ImageButton('out_MASH_Options')
        btn.clicked.connect(self.pressed)

        layout.addWidget(btn)

    def pressed(self):
        self.clicked.emit()

    def paintEvent(self, e):
        p = qt.QPainter(self)
        p.setPen(qt.Qt.NoPen)
        p.fillRect(e.rect(), qt.QColor(*tUI.colors['gray']))
        p.end()


class TTFPrefsWindow(qt.QDialog):
    def __init__(self, parent=None):
        qt.QDialog.__init__(self, parent)

        maya.app.TTF.api.initTTF()
        dm().setContextId(0)

        self.setupUI()
        self.updateContext()

    def setupUI(self):
        #Window setup
        #self.setWindowFlags(self.windowFlags())
        self.resize(pix(400), pix(450))
        fx.setVLayout(self, pix(0), pix(5),pix(5),pix(5),pix(5))
        self.setWindowTitle(fx.res('kSearchFilterTagMgmt'))

        self.layout().addSpacing(pix(5))

        self.tabBar = qt.QTabWidget()
        self.tabBar.setFixedHeight(pix(18))
        self.tabBar.setContentsMargins(pix(0),pix(0),pix(0),pix(0))
        self.tabBar.setStyleSheet('QTabWidget{border:none;margin:0;padding:0;}')
        for i in [fx.res('kSearchMode'), 'Python', 'MEL']:
            w = qt.QWidget()
            w.setFixedHeight(pix(0))
            self.tabBar.addTab(w, i)

        self.tabBar.setCurrentIndex(self.convertContextToTabBarIndex(dm().getContext()))
        self.tabBar.currentChanged.connect(self.contextChanged)

        self.layout().addWidget(self.tabBar)
        wrapper = fx.VWidget()
        wrapper.setMargins(pix(5),pix(5),pix(5),pix(5))
        wrapper.setSpacing(pix(0))
        fx.setWidgetBackgroundColor(wrapper, [68,68,68])
        wrapper.setAutoFillBackground(True)

        self.layout().addWidget(wrapper)

        self.tagList = qt.QListWidget()
        self.tagList.setSelectionMode(qt.QAbstractItemView.ExtendedSelection)
        self.tagList.setStyleSheet('QListWidget{border: none; margin:0; padding:0;}')
        fx.configureRightClickMenu(self.tagList, self.openTagTreeMenu)
        self.tagList.setFocusPolicy(qt.Qt.NoFocus)
        self.tagList.itemChanged.connect(self.tagChanged)

        header = ListHeader(fx.res('kTags'))
        header.clicked.connect(self.openTagTreeMenu)
        wrapper.addWidget(header)
        wrapper.addWidget(self.tagList)

    def convertContextToTabBarIndex(self, context):
        if 'ttf' == context:
            return 0
        elif 'python' == context:
            return 1
        elif 'mel' == context:
            return 2
        else:
            return -1

    def convertTabBarIndexToContext(self, i):
        if 0 == i:
            return 'ttf'
        elif 1 == i:
            return 'python'
        elif 2 == i:
            return 'mel'
        else:
            print("Invalid tab index. Using Search as context")
            return 'ttf'

    def contextChanged(self, i):
        dm().setContext(self.convertTabBarIndexToContext(i))
        self.updateContext()

    def updateContext(self):
        self.updateTagList()

    def fixUI(self):
        self.resize(self.width(), self.sizeHint().height())

    def updateTagList(self):
        self.tags = sorted(dm().getAllTags())
        self.tagList.clear()
        for i in self.tags:
            item = self.createTag(i)
            self.tagList.addItem(item)

    def makeGroup(self, name, expanded):
        group = fx.FrameWidget(name, expanded=expanded)
        group.contents.layout().setAlignment(qt.Qt.AlignCenter)
        fx.setWidgetBackgroundColor(group.contents, [73,73,73])
        group.contents.setAutoFillBackground(True)
        return group

    def closeEvent(self, event=None):
        dm().save()
        self.setParent(None)
        self.deleteLater()

    def openTagTreeMenu(self, position=None):
        menu = qt.QMenu(self)
        
        currentItem = self.tagList.currentItem()

        labelIcon = qt.QIcon(fx.fluxIcons['Create'])
        menu.addAction(labelIcon, fx.res('kNewTag'), self.addNewTag)

        if currentItem:
            color = qt.QColor(dm().getColorForTag(currentItem.text()))
            labelIcon = fx.createColorIcon(qcolor=color)
            colorMenu = menu.addMenu(labelIcon, fx.res('kTagColor'))
            for colorName in fx.allColorLabels():
                labelIcon = fx.createColorIcon(colorName)
                colorMenu.addAction(labelIcon, colorName, lambda prm=fx.getColourFromLabel(colorName): self.setTagColor(prm))
            menu.addAction(fx.getIconFromName('out_MASH_Options'), fx.res('kRenameTag'), self.renameLayer)
            menu.addAction(fx.getIconFromName('out_MASH_Delete'), fx.res('kDeleteTag'), self.deleteLayer)

        menu.move(qt.QCursor.pos())
        menu.show()

    def createTag(self, text=None):
        if text is None:
            text = 'Untitled'
        item = qt.QListWidgetItem(text)
        color = dm().getColorForTag(text)
        item.setIcon(qt.QIcon(maya.app.TTF.ui.getColoredCircle(color)))
        item.setFlags(item.flags() | qt.Qt.ItemIsEditable)
        return item

    def addNewTag(self):
        item = self.createTag()
        self.tagList.addItem(item)
        self.tagList.setCurrentRow(self.tagList.count()-1)
        self.tagList.editItem(item)

    def getSelectedTags(self):
        return self.tagList.selectedItems() or []

    def setTagColor(self, color):
        for item in self.getSelectedTags():
            item.setIcon(qt.QIcon(maya.app.TTF.ui.getColoredCircle(color)))
            dm().setColorForTag(item.text(), color.name())

    def renameLayer(self):
        self.tagList.editItem(self.tagList.currentItem())

    def deleteLayer(self):
        rowsToDelete = []
        for item in self.getSelectedTags():
            tag = item.text()
            rowsToDelete.append(self.tagList.row(item))
            dm().deleteTag(tag)

        for row in sorted(rowsToDelete, reverse=True):
            self.tagList.takeItem(row)

    def tagChanged(self, item):
        row = self.tagList.indexFromItem(item).row()
        if row == len(self.tags):
            text = item.text()
            approved = dm().getAvailableTagName(text)
            if approved != text:
                item.setText(approved)
                return
            dm().addTag(text)
            self.tags.append(text)
            return

        old = self.tags[row]
        new = item.text()
        if new == old:
            return

        approved = dm().getAvailableTagName(new)
        if approved != new:
            item.setText(approved)
            return

        dm().renameTag(old, new)
            
        self.tags[row] = new
        
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
