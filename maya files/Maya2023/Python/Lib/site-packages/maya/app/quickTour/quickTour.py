""" Implememts the maya quick tour """
import maya
maya.utils.loadStringResourcesForModule(__name__)


# qt
from PySide2.QtCore import QPoint, QSize, Qt
from PySide2.QtWidgets import QWidget, QHBoxLayout, QVBoxLayout, QLabel, QPushButton
from PySide2.QtGui import QPainter, QBrush, QPen, QColor, QMouseEvent

# moverlay
import moverlay
from moverlay.quickTourDialog import TourDialog, Hotspot, AnchorType
from moverlay.maya import getMainMayaWindow, overlayManager
from moverlay.higDropShadow import HIGDropShadow
from moverlay.overlayDef import OverlayDef
from moverlay.enums import RelTo, OverlayStyle
from moverlay.utils import DPIScale
from moverlay.higDialog import HIGDialog

# local
from . import find

#python
import os

import maya

QUICK_TOUR_DLG = None
HOTSPOT_OVERLAY = None
HOTSPOT_WIDGET = None
CURRENT_STEP = 0
FIRST_HOTSPOT_MOVE = True
USER_WORKSPACE = None
TEMP_WORKSPACE_NAME = "QuicktourDemo"

def runQuickTour():

    if maya.cmds.appHome(query=True, visible=True):
        maya.cmds.appHome(edit=True, visible=0)
    
    global USER_WORKSPACE, TEMO_WORKSPACE_NAME
    USER_WORKSPACE = maya.cmds.workspaceLayoutManager(query=True, current=True)

    maya.cmds.workspaceLayoutManager(setCurrent="General")
    maya.cmds.workspaceLayoutManager(saveAs=TEMP_WORKSPACE_NAME)
    maya.cmds.workspaceLayoutManager(reset=True)

    global QUICK_TOUR_DLG, HOTSPOT_OVERLAY, HOTSPOT_WIDGET

    if QUICK_TOUR_DLG:
        return
    mayaWindow = getMainMayaWindow()

    hotSpot = Hotspot(mayaWindow)
    

    overlayDef = OverlayDef(attachment=RelTo.TopLeft,
                            offset=QSize(10, 10), style=OverlayStyle.Custom)
    overlay = overlayManager().createOverlay(overlayDef)
    overlay.setAsWidget(hotSpot)
    overlay.widget().setWindowFlag(Qt.WindowTransparentForInput, True)
    size = hotSpot.sizeHint()
    overlay.setSize(size.width(), size.height())
    HOTSPOT_WIDGET = hotSpot
    HOTSPOT_OVERLAY = overlay

    tourDlg = TourDialog(mayaWindow)
    hinDropShadow = HIGDropShadow(mayaWindow, tourDlg)
    # tourDlg.theDialog().moveOnMainWindow(hotSpot.bottomRightMidRing())
    tourDlg.progressBar().resetSteps(0, 12)

    tourDlg.setCloseCallback(_quickTourClosed)
    tourDlg.setStepCallback(_quickTourStepChanged)

    tourDlg.setLearnMoreButton(LEARN_MORE_BUTTON, "dummy")
    tourDlg.learnModeButton.setOpenExternalLinks(False)
    tourDlg.learnModeButton.linkActivated.connect(_learnButtonClicked)
    tourDlg.showAndRaise()

    QUICK_TOUR_DLG = tourDlg

    _quickTourStepChanged(tourDlg, 0)


def _quickTourClosed(dialog):
    global QUICK_TOUR_DLG, HOTSPOT_OVERLAY, FIRST_HOTSPOT_MOVE
    QUICK_TOUR_DLG.theDialog().deleteLater()
    QUICK_TOUR_DLG = None

    overlayManager().deleteOverlay(HOTSPOT_OVERLAY)
    HOTSPOT_OVERLAY = None

    global USER_WORKSPACE, TEMO_WORKSPACE_NAME
    if USER_WORKSPACE:
        maya.cmds.workspaceLayoutManager(setCurrent=USER_WORKSPACE)
        maya.cmds.workspaceLayoutManager(delete=TEMP_WORKSPACE_NAME)
        USER_WORKSPACE = None

    FIRST_HOTSPOT_MOVE = True

def _getResourcePath(fileName):
    path = os.path.dirname(__file__) + os.path.sep + \
        "Resources" + os.path.sep
    path += fileName
    return path


_TITLES = [
    maya.stringTable['y_maya_app_quickTour_quickTour.kTitle01' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kTitle02' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kTitle03' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kTitle04' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kTitle05' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kTitle06' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kTitle07' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kTitle08' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kTitle09' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kTitle10' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kTitle11' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kTitle12' ]
]

_BODIES = [
    maya.stringTable['y_maya_app_quickTour_quickTour.kBody01' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kBody02' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kBody03' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kBody04' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kBody05' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kBody06' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kBody07' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kBody08' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kBody09' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kBody10' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kBody11' ],
    maya.stringTable['y_maya_app_quickTour_quickTour.kBody12' ]
]

_MOVIES = [
    "1_create_primitive.gif",
    "2_content_browser.gif",
    "3_frame.gif",
    "4_camera_moves.gif",
    "5_select.gif",
    "6_move_object.gif",
    "7_rotate_object.gif",
    "8_scale_object.gif",
    "9_channel_box.gif",
    "10_object_mode.gif",
    "11_component_mode.gif",
    "12_search.gif"
]

_LEARNMORE = [
    "createPolyPrimitive",
    "importContentBrowser",
    "frameView",
    "ViewportNavigation",
    "SelectTool",
    "MoveTool",
    "RotateTool",
    "ScaleTool",
    "channelBoxEditor",
    "TC-Select-object-or-components",
    "TC-Select-object-or-components",
    "searchMaya"
]

LEARN_MORE_BUTTON = maya.stringTable['y_maya_app_quickTour_quickTour.kLearnMore' ]
BACK_BUTTON = maya.stringTable['y_maya_app_quickTour_quickTour.kBack' ]
NEXT_BUTTON = maya.stringTable['y_maya_app_quickTour_quickTour.kNext' ]
DONE_BUTTON = maya.stringTable['y_maya_app_quickTour_quickTour.kDone' ]

GREAT_JOB = maya.stringTable['y_maya_app_quickTour_quickTour.kFinalDlgH1' ]
CONTINUE_LEARNING = maya.stringTable['y_maya_app_quickTour_quickTour.kFinalDlgH2' ]

BASIC_SKILLS        = maya.stringTable['y_maya_app_quickTour_quickTour.kBasicSkills' ]
IN_APP_TUTORIALS    = maya.stringTable['y_maya_app_quickTour_quickTour.kInAppTutorial' ]
SEE_ALL_TUTORIALS   = maya.stringTable['y_maya_app_quickTour_quickTour.kSeeAllTutorials' ]
END_QUICK_TOUR      = maya.stringTable['y_maya_app_quickTour_quickTour.kEndQuickTour' ]

def _learnButtonClicked(_):
    maya.cmds.showHelp(_LEARNMORE[CURRENT_STEP])

def _hotspotMoved(overlay, offset):
    # called as the hotspot is being animated
    global QUICK_TOUR_DLG
    hotspot = overlay.getSubWidget()
    hotspot.moveOtherWindowToAnchor(QUICK_TOUR_DLG.theDialog(), QUICK_TOUR_DLG.anchorType)

def _hotspotAnimationEnded(overlay):
    # called then the _moveHotspotCenter is finished, to reattach the tour dialog
    overlay.offsetChanged.disconnect(_hotspotMoved)

def _moveHotspotCenter(pos, anchor):
    global HOTSPOT_OVERLAY, QUICK_TOUR_DLG, FIRST_HOTSPOT_MOVE
    offset = HOTSPOT_OVERLAY.widget().rect().center()
    newTopLeft = pos - offset
    # not sure why but I need nudge it for centering on icon
    newTopLeft += QPoint(0,1)

    # show hotspot in case it was hidden when an item wasn't found
    HOTSPOT_OVERLAY.show()

    QUICK_TOUR_DLG.anchorType = anchor

    if FIRST_HOTSPOT_MOVE:
        FIRST_HOTSPOT_MOVE = False
        HOTSPOT_OVERLAY.attachToWindow(RelTo.TopLeft, QSize(newTopLeft.x(), newTopLeft.y()))
        HOTSPOT_WIDGET.moveOtherWindowToAnchor(QUICK_TOUR_DLG.theDialog(), anchor)
    else:
        HOTSPOT_OVERLAY.offsetChanged.connect(_hotspotMoved)
        HOTSPOT_OVERLAY.animateOffset(QSize(newTopLeft.x(), newTopLeft.y()), _hotspotAnimationEnded)

def _centerHotspotOnWidget(targetWidget):
    global HOTSPOT_OVERLAY, HOTSPOT_WIDGET, QUICK_TOUR_DLG

    if targetWidget:
        pos = targetWidget.mapToGlobal(targetWidget.rect().center())
        offset = pos - getMainMayaWindow().frameGeometry().topLeft()
        _moveHotspotCenter(offset, AnchorType.BottomRight)
    else:
        HOTSPOT_OVERLAY.show(False)

def _placeOnViewport():
        global HOTSPOT_OVERLAY, HOTSPOT_WIDGET, QUICK_TOUR_DLG
        viewport = find.findViewports()
        dlgRect = QUICK_TOUR_DLG.theDialog().rect()

        pos = viewport.mapToGlobal(viewport.rect().bottomRight())
        overlayPos = pos - getMainMayaWindow().frameGeometry().topLeft()
        overlayPos -= dlgRect.bottomRight()
        _moveHotspotCenter(overlayPos, AnchorType.BottomRight)

def _placeOnChannelBox():
    channelBox = find.findChannelBox()
    pos = channelBox.mapToGlobal(QPoint(0,0))
    overlayPos = pos - getMainMayaWindow().frameGeometry().topLeft()
    overlayPos += QPoint(DPIScale(16), DPIScale(64))
    _moveHotspotCenter(overlayPos, AnchorType.BottomLeft)

def _quickTourStepChanged(dialog, step):
    global CURRENT_STEP
    if CURRENT_STEP == 11 and step == 11:
        _quickTourClosed(None)
        endDialog = GreatJobDialog(getMainMayaWindow())
        hinDropShadow = HIGDropShadow(getMainMayaWindow(), endDialog)
        endDialog.showAndRaise()
        return

    CURRENT_STEP  = step
    if step >= 0 and step < 12:
        dialog.titleLabel.setText(_TITLES[step])
        dialog.textArea.setText(_BODIES[step])

        path = _getResourcePath(_MOVIES[step])
        dialog.setMovie(_getResourcePath(_MOVIES[step]))
        dialog.adjustSize()
        dialog.theDialog().adjustSize()

        dialog.button(0).setText(BACK_BUTTON)
        if step < 11:
            dialog.button(1).setText(NEXT_BUTTON)
        else:
            dialog.button(1).setText(DONE_BUTTON)
        dialog.button(0).setEnabled(step > 0)

    if step == 0:
        shelfButton = find.findShelfButton("Polygons", "CreatePolygonSphere")
        _centerHotspotOnWidget(shelfButton)

    if step == 1:
        shelfButton = find.findShelfButton("Polygons", "OpenContentBrowser")
        _centerHotspotOnWidget(shelfButton)

    if step == 2:
        _placeOnViewport()

    if step == 3:
        _placeOnViewport()

    if step == 4:
        tool = find.findToolboxToolButton("selectTool")
        _centerHotspotOnWidget(tool)

    if step == 5:
        tool = find.findToolboxToolButton("moveTool")
        _centerHotspotOnWidget(tool)

    if step == 6:
        tool = find.findToolboxToolButton("rotateTool")
        _centerHotspotOnWidget(tool)

    if step == 7:
        tool = find.findToolboxToolButton("scaleTool")
        _centerHotspotOnWidget(tool)

    if step == 8:
        _placeOnChannelBox()

    if step == 9:
        modeButton = find.findStatusLineButton("selectBtnObject")
        _centerHotspotOnWidget(modeButton)

    if step == 10:
        modeButton = find.findStatusLineButton("selectBtnComponent")
        _centerHotspotOnWidget(modeButton)

    if step == 11:
        tool = find.findSearchToolIcon()
        _centerHotspotOnWidget(tool)


class TutorialArea(QWidget):
    def __init__(self,  parent=None):
        super(TutorialArea, self).__init__(parent)

        margin = DPIScale(16)

        def setLabel(label, font):
            label.setAutoFillBackground(False)
            label.setAttribute(Qt.WA_TransparentForMouseEvents, True)
            label.setProperty("fontstyle", font)

        hbox = QHBoxLayout()
        vbox = QVBoxLayout()
        hbox.setSpacing(0)
        hbox.setContentsMargins(0, 0, 0, 0)
        vbox.setSpacing(16)

        firstLine = QLabel(BASIC_SKILLS)
        setLabel(firstLine, "title")

        secondLine = QLabel(IN_APP_TUTORIALS)
        setLabel(secondLine, "H2")

        vbox.addWidget(firstLine)
        vbox.addWidget(secondLine)
        hbox.addLayout(vbox)

        hbox.setContentsMargins(margin, margin, margin, margin)
        self.setLayout(hbox)
        self.hover = False

    def sizeHint(self):
        size = super(TutorialArea, self).sizeHint()
        size.setWidth(size.width() + DPIScale(100))
        return size

    def enterEvent(self, event):
        super(TutorialArea, self).enterEvent(event)
        self.hover = True
        self.update()

    def leaveEvent(self, event):
        super(TutorialArea, self).leaveEvent(event)
        self.hover = False
        self.update()

    def paintEvent(self, event):
        thisRect = self.rect()
        painter = QPainter(self)
        painter.save()
        painter.setRenderHint(QPainter.Antialiasing)

        pen = QPen(Qt.NoPen)
        painter.setPen(pen)

        brush = QBrush(QColor("#2E2E2E") if self.hover else QColor("#393939"))
        painter.setBrush(brush)
        painter.drawRoundedRect(thisRect, DPIScale(3), DPIScale(3))

        whitePen = QPen(QColor("#F5F5F5"), 2)
        center = thisRect.center()
        right = thisRect.right() - DPIScale(16)
        arrow = DPIScale(4)
        painter.setPen(whitePen)

        painter.drawLine(right-arrow, center.y()-arrow, right, center.y())
        painter.drawLine(right, center.y(), right-arrow, center.y()+arrow)

        painter.restore()

    def mouseReleaseEvent(self, event: QMouseEvent) -> None:
        self.parent().tutorialClicked()


class GreatJobDialog(HIGDialog):

    def __init__(self,  parent=None):
        super(GreatJobDialog, self).__init__(parent)

        self.setMinimumWidth(DPIScale(240))
        margin = DPIScale(16)

        topBox = QVBoxLayout()
        topBox.setContentsMargins(margin, 0, margin, margin)
        topBox.setSpacing(margin/2)

        title = QLabel(GREAT_JOB)
        title.setProperty("fontstyle", "H1")
        title.setAlignment(Qt.AlignHCenter)
        topBox.addWidget(title)

        desc = QLabel(CONTINUE_LEARNING)
        desc.setAlignment(Qt.AlignHCenter)
        desc.setProperty("fontstyle", "normal")
        topBox.addWidget(desc)

        tutorials = TutorialArea(self)
        topBox.addWidget(tutorials)

        self.mainLayout.setSpacing(0)
        self.mainLayout.addLayout(topBox)

        buttonLayout = QHBoxLayout()
        buttonLayout.setSpacing(DPIScale(8))
        buttonLayout.setContentsMargins(margin, 0, margin, margin)

        leftButton = QPushButton(SEE_ALL_TUTORIALS)
        leftButton.setProperty("buttontype", "Outline")
        leftButton.clicked.connect(self.allTutorialsClicked)

        rightButton = QPushButton(END_QUICK_TOUR)
        rightButton.setProperty("buttontype", "Solid")
        rightButton.setDefault(True)
        rightButton.clicked.connect(self.endTourClicked)

        buttonLayout.addSpacing(DPIScale(32))
        buttonLayout.addWidget(leftButton)
        buttonLayout.addWidget(rightButton)
        self.mainLayout.addLayout(buttonLayout)

    def tutorialClicked(self):
        self.theDialog().destroy()
        self.theDialog().deleteLater()
        maya.cmds.OpenBasicsTutorial()

    def allTutorialsClicked(self):
        self.theDialog().destroy()
        self.theDialog().deleteLater()
        maya.cmds.appHome(edit=True, visible=1, setTab="GettingStarted")

    def endTourClicked(self):
        self.theDialog().destroy()
        self.theDialog().deleteLater()

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
