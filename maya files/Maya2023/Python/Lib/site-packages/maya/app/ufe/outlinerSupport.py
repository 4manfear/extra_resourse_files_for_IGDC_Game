"""
UFE Outliner support. 
"""

import maya.cmds as cmds
import maya.internal.ufeSupport.ufeCmdWrapper as ufeCmd

import ufe

from functools import partial

class MenuParentGuardCtx(object):
    '''Sets and restores the menu parent.'''
    def __init__(self, parent=None):
        self._parent = parent

    def __enter__(self):
        if self._parent is not None:
            cmds.setParent(self._parent, menu=True)

    def __exit__(self, type, value, traceback):
        cmds.setParent('..', menu=True)

def doOp(contextOps, itemPath, *values, **kwArgs):
    # values is a tuple of a single False value, and kwArgs is empty.
    cmd = contextOps.doOpCmd(itemPath)
    if cmd is not None:
        ufeCmd.execute(cmd)

def buildContextMenuWrapper(parentMenu, contextOps, itemPath, *values, **kwArgs):
    with MenuParentGuardCtx(parentMenu):
        buildContextMenu(contextOps, itemPath)

def buildContextMenu(contextOps, itemPath):
    '''Build the menu for the given itemPath'''

    contextItems = contextOps.getItems(itemPath)

    radioMenuItemColl = ''
    for contextItem in contextItems:
        # If the context item has children, we append it to the item path
        # to build the next level of menus.
        nextItemPath = itemPath + [contextItem.item]
        if contextItem.separator:
            i = cmds.menuItem(divider=True)
            if contextItem.label:
                cmds.menuItem(i, edit=True, dividerLabel=contextItem.label)
        elif contextItem.hasChildren:
            with MenuParentGuardCtx():
                menu = cmds.menuItem(label=contextItem.label, subMenu=True)
                cmds.menuItem(menu, edit=True, postMenuCommandOnce=True,
                              postMenuCommand=partial(buildContextMenuWrapper, menu, 
                                                      contextOps, nextItemPath))
                if contextItem.image:
                    cmds.menuItem(menu, edit=True, image=contextItem.image)
        else:
            kw = {}
            if contextItem.checkable:
                kw['radioButton' if contextItem.exclusive else \
                   'checkBox'] = contextItem.checked
            # In order to create radio menu items you need a collection.
            if contextItem.exclusive and not radioMenuItemColl:
                radioMenuItemColl = cmds.radioMenuItemCollection()
            i = cmds.menuItem(**kw)
            cmds.menuItem(i, edit=True, label=contextItem.label, 
                          command=partial(doOp, contextOps, nextItemPath))
            if contextItem.image:
                cmds.menuItem(i, edit=True, image=contextItem.image)

def buildNonMayaContextMenu(pathStr):
    '''Build the context menu for non-Maya items.

    As input we can be given either a full ufe path string or just the Maya
    node name.

    Returns 1 when the input item is a non-Maya item, 0 otherwise.
    '''

    # If string is empty or it's a Maya item, nothing to do.
    if not pathStr or cmds.objExists(pathStr):
        return 0

    # Get the scene item from the input path string.
    try:
        p = ufe.PathString.path(pathStr)
        sceneItem = ufe.Hierarchy.createItem(p)
    except RuntimeError:
        sceneItem = None

    contextOps = ufe.ContextOps.contextOps(sceneItem) if sceneItem else None
    if contextOps is None:
        # No context ops interface, nothing to display
        return 1

    # Start at the top level of ops.
    buildContextMenu(contextOps, [])

    return 1

def buildMayaContextMenu(pathStr):
    '''Add any UFE special context menu for Maya items.

    As input we can be given either a full ufe path string or just the Maya
    node name.
    '''

    # If it's not a Maya item, nothing to do.
    if not cmds.objExists(pathStr):
        return

    # Get the scene item from the input path string.
    fullPath = cmds.ls(pathStr, long=True)
    if (len(fullPath)) == 1:
        try:
            p = ufe.PathString.path(fullPath[0])
            sceneItem = ufe.Hierarchy.createItem(p)
        except:
            sceneItem = None

    # Only handle Maya items (which it should be because of objExists above).
    if sceneItem and sceneItem.runTimeId() == 1:
        contextOps = ufe.ContextOps.contextOps(sceneItem)
        if contextOps is not None:
            # Start at the top level of ops.
            buildContextMenu(contextOps, [])

def buildOutlinerDisplayMenu(outlinerEd, currentMenu, startUfeItem, endUfeItem):
    '''Add any special UFE items to the Outliner Display menu.
    '''

    def setDisplayUfeFilterValue(outlinerEd, ufeRuntimeName, filter, value):
        cmds.outlinerEditor(outlinerEd, edit=True, ufeFilter=(ufeRuntimeName, filter), ufeFilterValue=value)

    # Remove existing UFE menu items which are between the two input items.
    # We do this because UFE runtimes (in plugins) can be registered and
    # unregistered at any time. This menu section is dynamic.
    itemArray = cmds.menu(currentMenu, query=True, itemArray=True)
    ufeStartIndex = itemArray.index(startUfeItem)
    ufeEndIndex = itemArray.index(endUfeItem)
    itemsToDelete = [(currentMenu + '|' + s) for s in itemArray[ufeStartIndex+1:ufeEndIndex]]
    if itemsToDelete:
        cmds.deleteUI(itemsToDelete, menuItem=True)

    # Add items using the children filters from the hierarchy handler of all
    # UFE runtimes (except Maya's).
    ufeRunTimeMgr = ufe.RunTimeMgr.instance()
    for rid in ufeRunTimeMgr.getIds():
        # Skip Maya's runtime.
        if rid == 1:
            continue

        ufeUIInfo = ufe.UIInfoHandler.uiInfoHandler(rid)

        # Add a long divider with label for this UFE runtime.
        insertAfterItem = cmds.menuItem(parent=currentMenu,
                                        divider=True,
                                        label=ufeUIInfo.getLongRunTimeLabel(),
                                        version=2022,
                                        insertAfter=startUfeItem)

        # Add all the child filters for this UFE runtime.
        hierHndlr = ufeRunTimeMgr.hierarchyHandler(rid)
        childFilters = hierHndlr.childFilter()
        ufeRuntimeName = ufeRunTimeMgr.getName(rid)
        for cf in childFilters:
            currFilterValue = cmds.outlinerEditor(outlinerEd, query=True, ufeFilter=(ufeRuntimeName, cf.name), ufeFilterValue=True)
            ui = cmds.menuItem(parent=currentMenu,
                               label=cf.label,
                               checkBox=currFilterValue,
                               version=2022,
                               insertAfter=insertAfterItem)
            cb = partial(setDisplayUfeFilterValue, outlinerEd, ufeRuntimeName, cf.name)
            cmds.menuItem(ui, edit=True, command=cb)
            insertAfterItem = ui
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
