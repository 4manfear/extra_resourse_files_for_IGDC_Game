import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
Classes managing the handling of DOT format files, including the external graphViz tool
'''

from builtins import object
__all__ = [ 'GraphVizManager'
          ]

import maya.cmds as cmds
from maya.debug.em_debug_utilities import convert_exception_to_unicode

#======================================================================
class GraphVizManager(object):
    '''Class to manage operations performed by the external graphViz tool'''
    def __init__(self, use_system_graphviz):
        '''Initialize the location of the graphviz command path for later use'''
        from sys import argv as sys_argv
        self.graphviz_path = ''
        if not use_system_graphviz:
            from os import environ as os_environ
            self.graphviz_path = os_environ.get('MAYA_GRAPHVIZ_PATH', '')
            if not self.graphviz_path:
                from os import path as os_path
                # MacOS distribution structure is slightly different.
                if cmds.about(macOS=True):
                    maya_path = os_path.dirname(sys_argv[0])
                    maya_bin_path = os_path.normpath(os_path.join(maya_path, '../bin'))
                else:
                    maya_bin_path = os_path.dirname(sys_argv[0])
                self.graphviz_path = os_path.join(maya_bin_path, 'graphviz')

    #----------------------------------------------------------------------
    def get_command(self, command_name):
        """
        Build a string for the Graphviz command to run.
        """
        from os import path as os_path
        return os_path.join(self.graphviz_path, command_name)

    #----------------------------------------------------------------------
    def get_version(self):
        """
        :return: output from the graphviz command "dot -V"
        """
        command_dot = [self.get_command('dot'), '-V']
        success, output = self.run_command(command_dot)
        return output[1] if success else None

    #----------------------------------------------------------------------
    @staticmethod
    def run_command(command_argv, stdin=None, stdout=None):
        """
        Run a Graphviz command and handle errors.
        """
        from subprocess import PIPE as subprocess_PIPE, Popen as subprocess_Popen
        params = {'stderr': subprocess_PIPE, 'stdin': subprocess_PIPE, 'stdout': subprocess_PIPE}
        if stdin:
            params['stdin'] = stdin
        if stdout:
            params['stdout'] = stdout

        from os import path as os_path
        try:
            gv_process = subprocess_Popen(command_argv, **params)
            output = gv_process.communicate()
            return_code = gv_process.returncode

            # MEL error command raises an exception, so it has to be outside of the try/except block.
            if return_code:
                message = maya.stringTable['y_maya_debug_GraphVizManager.kErrorGraphvizExecution' ]
                raise RuntimeError( message.format( os_path.basename(command_argv[0]), return_code, output[1] ) )

        except Exception as ex:
            message = maya.stringTable['y_maya_debug_GraphVizManager.kErrorGraphviz' ]
            cmds.error(message.format(os_path.basename(command_argv[0]), command_argv[0], convert_exception_to_unicode(ex)))
            return False, None

        return True, output

    #----------------------------------------------------------------------
    def convert_dot_to(self, input_file_name, output_file_name, transitive_reduction):
        """
        Convert a DOT file to PDF using Graphviz.
        :param input_file_name: Name of file where the .dot file resides
        :param output_file_name: Name of file where the .pdf/.svg/.png file should be generated, must be one of the [GraphViz supported format](https://www.graphviz.org/doc/info/output.html)
        """
        temp_file = None
        from os import path as os_path
        if transitive_reduction:
            (root, ext) = os_path.splitext(input_file_name)
            output_tred_file_name = root + '.tr' + ext
            command_tred = [self.get_command('tred')]

            with open(input_file_name, 'r') as input_file:
                with open(output_tred_file_name, 'w') as output_tred_file:
                    try:
                        if not self.run_command(command_tred, stdin=input_file, stdout=output_tred_file)[0]:
                            return False
                    except Exception:
                        return False

            # If everything went fine, replace input file to convert.
            if os_path.isfile( output_tred_file_name ):
                temp_file = output_tred_file_name

            if not os_path.isfile(output_tred_file_name) or os_path.getsize(output_tred_file_name) == 0:
                cmds.warning( maya.stringTable['y_maya_debug_GraphVizManager.kEmptyTredFile' ] )
            else:
                input_file_name = output_tred_file_name

        (_,file_format) = os_path.splitext(os_path.basename(output_file_name))
        file_format = file_format[1:]
        success = True
        try:
            command_dot = [self.get_command('dot'), '-T{}'.format(file_format), input_file_name, '-o', output_file_name]
            if not self.run_command(command_dot)[0]:
                success = False
        except Exception:
            success = False
        finally:
            # Safely remove the intermediate file, if it was introduced
            if temp_file is not None:
                try:
                    from os import remove as os_remove
                    os_remove( temp_file )
                except OSError:
                    pass

        return success


#======================================================================
class DotFormatManager(object):
    '''Class to manage interactions with the DOT graph visualization format'''
    def __init__(self):
        pass

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
