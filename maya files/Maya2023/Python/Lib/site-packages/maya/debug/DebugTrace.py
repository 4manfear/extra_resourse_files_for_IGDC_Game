import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
Debug trace class. Make it a base class to your class to add debugging capabilities to it:

    class A(DebugTrace):
        def __init__(self):
            super( self.__class__, self ).__init__()
        def inner(self):
            self.dbg( "Inner method" )
        def outer(self):
            self.dbg( "Outer method" )
            self.inner()

The trace output for these commands:
    a = A()
    a.debugging = True
    a.outer()
will be:
    DBG: Outer method
    DBG:     Inner method
'''
from builtins import object
__all__ = [r'DebugTrace']

class DebugTrace(object):
    '''
    Simple base class that lets you selectively debug code, with hierarchical
    printing capabilities for more readability.

    The output lines are tagged with a 3 character identifier line to make them
    easier to differentiate in your output.
    '''
    def __init__(self):
        self.__indent_string = ''
        self.__enabled = False
        self.__indent_level = False
        self.__include_class_name = True

    #----------------------------------------------------------------------
    def indent_string(self):
        '''Returns the string to use for indentation. Includes the class name if requested'''
        return r'{}{}'.format(self.__indent_string, self.__class__.__name__ if self.__include_class_name else '')

    #----------------------------------------------------------------------
    def dbg(self, message):
        '''
        Print out the message if debugging is enabled.
        :param message: Message to print
        '''
        if self.__enabled:
            print( maya.stringTable['y_maya_debug_DebugTrace.kDbg' ].format( self.indent_string(), message ) )

    #----------------------------------------------------------------------
    def dbg_err(self, message):
        '''
        Print out the error message if debugging is enabled.
        :param message: Message to print
        '''
        if self.__enabled:
            print( maya.stringTable['y_maya_debug_DebugTrace.kDbgErr' ].format( self.indent_string(), message ) )

    #----------------------------------------------------------------------
    def dbg_warn(self, message):
        '''
        Print out the arning message if debugging is enabled.
        :param message: Message to print
        '''
        if self.__enabled:
            print( maya.stringTable['y_maya_debug_DebugTrace.kDbgWarn' ].format( self.indent_string(), message ) )

    #----------------------------------------------------------------------
    def err(self, message):
        '''
        Print out the error message whether debugging is enabled or not.
        :param message: Message to print
        '''
        print( maya.stringTable['y_maya_debug_DebugTrace.kErr' ].format( self.indent_string(), message ) )

    #----------------------------------------------------------------------
    def warn(self, message):
        '''
        Print out the arning message whether debugging is enabled or not.
        :param message: Message to print
        '''
        print( maya.stringTable['y_maya_debug_DebugTrace.kWarn'].format( self.indent_string(), message ) )

    #----------------------------------------------------------------------
    class DebugSection(object):
        '''
        Helper class to scope debugging sections. Use it like this:

            with DebugSection("New section", debug_trace):
                debug_trace.dbg( "Hello" )
            debug_trace.dbg( "Goodbye" )

        which would yield this output, when the trace is enabled:

            New section
                Hello
            Goodbye
        '''
        def __enter__(self):
            '''
            Start a new debugging section with the given title.
            Prints the title then increments indentation
            :param title: Name of the new section
            '''
            # Nothing to do here, __init__ handles it
            pass

        def __exit__(self,exit_type,value,traceback): # pylint: disable=redefined-builtin
            '''
            Terminates a debugging section by decrementing the indentation.
            '''
            self.end_section()

        def end_section(self):
            '''
            Terminate an active section - only use this if you manually create
            a DebugSection rather than using the with() syntax
            '''
            self.trace.indent_level = self.trace.indent_level - 1

        def __begin_section(self, title):
            '''
            Start a new section - used both through __init__ and __enter__ entry points.
            :param title: Title of the new section
            '''
            self.trace.indent_level = self.trace.indent_level + 1
            self.trace.dbg( title )

        def __init__(self, title, trace):
            '''
            Initialize a new section manually
            '''
            self.trace = trace
            self.trace.dbg( title )
            self.trace.indent_level = trace.indent_level + 1

    #----------------------------------------------------------------------
    def section(self, title):
        '''
        Start a new debug section, returning the section object for manual closing.
        :param title: Title of the new section
        Be careful to match the starts and ends or the indentation level will
        go wonky as no sanity checks are performed on it.

            dbg.debugging( True )
            section = dbg_section( "New section" )
            dbg.dbg( "Hello" )
            section.end_section()
        or
            with dbg_section( "New section" ) as section:
                dbg.dbg( "Hello" )
        '''
        return DebugTrace.DebugSection( title, self )

    #----------------------------------------------------------------------
    #
    # Use the indent_level as a property so that __indent_string is kept up to date
    #
    @property
    def indent_level(self):
        '''Retrieve the internal indentation level'''
        return self.__indent_level

    @indent_level.setter
    def indent_level(self, new_level):
        '''
        Set the internal indentation level and update the indentation string.
        :param new_level: New level of indentation to use
        '''
        self.__indent_level = new_level
        self.__indent_string = maya.stringTable['y_maya_debug_DebugTrace.kSpacing'] * new_level

    #----------------------------------------------------------------------
    #
    # Enable and disable debugging through this property
    #
    @property
    def debugging(self):
        '''Retrieve the internal enabled state'''
        return self.__enabled

    @debugging.setter
    def debugging(self, new_state):
        '''
        Set the internal enabled state
        :param new_state: New enabled state
        '''
        self.__enabled = new_state

    #----------------------------------------------------------------------
    #
    # Enable and disable the inclusion of the class name in output through this property
    #
    @property
    def include_class_name(self):
        '''Retrieve the internal class inclusion state'''
        return self.__include_class_name

    @include_class_name.setter
    def include_class_name(self, new_state):
        '''
        Set the internal class inclusion state
        :param new_state: New class inclusion state
        '''
        self.__include_class_name = new_state

#######################################################################
if __name__ == r'__main__':
    import unittest
    import sys
    from io import StringIO

    class TestDebugTrace(unittest.TestCase):
        '''
        Unit tests for the DebugTrace class.
        '''
        #----------------------------------------------------------------------
        def setUp(self):
            '''Redirect stdout to a local variable'''
            self.old_stdout = sys.stdout
            sys.stdout = self.result = StringIO()

        #----------------------------------------------------------------------
        def tearDown(self):
            '''Restore stdout'''
            sys.stdout = self.old_stdout

        #----------------------------------------------------------------------
        def test_simple_output(self):
            '''Test the normal string output with the trace on and off'''
            dbg = DebugTrace()
            # Test 1 - Not enabled by default
            dbg.dbg( r'Hello' )
            self.assertEqual( self.result.getvalue(), "" )

            # Test 2 - Simple string
            dbg.debugging = True
            dbg.dbg( maya.stringTable['y_maya_debug_DebugTrace.kHello' ] )
            self.assertEqual( self.result.getvalue(), maya.stringTable['y_maya_debug_DebugTrace.kHelloResult' ] )

            # Test 3 - Joined string
            dbg.dbg( maya.stringTable['y_maya_debug_DebugTrace.kGoodbye' ] )
            self.assertEqual( self.result.getvalue(), maya.stringTable['y_maya_debug_DebugTrace.kGoodbyeResult' ] )

        #----------------------------------------------------------------------
        @staticmethod
        def inner_section(dbg):
            '''
            Add an inner section detail to debugging output.
            :param dbg: Trace object to add section details
            '''
            with dbg.section( maya.stringTable['y_maya_debug_DebugTrace.kInnerSection' ]):
                dbg.dbg( maya.stringTable['y_maya_debug_DebugTrace.kCore' ] )

        #----------------------------------------------------------------------
        def test_section_output(self):
            '''Test the normal string output inside sections'''
            dbg = DebugTrace()
            # Test 1 - Manual section
            dbg.debugging = True
            lines_expected = [ maya.stringTable['y_maya_debug_DebugTrace.kTest1' ]
                             , maya.stringTable['y_maya_debug_DebugTrace.kTest2' ]
                             , maya.stringTable['y_maya_debug_DebugTrace.kTest3' ]
                             , maya.stringTable['y_maya_debug_DebugTrace.kTest4' ]
                             , maya.stringTable['y_maya_debug_DebugTrace.kTest5' ]
                             ]
            with dbg.section(maya.stringTable['y_maya_debug_DebugTrace.kSection']):
                self.assertEqual( self.result.getvalue(), lines_expected[0] )
                dbg.dbg( maya.stringTable['y_maya_debug_DebugTrace.kInner' ] )
                self.assertEqual( self.result.getvalue(), "".join( lines_expected[0:2] ) )
                self.inner_section( dbg )
                self.assertEqual( self.result.getvalue(), "".join( lines_expected[0:4] ) )
            dbg.dbg( maya.stringTable['y_maya_debug_DebugTrace.kOuter' ] )
            self.assertEqual( self.result.getvalue(), "".join( lines_expected[0:5] ) )

    unittest.main()
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
