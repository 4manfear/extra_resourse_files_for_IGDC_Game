# File: ae_custom_locator.py
from maya.internal.common.ae.custom import CustomControl
from maya.internal.common.ae.template import plugAttr
from maya.internal.nodes.wire.ui_template import UITemplate
import maya.cmds as cmds
import re


class AttrFieldSliderData:
    def __init__(self, label, name, minV=0.0, maxV=1.0, st=0.1):
        # constant attributes
        self.label = label
        self.name = name
        self.min = minV
        self.max = maxV
        self.st = st
        # dynamic attributes, call setAttrSlidersIndex before using
        self.idxName = 0
        self.idxLabel = 0


class AttrFieldSlider(AttrFieldSliderData):
    def create(self, attr=None):
        name = self.__sliderName()
        label = self.__sliderLabel()
        if attr:
            cmds.attrFieldSliderGrp(name, min=self.min, max=self.max, s=self.st, label=label, at=attr)
        else:
            cmds.attrFieldSliderGrp(name, min=self.min, max=self.max, s=self.st, label=label)

    def edit(self, attr):
        name = self.__sliderName()
        label = self.__sliderLabel()

        cmds.attrFieldSliderGrp(
            name,
            e=True,
            min=self.min,
            max=self.max,
            s=self.st,
            label=label,
            at=attr)

    def exists(self):
        name = self.__sliderName()
        return cmds.attrFieldSliderGrp(name, ex=True)

    def delete(self):
        name = self.__sliderName()
        if cmds.attrFieldSliderGrp(name, ex=True):
            cmds.deleteUI(name)
            return True
        return False

    def __sliderName(self):
        return "{}{}".format(self.name, self.idxName)

    def __sliderLabel(self):
        return "{}[{}]".format(self.label, self.idxLabel)

#-------------------------------------------------------------------------------

SliderParam = AttrFieldSlider('Param', "locatorparm")
SliderPerc = AttrFieldSlider('Percent', "locatorperc", maxV=5.0)
SliderTwist = AttrFieldSlider('Twist', "locatortwist", -360, 360, 1)
SliderEnv = AttrFieldSlider('Envelope', "locatorenv", maxV=2.0)

AttrSliders = (SliderParam, SliderPerc, SliderTwist, SliderEnv)

def setAttrSlidersIndex(idxName, idxLabel=None):
    for slider in AttrSliders:
        slider.idxName = idxName
        slider.idxLabel = idxLabel

#-------------------------------------------------------------------------------

class AEwireLocatorControl(CustomControl):
    def buildControlUI(self):
        with UITemplate():
            attrName = plugAttr(self.plugName)
            self.columnLayout = cmds.columnLayout("{}Column".format(attrName))
            for i, wlp in enumerate(self.__wlpAttrs()):
                ind = self.__indLabel(wlp)
                setAttrSlidersIndex(idxName=i, idxLabel=ind)

                SliderParam.min, SliderParam.max = self.__curveMinMax(ind)

                with UITemplate():
                    wmConnections = self.__wmConnections(wlp)
                    if wmConnections:
                        textName = "locatortext{}".format(i)
                        cmds.text(textName, label=wmConnections[0])

                    for slider in AttrSliders:
                        slider.create()

                    cmds.separator('locator{}separator'.format(i))

            cmds.setParent("..")
        self.replaceControlUI()

    def replaceControlUI(self):
        with UITemplate():
            attrName = plugAttr(self.plugName)
            cmds.setParent("{}Column".format(attrName))
            oldCount = cmds.columnLayout(self.columnLayout, q=True, nch=True)
            wlpAttrs = self.__wlpAttrs()

            for i, wlp in enumerate(wlpAttrs):
                ind = self.__indLabel(wlp)
                setAttrSlidersIndex(idxName=i, idxLabel=ind)

                # param
                SliderParam.min, SliderParam.max = self.__curveMinMax(ind)

                wmConnections = self.__wmConnections(wlp)
                if wmConnections:
                    attr = "{}.pr".format(wmConnections[0])
                else:
                    attr = "{}{}".format(self.nodeName, wlp)

                textName = "locatortext{}".format(i)
                if SliderParam.exists():
                    cmds.text(textName, e=True, label=wmConnections[0])
                    SliderParam.edit(attr)
                else:
                    with UITemplate():
                        if wmConnections:
                            cmds.text(textName, label=wmConnections[0])
                        SliderParam.create(attr)

                # percentage
                attr = "{}.wlpc[{}]".format(self.nodeName, ind)
                connections = cmds.listConnections(attr, p=True)
                if connections:
                    attr = connections[0]

                if SliderPerc.exists():
                    SliderPerc.edit(attr)
                else:
                    with UITemplate():
                        SliderPerc.create(attr)

                # twist
                attr = "{}.wlt[{}]".format(self.nodeName, ind)
                if SliderTwist.exists():
                    SliderTwist.edit(attr)
                else:
                    with UITemplate():
                        SliderTwist.create(attr)

                # envelope
                attr = "{}.wle[{}]".format(self.nodeName, ind)
                if SliderEnv.exists():
                    SliderEnv.edit(attr)
                else:
                    with UITemplate():
                        SliderEnv.create(attr)
                        cmds.separator('locator{}separator'.format(i))

            for i in range(len(wlpAttrs), oldCount):
                setAttrSlidersIndex(idxName=i)
                textName = "locatortext".format(i)
                if cmds.text(textName, ex=True):
                    cmds.deleteUI(textName)

                SliderParam.delete()
                SliderPerc.delete()
                SliderTwist.delete()

                if SliderEnv.delete():
                    sepName = 'locator{}separator'.format(i)
                    if cmds.separator(sepName, ex=True):
                        cmds.deleteUI(sepName)

            cmds.setParent("..")

    def __indLabel(self, wlp):
        # extracts int(index) from "someString[index]"
        regex = "\[([^[\]]*)\]"
        indices = re.findall(regex, wlp)
        return int(indices[0])

    def __curveMinMax(self, ind):
        wireIndex = int(ind / 100)
        connections = cmds.listConnections("{}.dw[{}]".format(self.nodeName, wireIndex))
        cMin = cmds.getAttr("{}.minValue".format(connections[0]))
        cMax = cmds.getAttr("{}.maxValue".format(connections[0]))
        return cMin, cMax

    def __wlpAttrs(self):
        wlpAttrs = cmds.listAttr("{}.wlp".format(self.nodeName), m=True)
        return wlpAttrs if wlpAttrs else []

    def __wmConnections(self, wlp):
        connections = cmds.listConnections("{}.{}".format(self.nodeName, wlp))
        return connections if connections else []
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
