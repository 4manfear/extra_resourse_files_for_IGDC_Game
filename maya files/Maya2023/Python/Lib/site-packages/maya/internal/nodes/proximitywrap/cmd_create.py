"""
proximitywrap -
    Module containing functions to create setup with the proximityWrap nodes
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


from builtins import object
import maya.cmds
import maya.api.OpenMaya as oma
import maya.internal.common.cmd.deformer as cmddeformer
import maya.internal.common.utils.ui as ui_utils
import maya.internal.common.utils.connections as con_utils

labelWrapModeOffset = maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapLabelOptWrapModeOffset' ]
labelWrapModeSurface = maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapLabelOptWrapModeSurface' ]
labelWrapModeSnap = maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapLabelOptWrapModeSnap' ]
labelWrapModeRigid = maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapLabelOptWrapModeRigid' ]
labelWrapModeGlobal = maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapLabelOptWrapModeMix' ]
annotWrapMode = maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapAnnotWrapMode' ]

def setWeightLayerInfo(componentFalloff, layerIndex, boneName):
    wlainfo = u'{}.weightInfoLayers[{}]'.format(componentFalloff, layerIndex)
    maya.cmds.setAttr(u'{}.defaultWeight'.format(wlainfo), 0.0)
    maya.cmds.setAttr(u'{}.layerName'.format(wlainfo), str(boneName), type="string")

def getConnectedBones(skinCluster):
    bonesIdx = maya.cmds.getAttr(skinCluster + ".matrix", multiIndices=True)
    return [ (i,
     oma.MMatrix(maya.cmds.getAttr("%s.bindPreMatrix[%d]"%(skinCluster, i))).inverse(),
     maya.cmds.listConnections("%s.matrix[%d]"%(skinCluster,i))[0]) for i in bonesIdx]

def copySettingFromSkinCluster(skinCluster, pw):
    attrsMapSCToPW = {("%s.maxInfluences"%skinCluster): "%s.maxDrivers"%pw}
    for (attrSC, attrPW) in attrsMapSCToPW.items():
        maya.cmds.setAttr(attrPW, maya.cmds.getAttr(attrSC))

    maya.cmds.setAttr("%s.falloffRamp[0].falloffRamp_Interp"%pw, 1)



def createProxWrapFromSkinCluster(skinCluster):
    '''convert a skinCluster node into a equivalent proximityWrap one'''
    verticesIndex = maya.cmds.getAttr(skinCluster + ".weightList", multiIndices=True)
    nbBones = max(maya.cmds.getAttr(skinCluster + ".matrix", multiIndices=True))

    #create transferFalloff Transfer
    geoms = maya.cmds.deformer(skinCluster, q=True, geometry=True)
    if geoms is None or len(geoms) == 0:
        return
    geom = geoms[0]

    originalShape = maya.cmds.deformableShape(geom, og=True)[0]
    originalShapeName = originalShape.split(""".""")[0]
    originalShapeWorld = """%s.%s"""%(originalShapeName, maya.cmds.deformableShape(originalShapeName, wso=True)[0])
    originalShapeLocal = """%s.%s"""%(originalShapeName, maya.cmds.deformableShape(originalShapeName, lso=True)[0])

    pw = maya.cmds.createNode("proximityWrap")
    maya.cmds.setAttr("%s.wrapMode"%pw, 4)#4 is cluster

    bones = getConnectedBones(skinCluster)

    #setup bind matrix from skinCluster
    #setup world Matrix from joints
    idBoneLookup = dict()
    for idx, bindM, boneName in bones:
        maya.cmds.setAttr("%s.drivers[%d].driverClusterRestMatrix"%(pw,idx), bindM, type="matrix")
        maya.cmds.connectAttr("%s.wm[0]"%boneName, "%s.drivers[%d].driverClusterMatrix"%(pw,idx))
        maya.cmds.getAttr('{}.perInfluenceWeights[{}].perInfluenceVertexWeights'.format(skinCluster, idx))
        idBoneLookup[idx] = boneName

    componentFalloff = maya.cmds.createNode("componentFalloff")
    transferFalloff = maya.cmds.createNode("transferFalloff")

    maya.cmds.connectAttr(originalShapeLocal, "%s.weightedGeometry"%(componentFalloff))
    maya.cmds.connectAttr("%s.weightedGeometry"%(componentFalloff), "%s.weightedGeometry"%(transferFalloff))
    maya.cmds.disconnectAttr(originalShapeLocal, "%s.weightedGeometry"%(componentFalloff)) #let the Geometry lives on attribute without the live connection

    maya.cmds.connectAttr(u"%s.perInfluenceWeights"%(skinCluster), "%s.weightLayers"%(componentFalloff))
    maya.cmds.connectAttr("%s.outputWeightFunction"%(componentFalloff), "%s.weightFunction"%(transferFalloff))

    for idx, boneName in idBoneLookup.items():
        setWeightLayerInfo(componentFalloff, idx, boneName if boneName else "boneLayer_{}".format(idx))

    maya.cmds.connectAttr("%s.outputWeightFunction"%(transferFalloff), "%s.driverWeightFunction"%(pw))


    maya.cmds.connectAttr(originalShape, "%s.originalGeometry[0]"%pw)

    #connect the input to what the skinCluster used as input
    src = con_utils.getSourcePlug("%s.input[0].inputGeometry"%skinCluster)
    if src is None:
        src = originalShapeWorld
    maya.cmds.connectAttr(src, "%s.input[0].inputGeometry"%pw)

    #connect to output shape
    out = maya.cmds.listConnections("%s.outputGeometry[0]"%skinCluster)
    if out:
        maya.cmds.connectAttr("%s.outputGeometry[0]"%pw, "%s.inMesh"%out[0], force=True)

    maya.cmds.setAttr("%s.input[0].componentTagExpression"%(pw), "*", type="string")



    ###copy Setting
    copySettingFromSkinCluster(skinCluster, pw)

    maya.cmds.delete(skinCluster)
    return pw

# ------------------------------------------------------------------------------
class eWrapMode(object):
    kOffset = 0
    kSurface = 1
    kSnap = 2
    kRigid = 3
    kGlobal = 100

# ------------------------------------------------------------------------------
# Command
# ------------------------------------------------------------------------------
class Command(cmddeformer.Command):
    def __init__(self):
        super(Command, self).__init__()

        self.commandName = 'ProximityWrap'
        self.commandHelpTag	= 'ProximityWrap'
        self.commandDescription = maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapCommandDescription' ]
        self.commandTitle = maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapCommandTitle' ]
        self.optionVarCategory = 'Deform.Proximity Wrap'
        self.optionVarPrefix = 'ProximityWrap'
        self.optionVarDefaults.update( {
            'wrapMode': eWrapMode.kSurface,
            'maxDrivers': 5,
            'smoothInfluences': 0,
            'smoothNormals': 0,
            'falloffScale': 1.0
            } )


    @classmethod
    def convertSkinCluster(cls, skinClusterName):
        '''ProximityWrap deformer converstion from SkinCluster
        '''
        return createProxWrapFromSkinCluster(skinClusterName)


    @classmethod
    def command(cls, **kwargs):
        '''ProximityWrap deformer command
        '''
        returnedNodes = list()

        # Create the deformer node using the generic command
        result = cmddeformer.Command.createDeformer(deformerType='proximityWrap', **kwargs)
        if result is not None:
            deformerNode = result[0]
            settableAttrs = [ 'wrapMode',
                              'maxDrivers',
                              'smoothInfluences',
                              'smoothNormals',
                              'falloffScale' ]
            cls.setNodeAttributes(deformerNode, kwargs, settableAttrs)

            returnedNodes.append(deformerNode)

        return cls.finalizeCommand(returnedNodes)

    def addBasicDeformerDialogWidgets(self):

        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}
        with ui_utils.AttributeLayoutManager():
            opts = [ (labelWrapModeOffset, eWrapMode.kOffset),
                    (labelWrapModeSurface, eWrapMode.kSurface),
                    (labelWrapModeSnap, eWrapMode.kSnap),
                    (labelWrapModeRigid, eWrapMode.kRigid) ]

            widget, lookup = ui_utils.createOptionMenu(maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapLabelWrapMode' ],
                annotation=annotWrapMode,
                options=opts)
            self.optionMenuGrp_labelToEnum['wrapMode'] = lookup
            widgetDict['wrapMode'] = (maya.cmds.optionMenuGrp, widget)

            widget = ui_utils.intSliderGrp(maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapLabelMaxDrivers' ], 0, 100,
                        annotation=maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapAnnotMaxDrivers' ])
            widgetDict['maxDrivers'] = (maya.cmds.intSliderGrp, widget)

            widget = ui_utils.floatSliderGrp(maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapLabelFalloffScale' ], 0.0, 100.0,
                        annotation=maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapAnnotFalloffScale' ])
            widgetDict['falloffScale'] = (maya.cmds.floatSliderGrp, widget)

            widget = ui_utils.intSliderGrp(maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapLabelSmoothInfluences' ], 0, 100,
                        annotation=maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapAnnotSmoothInfluences' ])

            widgetDict['smoothInfluences'] = (maya.cmds.intSliderGrp, widget)

            widget = ui_utils.intSliderGrp(maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapLabelSmoothNormals' ], 0, 100,
                        annotation=maya.stringTable['y_maya_internal_nodes_proximitywrap_cmd_create.kProximityWrapAnnotSmoothNormals' ])
            widgetDict['smoothNormals'] = (maya.cmds.intSliderGrp, widget)

        return widgetDict


# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
