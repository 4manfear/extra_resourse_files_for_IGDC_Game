"""
proximitypin -
    Module containing functions to create setup with the proximityPin node
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


from builtins import object
import maya.cmds

import maya.internal.common.cmd.base as cmdbase
import maya.internal.common.utils.message as msg_utils
import maya.internal.common.utils.geometry as geo_utils
import maya.internal.common.utils.transform as xfm_utils
import maya.internal.common.utils.ui as ui_utils
import maya.internal.nodes.proximitypin.node_interface as ifc
import maya.internal.nodes.common.pin.node_interface as pin_ifc
from maya.common.ui import ParentManager

annotPinProxSetupMode = maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinAnnotSetupMode' ]

# ------------------------------------------------------------------------------
#
# Enum types
#
# ------------------------------------------------------------------------------

class eCoordMode(object):
    kEdge = 0
    kUV = 1

# ------------------------------------------------------------------------------
class ePinProxSetupMode(object):
    kComponents = 0
    kTransforms = 1

# ------------------------------------------------------------------------------
#
# Command
#
# ------------------------------------------------------------------------------

class Command(cmdbase.Command):
    def __init__(self):
        super(Command, self).__init__()

        self.commandName = 'ProximityPin'
        self.commandHelpTag	= 'ProximityPin'
        self.commandDescription = maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinCommandDescription' ]
        self.commandTitle = maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kCommandTitle' ]
        self.defaultWindowSize = [500, 425]

        self.optionVarCategory = 'Animation.Constrain.Proximity Pin'
        self.optionVarPrefix = 'ProximityPin'
        self.optionVarDefaults = {
            'maintainOffset': True,
            'coordMode': eCoordMode.kEdge,
            'normalAxis': pin_ifc.eAxisType.kXAxis,
            'tangentAxis': pin_ifc.eAxisType.kYAxis,
            'outputConnect':  pin_ifc.eXformIO.kCurrent,
            'inputConnect':  pin_ifc.eXformIO.kLocator,
            'uvSetName' : '',
            'setupMode': ePinProxSetupMode.kTransforms  }

    @classmethod
    def command(cls,
                setupMode=ePinProxSetupMode.kTransforms,
                outputConnect=pin_ifc.eXformIO.kCurrent,
                inputConnect=pin_ifc.eXformIO.kLocator,
                maintainOffset=1,
                **kwargs):
        '''Create a proximityPin node
        '''
        returnedNodes = []

        selectedObjects = maya.cmds.ls(selection=True, objectsOnly=True)
        geomShapeNode = geo_utils.getGeometryNode(selectedObjects[0]) if len(selectedObjects) > 0 else None

        if geomShapeNode is None:
            msg_utils.showError(maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinErrMsgSelectionGeometry' ])
            return returnedNodes

        if inputConnect == outputConnect and outputConnect == pin_ifc.eXformIO.kCurrent:
            msg_utils.showError(maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinErrMsgInputOutputMode' ])
            return returnedNodes

        uvSetName = kwargs.get('uvSetName', '')
        if uvSetName == '':
            uvSetName = maya.cmds.getAttr(u'{0}.currentUVSet'.format(geomShapeNode))

        if setupMode == ePinProxSetupMode.kTransforms:

            targets = list()
            for x in selectedObjects[1:]:
                xformNode = xfm_utils.getTransformNode(x)
                if xformNode is not None:
                    targets.append(xformNode)

            # Create the pin node
            pinNode = maya.cmds.createNode('proximityPin')
            returnedNodes.append(pinNode)

            settableAttrs = [ 'normalAxis', 'tangentAxis', 'coordMode' ]
            cls.setNodeAttributes(pinNode, kwargs, settableAttrs)

            v = 1.0 if maintainOffset else 0.0
            maya.cmds.setAttr(u'{0}.offsetTranslation'.format(pinNode), v)
            maya.cmds.setAttr(u'{0}.offsetOrientation'.format(pinNode), v)

            editor = ifc.NodeInterface(pinNode)
            editor.setGeometry(geomShapeNode)
            editor.setUvSetName(uvSetName)

            # add the inputs
            if len(targets) > 0:
                indices, createdNodes = editor.addInputs(inputConnect=inputConnect, transforms=targets)
                returnedNodes.extend(createdNodes)

                returnedNodes.extend(editor.hookupOutputs(outputConnect=outputConnect, indices=indices, targets=targets))

        else:
            msg_utils.showError(maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinErrMsgNotImplemented' ])

        return cls.finalizeCommand(returnedNodes)

    def addOptionDialogWidgets(self):
        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}

        ui_utils.createCommandDescriptionLayout(self.commandDescription)
        with ParentManager(ui_utils.createCommandSettingsLayout()):
            widgetDict.update(self.addBasicDialogWidgets())
        return widgetDict

    def addBasicDialogWidgets(self):

        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}

        with ui_utils.HeaderLayoutManager(maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinLabelConnections' ]):
            with ui_utils.AttributeLayoutManager():

                opts = [ (maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinLabelOptSetupComponents' ], ePinProxSetupMode.kComponents),
                        (maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinLabelOptSetupTransforms' ], ePinProxSetupMode.kTransforms) ]

                widget, lookup = ui_utils.createOptionMenu(maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinLabelPinProxSetupMode'],
                                                        options=opts,
                                                        annotation=annotPinProxSetupMode)
                self.optionMenuGrp_labelToEnum['setupMode'] = lookup
                widgetDict['setupMode'] = (maya.cmds.optionMenuGrp, widget)
                maya.cmds.control(widget, edit=True, visible=False)

                widget, lookup = pin_ifc.createXformIOMenu(label=pin_ifc.labelInputConnect,
                annotation=pin_ifc.annotInputConnect,
                changeCommand=self._onUpdateIO)
                self.optionMenuGrp_labelToEnum['inputConnect'] = lookup
                widgetDict['inputConnect'] = (maya.cmds.optionMenuGrp, widget)
                self.inputConnectMenu = widget

                widget, lookup = pin_ifc.createXformIOMenu(label=pin_ifc.labelOutputConnect,
                                                annotation=pin_ifc.annotOutputConnect,
                                                changeCommand=self._onUpdateIO)
                self.optionMenuGrp_labelToEnum['outputConnect'] = lookup
                widgetDict['outputConnect'] = (maya.cmds.optionMenuGrp, widget)

        with ui_utils.HeaderLayoutManager(maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinLabelCoordinates' ]):
            with ui_utils.AttributeLayoutManager():

                opts = [ (maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinLabelOptEdge' ], eCoordMode.kEdge), (maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinLabelOptUV' ], eCoordMode.kUV) ]
                widget, lookup = ui_utils.createOptionMenu(maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinLabelCoordMode'],
                                                        options=opts,
                                                        annotation=maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinAnnotCoordMode'],
                                                        changeCommand=self._onUpdateWidgets)
                self.optionMenuGrp_labelToEnum['coordMode'] = lookup
                widgetDict['coordMode'] = (maya.cmds.optionMenuGrp, widget)

                widget = ui_utils.textFieldGrp(pin_ifc.labelUVSet, annotation=pin_ifc.annotUVSet)
                widgetDict['uvSetName'] = (maya.cmds.textFieldGrp, widget)
                self.uvSetNameField = widget

                pin_ifc.createCoordSysWidgets(self, noneTangentAxis=True)
                widgetDict['normalAxis'] = (maya.cmds.optionMenuGrp, self.normalMenu)
                widgetDict['tangentAxis'] = (maya.cmds.optionMenuGrp, self.tangentMenu)

                widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinLabelMaintainOffset' ],
                                            annotation=maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinAnnotMaintainOffset' ])
                widgetDict['maintainOffset'] = (maya.cmds.checkBoxGrp, widget)


        return widgetDict

    def _onUpdateWidgets(self, *args):
        optionVarDict = self.getWidgetValues()
        crdMode = optionVarDict.get('coordMode', None)
        maya.cmds.control(self.uvSetNameField, edit=True, enable=(crdMode == eCoordMode.kUV))
        maya.cmds.control(self.tangentMenu, edit=True, enable=(crdMode == eCoordMode.kUV))

    def _onUpdateNormalAxis(self, *args):
        pin_ifc.resolveConflictingAxisOptionBox(self, checkNormalAxis=True)

    def _onUpdateTangentAxis(self, *args):
        pin_ifc.resolveConflictingAxisOptionBox(self, checkNormalAxis=False)

    def _onUpdateIO(self, *args):
        optionVarDict = self.getWidgetValues()
        oc = optionVarDict.get('outputConnect', None)
        ic = optionVarDict.get('inputConnect', None)
        if (oc == ic and ic == pin_ifc.eXformIO.kCurrent):
            msg_utils.showWarning(maya.stringTable['y_maya_internal_nodes_proximitypin_cmd_create.kProximityPinWrnMsgIO' ])
            maya.cmds.optionMenuGrp(self.inputConnectMenu, edit=True, value=self.optionMenuGrp_enumToLabel['inputConnect'][pin_ifc.eXformIO.kLocator])

    def updateWindow(self):
        pin_ifc.capturePrevAxis(self)
        self._onUpdateWidgets()
        super(Command, self).updateWindow()

    def customApplyAndCloseButtonLabel(self):
        return maya.stringTable[ 'y_maya_internal_nodes_proximitypin_cmd_create.kGetApplyAndClose' ]
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
