import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.internal.common.ae.template as aetemplate
import maya.internal.nodes.weightgeometryfilter.ae_template as ae
import maya.cmds as cmds

class AETemplate(ae.AETemplate):
    def buildUI(self, nodeName):
        with aetemplate.Layout(self, maya.stringTable['y_maya_internal_nodes_morph_ae_template.kMorphAttributes' ], collapse=True):
            self.addControl("morphMode", callback=self.__settingsCheck)
            self.addControl("morphSpace")
            self.addControl("useOriginalMorphTarget")
            cmds.editorTemplate(addSeparator=True)
            self.addControl("useComponentLookup")
            cmds.editorTemplate(addSeparator=True)
            self.addControl("neighborLevel", annotation=maya.stringTable['y_maya_internal_nodes_morph_ae_template.kNeighborLevel' ], callback=self.__settingsCheck)
            self.addControl("neighborExponent", annotation=maya.stringTable['y_maya_internal_nodes_morph_ae_template.kNeighborExp' ], callback=self.__settingsCheck)
            self.addControl("neighborBias", annotation=maya.stringTable['y_maya_internal_nodes_morph_ae_template.kNeighborBias' ])
            cmds.editorTemplate(addSeparator=True)
            self.addControl("smoothNormals")
            self.addControl("mirrorDirection")

            with aetemplate.Layout(self, maya.stringTable['y_maya_internal_nodes_morph_ae_template.kConstraints' ], collapse=False):
                self.addControl("useTangentialConstraints", callback=self.__constraintsCheck)
                self.addControl("inwardConstraint")
                self.addControl("outwardConstraint")
                self.addControl("tangentialDamping")

            with aetemplate.Layout(self, maya.stringTable['y_maya_internal_nodes_morph_ae_template.kRetargetScaling' ], collapse=False):
                self.addControl("scaleEnvelope")
                cmds.editorTemplate(addSeparator=True)
                self.addControl("scaleLevel")
                self.addControl("uniformScaleWeight")
                self.addControl("normalScale")
                self.addControl("tangentPlaneScale")


        self.suppress("morphTarget")
        self.suppress("originalMorphTarget")
        self.suppress("componentLookup")

        super(AETemplate, self).buildUI(nodeName)

    @staticmethod
    def __settingsCheck(nodename):
        mm = cmds.getAttr("{}.morphMode".format(nodename))
        useSurfaceMode = (mm == 2)
        useRelativeMode = (mm == 1)
        useRetargetMode = (mm == 3)
        useMirrorMode = (mm == 4)

        useNeighbors = False
        useNeighborBias = False
        if useSurfaceMode or useRetargetMode:
            useNeighbors = (cmds.getAttr("{}.neighborLevel".format(nodename)) > 0)
            if useNeighbors:
                useNeighborBias = (cmds.getAttr("{}.neighborExponent".format(nodename)) > 0)

        cmds.editorTemplate(dimControl=[nodename, "neighborLevel", not useSurfaceMode and not useRetargetMode])
        cmds.editorTemplate(dimControl=[nodename, "neighborExponent", not useNeighbors])
        cmds.editorTemplate(dimControl=[nodename, "neighborBias", not useNeighborBias])

        cmds.editorTemplate(dimControl=[nodename, "smoothNormals", not useRetargetMode])
        cmds.editorTemplate(dimControl=[nodename, "morphSpace", useRetargetMode or useMirrorMode])
        cmds.editorTemplate(dimControl=[nodename, "mirrorDirection", not useMirrorMode])

        cmds.editorTemplate(dimControl=[nodename, "useOriginalMorphTarget", not useRelativeMode and not useRetargetMode])

        dimScaling = not useRetargetMode
        cmds.editorTemplate(dimControl=[nodename, "scaleEnvelope", dimScaling])
        cmds.editorTemplate(dimControl=[nodename, "scaleLevel", dimScaling])
        cmds.editorTemplate(dimControl=[nodename, "uniformScaleWeight", dimScaling])
        cmds.editorTemplate(dimControl=[nodename, "normalScale", dimScaling])
        cmds.editorTemplate(dimControl=[nodename, "tangentPlaneScale", dimScaling])

    @staticmethod
    def __constraintsCheck(nodename):
        utnc = cmds.getAttr("{}.useTangentialConstraints".format(nodename))
        cmds.editorTemplate(dimControl=[nodename, "inwardConstraint", not utnc])
        cmds.editorTemplate(dimControl=[nodename, "outwardConstraint", not utnc])
        cmds.editorTemplate(dimControl=[nodename, "tangentialDamping", not utnc])
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
