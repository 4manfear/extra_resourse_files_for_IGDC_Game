import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.internal.common.ae.template as aetemplate

import maya.internal.common.ae.custom as aecustom
import maya.internal.common.utils.connections as con_utils
import maya.internal.common.utils.material as mtl_utils
import maya.internal.common.utils.ui as ui_utils
import maya.internal.common.utils.transform as xfm_utils

import maya.internal.nodes.materialtemplate.ae_template as mtl_template
import maya.cmds

from PySide2 import QtWidgets, QtCore, QtGui

MTL_TEMPLATE_ASSIGN_ICON = ui_utils.createIcon(':/material_template_assign.png')
MTL_TEMPLATE_CREATE_ICON = ui_utils.createIcon(':/material_template_create.png')
MTL_CREATE_ICON = ui_utils.createIcon(':/material_create.png')
MTL_ASSIGN_ICON = ui_utils.createIcon(':/material_assign.png')

#-------------------------------------------------------------------------------
class MultiAttributeScriptJobManager(object):
    '''
    This class will listen to any changes on a plug for a multi index attribute
    and call specific functions in response
    '''
    def __init__(self, parent, changeFn):
        self.jobNums = list()
        self.uiParent = parent
        self.changeFn = changeFn
        self.plug = None

    def setPlug(self, plug):
        self.plug = plug
        self._connectScriptJobs()

    def _connectScriptJobs(self):
        self._killScriptJobs()
        if self.plug is not None:
            try:
                if self.changeFn:
                    self.jobNums.append(maya.cmds.scriptJob(p=self.uiParent, ac=[self.plug, self._changeAttrSlot], alc=True, disregardIndex=True))
                self.jobNums.append(maya.cmds.scriptJob(p=self.uiParent, ad=[self.plug, self._deleteAttrSlot]))
            except:
                pass

    def _killScriptJobs(self):
        for jn in self.jobNums:
            if maya.cmds.scriptJob(exists=jn):
                maya.cmds.scriptJob( kill=jn, force=True)
            self.jobNums = list()

    def _changeAttrSlot(self):
        if self.changeFn:
            self.changeFn()

    def _deleteAttrSlot(self):
        if self.changeFn:
            self.changeFn()

        # After a delete we need to reconnect the script jobs again
        maya.cmds.evalDeferred(self._connectScriptJobs)

#-------------------------------------------------------------------------------
def createInstaceLookupFromId(shapeNodeName):
    lookup = dict()
    leafName = shapeNodeName.split('|')[-1]
    parents = (maya.cmds.listRelatives(shapeNodeName, allParents=True )) or []
    for p in parents:
        dp = xfm_utils.getDagPathFromNodeName('{}|{}'.format(p, leafName))
        lookup[dp.instanceNumber()] = p
    return lookup

#-------------------------------------------------------------------------------
def createInstanceLookupFromName(shapeNodeName):
    lookup = dict()
    leafName = shapeNodeName.split('|')[-1]
    parents = (maya.cmds.listRelatives(shapeNodeName, allParents=True )) or []
    for p in parents:
        dp = xfm_utils.getDagPathFromNodeName('{}|{}'.format(p, leafName))
        lookup[p] = dp.instanceNumber()
    return lookup

#-------------------------------------------------------------------------------
class eAssignment(object):
    kNone = 0
    kTemplate = 1
    kMaterial = 2

#-------------------------------------------------------------------------------
def getAssignmentType(srcNode):
    if srcNode:
        if maya.cmds.objectType(srcNode, isType='materialTemplate'):
            return eAssignment.kTemplate
        elif maya.cmds.objectType(srcNode, isType='shadingEngine'):
            return eAssignment.kMaterial
    return eAssignment.kNone

#-------------------------------------------------------------------------------
def getCurrentAssignmentSource(shapeNodeName, instanceIndex):
    plug = '{}.instMaterialAssign[{}]'.format(shapeNodeName, instanceIndex)
    srcNode = con_utils.getSourceNode(plug)
    assignType = getAssignmentType(srcNode)
    return srcNode, assignType

#-------------------------------------------------------------------------------
def getCurrentAssignment(shapeNodeName, instanceIndex):
    assignNode, assignType = getCurrentAssignmentSource(shapeNodeName, instanceIndex)
    if assignType == eAssignment.kMaterial:
        materials = mtl_utils.findMaterialsFromShadingEngine(assignNode)
        if len(materials) > 0:
            return materials[0], assignType
        else:
            return None, eAssignment.kNone

    return assignNode, assignType

#-------------------------------------------------------------------------------
class AssignMaterialAction(QtWidgets.QAction):
    def __init__(self, name, parent):
        super(AssignMaterialAction, self).__init__(name, parent)

#-------------------------------------------------------------------------------
class CreateMaterialAction(QtWidgets.QAction):
    def __init__(self, name, parent):
        super(CreateMaterialAction, self).__init__(name, parent)

#-------------------------------------------------------------------------------
class AssignTemplateAction(QtWidgets.QAction):
    def __init__(self, name, parent):
        super(AssignTemplateAction, self).__init__(name, parent)

#-------------------------------------------------------------------------------
class CreateTemplateAction(QtWidgets.QAction):
    def __init__(self, name, parent):
        super(CreateTemplateAction, self).__init__(name, parent)

#-------------------------------------------------------------------------------
class ShapeTemplatePickerWidget(QtWidgets.QWidget):

    templateChangedSignal = QtCore.Signal()

    def __init__(self):
        super(ShapeTemplatePickerWidget, self).__init__()
        self.topLayout = QtWidgets.QHBoxLayout(self)

        self.button = QtWidgets.QPushButton()

        # Make button menu
        self.buttonMenu = QtWidgets.QMenu(self)
        act = CreateTemplateAction(maya.stringTable['y_maya_internal_nodes_shapematerials_ae_template.kShapeMtlAETemplateNew' ],self.buttonMenu)
        act.setIcon(MTL_TEMPLATE_CREATE_ICON)
        self.buttonMenu.addAction(act)

        act = self.buttonMenu.addAction(maya.stringTable['y_maya_internal_nodes_shapematerials_ae_template.kShapeMtlAETemplateExt' ])
        self.existingTemplateMenu = QtWidgets.QMenu(self)
        self.existingTemplateMenu.aboutToShow.connect(self.buildExistingTemplateMenu)
        act.setMenu(self.existingTemplateMenu)
        act.setIcon(MTL_TEMPLATE_ASSIGN_ICON)
        self.buttonMenu.addSeparator()

        act = self.buttonMenu.addAction(maya.stringTable['y_maya_internal_nodes_shapematerials_ae_template.kShapeMtlAEMaterialNew' ])
        self.createMaterialMenu = QtWidgets.QMenu(self)
        self.createMaterialMenu.aboutToShow.connect(self.buildCreateMaterialMenu)
        act.setMenu(self.createMaterialMenu)
        act.setIcon(MTL_CREATE_ICON)

        act = self.buttonMenu.addAction(maya.stringTable['y_maya_internal_nodes_shapematerials_ae_template.kShapeMtlAEMaterialExt' ])
        self.existingMaterialMenu = QtWidgets.QMenu(self)
        self.existingMaterialMenu.aboutToShow.connect(self.buildExistingMaterialMenu)
        act.setMenu(self.existingMaterialMenu)
        act.setIcon(MTL_ASSIGN_ICON)

        # Finsih up
        self.buttonMenu.triggered.connect(self.actionTriggered)
        self.button.setMenu(self.buttonMenu)
        self.topLayout.addWidget(self.button)

    @ui_utils.undoChunk('assign material')
    def assignMaterial(self, src):
        if src is None:
            return False

        prvAssignNode, prvAssignType = getCurrentAssignmentSource(self.shapeNodeName, self.instanceIndex)
        curTma = prvAssignNode if prvAssignType == eAssignment.kTemplate else None

        # check if we were connected up the old fashioned way
        oldPlug = '{}.instObjGroups[{}]'.format(self.shapeNodeName, self.instanceIndex)
        cons = maya.cmds.listConnections(oldPlug, source=False, destination=True, plugs=True, type='shadingEngine') or []
        for oldDst in cons:
            maya.cmds.disconnectAttr(oldPlug, oldDst)

        maya.cmds.connectAttr('{}.message'.format(src), '{}.instMaterialAssign[{}]'.format(self.shapeNodeName, self.instanceIndex), f=True)

        newAssignType = getAssignmentType(src)
        if prvAssignType == eAssignment.kTemplate or newAssignType == eAssignment.kTemplate:
            if prvAssignNode != src:
                self.templateChangedSignal.emit()

        self.updateButtonText()
        return True

    @ui_utils.undoChunk('assign material template to geometry')
    def _assignMaterialTemplate(self, name=None):
        saveSelection = maya.cmds.ls(selection=True)
        mtlTemplate = name
        if mtlTemplate is None:
            mtlTemplate = mtl_utils.createNewMaterialTemplate(self.shapeNodeName)

        self.assignMaterial(mtlTemplate)
        maya.cmds.select(saveSelection, r=True)

    @ui_utils.undoChunk('assign material template to geometry')
    def _assignMaterial(self, name):
        shadEngines = mtl_utils.findShadingEngineFromMaterial(name)
        if len(shadEngines):
            saveSelection = maya.cmds.ls(selection=True)
            self.assignMaterial(shadEngines[0])
            maya.cmds.select(saveSelection, r=True)

    @ui_utils.undoChunk('assign material template to geometry')
    def _createMaterial(self, name):
        saveSelection = maya.cmds.ls(selection=True)
        shadEngine = mtl_utils.createNewMaterial(name)
        self.assignMaterial(shadEngine)
        maya.cmds.select(saveSelection, r=True)

    @QtCore.Slot()
    def actionTriggered(self, action):
        if isinstance(action, AssignMaterialAction):
            self._assignMaterial(action.text())
        elif isinstance(action, CreateMaterialAction):
            self._createMaterial(action.text())

        elif isinstance(action, CreateTemplateAction):
            self._assignMaterialTemplate(None)

        elif isinstance(action, AssignTemplateAction):
            self._assignMaterialTemplate(action.text())

    @QtCore.Slot()
    def buildCreateMaterialMenu(self):
        self.createMaterialMenu.clear()
        materialTypes = mtl_utils.findMaterialCandidateTypesForShape(self.shapeNodeName)
        for mtl in materialTypes:
            self.createMaterialMenu.addAction(CreateMaterialAction(mtl, self.createMaterialMenu))

    @QtCore.Slot()
    def buildExistingMaterialMenu(self):
        self.existingMaterialMenu.clear()
        materials = mtl_utils.findMaterialCandidatesForShape(self.shapeNodeName)

        assignNode, assignType = self.getCurrentAssignment()
        curMtl = assignNode if assignType == eAssignment.kMaterial else None
        for mtl in materials:
            act = AssignMaterialAction(mtl, self.existingMaterialMenu)
            act.setEnabled(mtl!=curMtl)
            self.existingMaterialMenu.addAction(act)

    @QtCore.Slot()
    def buildExistingTemplateMenu(self):
        self.existingTemplateMenu.clear()
        templatesArray = maya.cmds.ls(exactType='materialTemplate')

        assignNode, assignType = self.getCurrentAssignment()
        curTma = assignNode if assignType == eAssignment.kTemplate else None

        for tma in templatesArray:
            act = AssignTemplateAction(tma, self.existingTemplateMenu)
            act.setEnabled(tma!=curTma)
            self.existingTemplateMenu.addAction(act)

    def update(self, shapeNodeName, instanceIndex):
        self.shapeNodeName = shapeNodeName
        self.instanceIndex = instanceIndex
        self.updateButtonText()

    def getCurrentAssignment(self):
        return getCurrentAssignment(self.shapeNodeName, self.instanceIndex)

    def updateButtonText(self):
        assignNode, assignType = self.getCurrentAssignment()
        if assignType == eAssignment.kNone:
            self.button.setText(maya.stringTable['y_maya_internal_nodes_shapematerials_ae_template.kShapeMtlAEUnassigned' ])
            self.button.setIcon(QtGui.QIcon())
        else:
            self.button.setText(assignNode)
            self.button.setIcon(MTL_TEMPLATE_ASSIGN_ICON if assignType == eAssignment.kTemplate else MTL_ASSIGN_ICON)

#-------------------------------------------------------------------------------
class ShapeMaterialAssignWidget(QtWidgets.QWidget):
    def __init__(self, uiParent=None):
        super(ShapeMaterialAssignWidget, self).__init__()
        self.scriptJobManager = MultiAttributeScriptJobManager(uiParent, changeFn=self._refreshAssignTableWidget)
        self.mainLayout = QtWidgets.QVBoxLayout()

        # Template picker
        self.templatePicker = ShapeTemplatePickerWidget()
        self.mainLayout.addWidget(self.templatePicker)

        # Material template
        self.materialTemplateWidget = mtl_template.MaterialTemplateWidget()
        self.mainLayout.addWidget(self.materialTemplateWidget)

        self.templatePicker.templateChangedSignal.connect(self.templateChanged)

        # Finish up the layout
        self.setLayout(self.mainLayout)

    def changeNode(self, nodeName, plugName):
        self.plugName = plugName
        self.shapeNodeName = nodeName
        self.instanceIndex = self.instanceFromSelection()
        self.addScriptJobs()
        self.refresh()

    def addScriptJobs(self):
        assignNode, assignType = getCurrentAssignmentSource(self.shapeNodeName, self.instanceIndex)
        if assignType == eAssignment.kTemplate:
            upstreamPlug = '{}.assign'.format(assignNode)
            self.scriptJobManager.setPlug(upstreamPlug)
        else:
            self.scriptJobManager.setPlug(None)

    def instanceFromSelection(self):
        # Find out the instance based on what is in the current selection....
        selectionList = maya.cmds.ls(sl=True) or []
        numSel = len(selectionList)
        if numSel == 0:
            return 0

        instanceLookup = createInstanceLookupFromName(self.shapeNodeName)
        for i in range(numSel, 0, -1):
            s = selectionList[i-1]
            if s == self.shapeNodeName:
                return 0
            idx = instanceLookup.get(selectionList[i-1], None)
            if idx is not None:
                return idx

        return 0

    def _refreshAssignTableWidget(self):
        assignNode, assignType = getCurrentAssignmentSource(self.shapeNodeName, self.instanceIndex)
        if assignType == eAssignment.kTemplate:
            self.materialTemplateWidget.setEnabled(True)
            self.materialTemplateWidget.updateItems(self.shapeNodeName, assignNode)
        else:
            self.materialTemplateWidget.setEnabled(False)
            self.materialTemplateWidget.clearItems()

    def refresh(self):
        self.templatePicker.update(self.shapeNodeName, self.instanceIndex)
        self._refreshAssignTableWidget()

    @QtCore.Slot()
    def templateChanged(self):
        self._refreshAssignTableWidget()

#-------------------------------------------------------------------------------
class AETemplate(aetemplate.Template):
    def __init__(self, nodeName):
        self.nodeName = nodeName
        self.buildUI(nodeName)

    def buildUI(self, nodeName):
        with aetemplate.Layout(self, maya.stringTable['y_maya_internal_nodes_shapematerials_ae_template.kShapeMtlAEAttrHeader' ], collapse=True):
            self.defineQtCustom(ShapeMaterialAssignWidget, 'instMaterialAssign')









#-------------------------------------------------------------------------------
class ShapeInstancePickerWidget(QtWidgets.QWidget):
    def __init__(self):
        super(ShapeInstancePickerWidget, self).__init__()

        self.instanceIndex = 0
        self.shapeNodeName = None
        self.topLayout = QtWidgets.QHBoxLayout(self)
        self.button = QtWidgets.QPushButton()
        self.button.setText(maya.stringTable['y_maya_internal_nodes_shapematerials_ae_template.kShapeMtlAEInstanceButton' ])

        # Make instance menu
        self.buttonMenu = QtWidgets.QMenu(self)
        self.buttonMenu.aboutToShow.connect(self.buildInstanceMenu)
        self.buttonMenu.triggered.connect(self.instancePicked)

        self.button.setMenu(self.buttonMenu)
        self.topLayout.addWidget(self.button)

    @QtCore.Slot()
    def buildInstanceMenu(self):
        self.buttonMenu.clear()
        self.lookup = createInstaceLookupFromId(self.shapeNodeName)
        for name in self.lookup.values():
            self.buttonMenu.addAction(name)

    @QtCore.Slot()
    def instancePicked(self, action):
        self.instanceIndex = self.getInstanceId(action.text())
        if self.instanceIndex is None:
            self.instanceIndex = 0
        self.button.setText(action.text())

    def getInstanceId(self, name):
        for item in self.lookup.items():
            if item[1] == name:
                return item[0]
        return None

    def update(self, shapeNodeName):
        self.shapeNodeName = shapeNodeName
        self.lookup = createInstaceLookupFromId(self.shapeNodeName)
        name = self.lookup.get(self.instanceIndex, None)
        if name is None:
            self.instanceIndex = 0
            name = self.lookup.get(self.instanceIndex, None)

        if name is None: # this probably never happens
            self.button.setText('')
        else:
            self.button.setText(name)# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
