import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds as cmds
import maya.internal.common.ae.template as aetemplate
import maya.internal.common.utils.connections as con_utils
import maya.internal.common.utils.falloff as fo_utils
import maya.internal.common.qt.table as qt_table
import maya.internal.common.qt.buttons as qt_buttons
import maya.internal.common.qt.attribute as qt_attr
import maya.internal.common.utils.ui as ui_utils
import maya.internal.nodes.blendfalloff.action as fo_action

from PySide2 import QtWidgets, QtCore

from maya.internal.nodes.blendfalloff.node_interface import NodeInterface

class TableItemInfo(object):
    def __init__(self):
        self.src = None
        self.index = -1
        self.row = -1

#-------------------------------------------------------------------------------
class BlendTableWidget(qt_table.TableWidget):

    kColIdx = 0
    kColSrc = 1
    kColType = 2
    kColWeight = 3
    kColMode = 4
    kColLAST = 5

    def __init__(self):
        super(BlendTableWidget, self).__init__()
        self.setSortingEnabled(False)
        self.setColumnCount(self.kColLAST)

        self.makeHeader(self.kColIdx, maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEColIdx' ],  maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEColIdxTip' ])
        self.makeHeader(self.kColSrc, maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEColName' ], maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEColNameTip' ])
        self.makeHeader(self.kColType, maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEColType' ], maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEColTypeTip' ])
        self.makeHeader(self.kColWeight, maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEColWeight' ], maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEColWeightTip' ])
        self.makeHeader(self.kColMode, maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEColMode' ], maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEColModeTip' ])

        self.setColumnResizeMode(content=[self. kColIdx, self.kColMode, self.kColType, self.kColWeight], stretch=[self.kColSrc])
        self.hideColumn(self.kColType)

        self.interface = None
        return

    def sizeHint(self):
        return QtCore.QSize(400, 250)

    def makeTableItem(self, col, info):
        text = ''
        horizontalAlign = QtCore.Qt.AlignHCenter
        if col == self.kColIdx:
            text = str(info.index)
        elif col == self.kColSrc:
            text = fo_utils.getConnectionLabel(info.src)
            horizontalAlign = QtCore.Qt.AlignLeft

        flags = QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled
        wi = qt_table.InfoTableWidgetItem(text, info)
        wi.setTextAlignment(horizontalAlign | QtCore.Qt.AlignVCenter)
        wi.setFlags(flags)

        if col == self.kColSrc:
            ic = fo_action.iconForFalloffSource(info.src)
            if ic is not None:
                wi.setIcon(fo_action.iconForFalloffSource(info.src))
        return wi

    def updateItems(self, nodeName):
        # collect all the info from the node
        self.interface = NodeInterface(nodeName)
        if self.interface.isValid():
            tableData = self.interface.getTableData()
            self.setSortingEnabled(False)
            self.setRowCount(len(tableData))

            for row, d in enumerate(tableData):
                info = TableItemInfo()
                info.index = d[0]
                info.src = d[1]
                info.row = row

                for col in [self.kColIdx, self.kColSrc]:
                    self.setItem(row, col, self.makeTableItem(col, info))

                modePlug = self.interface.modePlugName(info.index)
                modeWidget = qt_attr.EnumAttributeWidget(modePlug)
                self.setCellWidget(row, self.kColMode, modeWidget)

                weightPlug = self.interface.weightPlugName(info.index)
                weightWidget = self.cellWidget(row, self.kColWeight)

                if weightWidget is None:
                    weightWidget = qt_attr.FloatAttributeWidget(weightPlug)
                    self.setCellWidget(row, self.kColWeight, weightWidget)
                else:
                    weightWidget.setPlug(weightPlug)

        else:
            self.clearItems()
        return

    def clearItems(self):
        self.setRowCount(0)
        self.interface = None

    def getCurrentItemInfo(self):
        row = self.currentRow()
        if row >= 0:
            widgetItem = self.item(row, self.kColIdx)
            if widgetItem:
                return widgetItem.info
        return None

    def contextMenuEvent(self, event):
        index = self.indexAt(event.pos())
        widgetItem = self.item(index.row(), index.column()) if index.isValid() else None
        info = widgetItem.info if widgetItem else TableItemInfo()

        curFalloff = None
        curFalloffSourcePlug = None
        if info.index >= 0:
            curFalloffSourcePlug = info.src
            curFalloff = con_utils.plugNode(curFalloffSourcePlug)

        menu = QtWidgets.QMenu(self)

        actionLabel = None
        if info.index < 0:
            actionLabel = maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEAddItem' ]

        focMenu = fo_action.FalloffContextMenuBuilder(actionLabel)
        focMenu.appendToMenu(menu, curFalloff, curFalloffSourcePlug)

        action = menu.exec_(self.mapToGlobal(event.pos()))

        if action == focMenu.selectAction:
            cmds.select(curFalloff)
        elif isinstance(action, fo_action.Action):
            self._assignFalloff(info, action)
        elif action == focMenu.disconnectAction:
             self._disconnectFalloff(info)
        elif action == focMenu.deleteAction:
             self._deleteFalloff(info)

        return

    def _updateItems(self):
        self.updateItems(self.interface.getEditNode())

    @ui_utils.undoChunk('add blend falloff item')
    def _addItem(self, info):
        self.interface.appendItem(weight=1.0)

    @ui_utils.undoChunk('delete blend falloff item')
    def _deleteItem(self, info):
        self.interface.deleteItem(info.index)

    @ui_utils.undoChunk('assign blend falloff')
    def _assignFalloff(self, info, action):
        index = info.index
        if index < 0:
            index = self.interface.appendItem()
            if index < 0:
                return

        if action.actId == fo_action.eAction.kNew:
            saveSelection = cmds.ls(selection=True)
            if self.interface.createAndAssignFalloff(index, action.falloffType, labelHint='blend'):
                self._updateItems()
            cmds.select(saveSelection, r=True)

        elif action.actId == fo_action.eAction.kExisting:
            if self.interface.assignFalloff(index, action.falloff, action.falloffOutputIndex, labelHint='blend'):
                self._updateItems()

    @ui_utils.undoChunk('disconnect falloff')
    def _disconnectFalloff(self, info):
        if self.interface.setFalloffSourcePlug(info.index, None):
            self._updateItems()

    @ui_utils.undoChunk('delete falloff')
    def _deleteFalloff(self, info):
        if self.interface.deleteFalloff(info.index):
            self._updateItems()

    @ui_utils.undoChunk('move blend falloff item')
    def _moveItem(self, info, delta):
        old_row = info.row
        if self.interface.moveItem(info.index, delta):
            self._updateItems()
            self.selectRow(max(min(old_row+delta, self.rowCount()-1), 0))

    @QtCore.Slot()
    def addItem(self):
        info = self.getCurrentItemInfo()
        self._addItem(info)

    @QtCore.Slot()
    def deleteCurrentItem(self):
        info = self.getCurrentItemInfo()
        if info:
            self._deleteItem(info)

    @QtCore.Slot()
    def moveCurrentItemUp(self):
        info = self.getCurrentItemInfo()
        if info:
            self._moveItem(info, -1)

    @QtCore.Slot()
    def moveCurrentItemDown(self):
        info = self.getCurrentItemInfo()
        if info:
            self._moveItem(info, +1)

#-------------------------------------------------------------------------------
class BlendInputWidget(QtWidgets.QWidget):
    def __init__(self, uiParent=None):
        super(BlendInputWidget, self).__init__()

        self.mainLayout = QtWidgets.QVBoxLayout()

        self.topBarLayout = QtWidgets.QHBoxLayout()
        self.topBarLayout.setSpacing(1)
        spacerItem1 = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        spacerItem2 = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)

        self.addButton, self.delButton = qt_buttons.makeItemAddDelIconButtons(
                maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEItemAdd' ],
                maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEItemDel' ])

        self.upButton, self.downButton = qt_buttons.makeItemUpDownIconButtons(
                maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEItemUp' ],
                maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffAEItemDown' ])

        self.topBarLayout.addItem(spacerItem1)
        self.topBarLayout.addWidget(self.addButton)
        self.topBarLayout.addWidget(self.delButton)
        self.topBarLayout.addItem(spacerItem2)
        self.topBarLayout.addWidget(self.upButton)
        self.topBarLayout.addWidget(self.downButton)

        self.tableWidget = BlendTableWidget()
        self.tableWidget.itemSelectionChanged.connect(self.tableSelectionChangedSlot)

        self.addButton.clicked.connect(self.tableWidget.addItem)
        self.delButton.clicked.connect(self.tableWidget.deleteCurrentItem)
        self.upButton.clicked.connect(self.tableWidget.moveCurrentItemUp)
        self.downButton.clicked.connect(self.tableWidget.moveCurrentItemDown)

        self.mainLayout.addLayout(self.topBarLayout)
        self.mainLayout.addWidget(self.tableWidget)

        # Finish up the layout
        self.setLayout(self.mainLayout)

    def changeNode(self, nodeName, plugName):
        self.nodeName = nodeName
        self.refresh()

    def refresh(self):
        self.tableWidget.updateItems(self.nodeName)
        self.updateTopBar()

    def updateTopBar(self):
        row = self.tableWidget.currentRow()
        cnt = self.tableWidget.rowCount()
        if row < 0:
            self.delButton.setEnabled(False)
            self.upButton.setEnabled(False)
            self.downButton.setEnabled(False)
        else:
            self.delButton.setEnabled(True)
            self.upButton.setEnabled(row > 0)
            self.downButton.setEnabled(row < (cnt-1))

    @QtCore.Slot()
    def tableSelectionChangedSlot(self):
        self.updateTopBar()

#-------------------------------------------------------------------------------
class AETemplate(aetemplate.Template):
    def buildUI(self, nodeName):
        with aetemplate.Layout(self, maya.stringTable['y_maya_internal_nodes_blendfalloff_ae_template.kBlendFalloffLabelAttributes' ]):
            self.addControls(['baseWeight'])
            self.defineQtCustom(BlendInputWidget, ['target'])

            self.suppress('target')
            self.suppress('outputWeightFunction')

        self.callTemplate('dependNode')
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
