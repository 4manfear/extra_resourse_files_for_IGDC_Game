import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.internal.common.ae.template as aetemplate
import maya.internal.common.ae.custom as aecustom
import maya.internal.common.utils.connections as con_utils
import maya.internal.nodes.common.componenttag.component_tag_edit as ctag_edit
import maya.internal.nodes.componentmatch.node_interface as ifc

import maya.cmds

noneLabel = maya.stringTable['y_maya_internal_nodes_componentmatch_ae_template.kLabelNone' ]

#-------------------------------------------------------------------------------
class TagExpressionFieldGrp(ctag_edit.ComponentTagExpressionFieldGrp):
    def getAttributeLabel(self, plugName, mode=1):
        if mode == 1:
            return maya.stringTable['y_maya_internal_nodes_componentmatch_ae_template.kTagExpression' ]
        else:
            return super(TagExpressionFieldGrp, self).getAttributeLabel(plugName, mode)

    def getGeometryPlug(self, nodeName, plugName):
        return '{}.inputGeometry'.format(nodeName)

#-------------------------------------------------------------------------------
class GeometryControl(aecustom.CustomControl):
    def buildControlUI(self):
        parent = maya.cmds.setParent(q=True)

        maya.cmds.setUITemplate('attributeEditorTemplate', pushTemplate=True)

        self.inputGeo = maya.cmds.textFieldGrp(label=maya.stringTable['y_maya_internal_nodes_componentmatch_ae_template.kInputGeometry' ], enable=False)
        self.targetGeo = maya.cmds.textFieldGrp(label=maya.stringTable['y_maya_internal_nodes_componentmatch_ae_template.kTargetGeometry' ], enable=False)

        maya.cmds.setUITemplate(popTemplate=True)
        maya.cmds.setParent(parent)
        self.replaceControlUI()

    def replaceControlUI(self):
        editor = ifc.NodeInterface(self.nodeName)
        if not editor.isValid():
            return
        maya.cmds.scriptJob(p=self.inputGeo, rp=True, ac=(editor.inputGeometryPlugName(), lambda *a: self.updateWidgets()))
        maya.cmds.scriptJob(p=self.targetGeo, rp=True, ac=(editor.targetGeometryPlugName(), lambda *a: self.updateWidgets()))

        self.updateWidgets()

    def updateWidgets(self):
        editor = ifc.NodeInterface(self.nodeName)
        if not editor.isValid():
            return

        ig = con_utils.getSourcePlug(editor.inputGeometryPlugName())
        tg = con_utils.getSourcePlug(editor.targetGeometryPlugName())

        maya.cmds.textFieldGrp(self.inputGeo, edit=True, text=ig if ig else noneLabel)
        maya.cmds.textFieldGrp(self.targetGeo, edit=True, text=tg if tg else noneLabel)


#-------------------------------------------------------------------------------
class AETemplate(aetemplate.Template):
    def buildUI(self, nodeName):
        with aetemplate.Layout(self, maya.stringTable['y_maya_internal_nodes_componentmatch_ae_template.kComponentMatch' ], collapse=True):
            self.defineQtCustom(TagExpressionFieldGrp, ['componentTagExpression'])
            self.addControl("uniqueMatch")
            self.defineCustom(GeometryControl(), ['inputGeometry', 'targetGeometry'])

        self.suppress('matchMode')
        self.suppress('inputGeometry')
        self.suppress('targetGeometry')



# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
