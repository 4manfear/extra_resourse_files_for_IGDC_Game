from maya.internal.common.node_interface import NodeInterface as BaseNodeInterface

import maya.cmds
import maya.internal.common.utils.connections as con_utils
import maya.internal.common.utils.material as mtl_utils

class NodeInterface(BaseNodeInterface):
    _mayaNodeType = 'materialTemplate'
    def __init__(self, nodeName):
        super(NodeInterface, self).__init__(nodeName)

    # --------------------------------------------------------------------------
    # Plug names
    # --------------------------------------------------------------------------
    def getAssignmentPlugName(self, index):
        return u'{0}.assign[{1}]'.format(self.editNode, index)

    def getExpressionPlugName(self, index):
        return '{}.componentTagExpression'.format(self.getAssignmentPlugName(index))

    def getShadingEnginePlugName(self, index):
        return '{}.shadingEngine'.format(self.getAssignmentPlugName(index))

    def getMessagePlugName(self):
        return u'{0}.message'.format(self.editNode)

    # --------------------------------------------------------------------------
    # Indices
    # --------------------------------------------------------------------------
    def getIndices(self):
        return maya.cmds.getAttr(u'{0}.assign'.format(self.editNode), multiIndices=True) or []

    def getFreeIndex(self):
        indices = sorted(self.getIndices())
        return 0 if len(indices) == 0 else (indices[-1] + 1)

    def getNumAssignments(self):
        return len(self.getIndices())

    # --------------------------------------------------------------------------
    # Items
    # --------------------------------------------------------------------------
    def appendAssignment(self, shadEngine, tagExpr):
        newIndex = self.getFreeIndex()
        self.setExpression(newIndex, tagExpr)
        self.setShadingEngine(newIndex, shadEngine)
        return True

    def deleteAssignment(self, index):
        if index is not None and index >= 0:
            maya.cmds.removeMultiInstance(self.getAssignmentPlugName(index), b=True)
            return True
        return False

    def moveAssignment(self, multiIndex, delta):
        if delta == 0:
            return False
        multiIndices = self.getIndices()
        try:
            ip = multiIndices.index(multiIndex)
        except:
            return False

        reorderList = con_utils.moveItemInList(multiIndices, ip, delta)
        if reorderList == multiIndices:
            return False

        changes = list()
        for (oi, ni) in zip(multiIndices, reorderList):
            if oi == ni:
                changes.append(None)
            else:
                e = self.getExpression(ni)
                s = self.getShadingEngineSourcePlug(ni)
                changes.append((e,s))

        for (oi, ch) in zip(multiIndices, changes):
            if ch is not None:
                self.setExpression(oi, ch[0])
                self.setShadingEngineSourcePlug(oi, ch[1])
        return True

    # --------------------------------------------------------------------------
    # Shading Engines
    # --------------------------------------------------------------------------
    def getShadingEngine(self, index):
        return con_utils.getSourceNode(self.getShadingEnginePlugName(index))

    def setShadingEngine(self, index, shadEngine):
        if shadEngine:
            maya.cmds.connectAttr('{}.message'.format(shadEngine), self.getShadingEnginePlugName(index), f=True)
            return True
        return False

    def getShadingEngineSourcePlug(self, index):
        return con_utils.getSourcePlug(self.getShadingEnginePlugName(index))

    def setShadingEngineSourcePlug(self, index, sourcePlug):
        oldSourcePlug = self.getShadingEngineSourcePlug(index)
        if oldSourcePlug == sourcePlug:
            return False
        if sourcePlug:
            maya.cmds.connectAttr(sourcePlug, self.getShadingEnginePlugName(index), f=True)
        else:
            maya.cmds.disconnectAttr(oldSourcePlug, self.getShadingEnginePlugName(index))
        return True

    def getMaterial(self, index):
        shd = self.getShadingEngine(index)
        if shd is not None:
            mtls = mtl_utils.findMaterialsFromShadingEngine(shd)
            return mtls[0] if len(mtls) else None
        return None

    def createAndAssignMaterial(self, index, name):
        shadEngine = mtl_utils.createNewMaterial(name)
        return self.setShadingEngine(index, shadEngine)

    def assignMaterial(self, index, name):
        shadEngines = mtl_utils.findShadingEngineFromMaterial(name)
        return self.setShadingEngine(index, shadEngines[0] if len(shadEngines) else None)

    # --------------------------------------------------------------------------
    # ComponentTag Expression
    # --------------------------------------------------------------------------
    def getExpression(self, index):
        return maya.cmds.getAttr(self.getExpressionPlugName(index))

    def setExpression(self, index, expression):
        maya.cmds.setAttr(self.getExpressionPlugName(index), expression, type='string')
        return True

    # --------------------------------------------------------------------------
    # Destination
    # --------------------------------------------------------------------------
    def getDestinationShapes(self):
        dst = maya.cmds.connectionInfo(self.getMessagePlugName(), destinationFromSource=True)
        shapes = list()
        for d in dst:
            if '.instMaterialAssign[' in d:
               shapes.append(con_utils.plugNode(d))
        return shapes

    # --------------------------------------------------------------------------
    # Info
    # --------------------------------------------------------------------------
    def getAssignmentIndexData(self, index):
        cex = self.getExpression(index)
        mtl = self.getMaterial(index)
        return (index, cex, mtl)

    def getAssignmentData(self):
        a = list()
        indices = self.getIndices()
        for index in indices:
            a.append(self.getAssignmentIndexData(index))
        return a



# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
