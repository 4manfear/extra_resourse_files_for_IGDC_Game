import maya
maya.utils.loadStringResourcesForModule(__name__)

from maya.internal.common.ae.custom import CustomControl
from maya.internal.common.ae.template import Layout
from maya.internal.nodes.geometryfilter.ae_template import AETemplate as AETemplateBase
import maya.cmds as cmds

#-------------------------------------------------------------------------------
class Attr:
    """
    Attribute names for preventing typos
    """
    local = "local"
    localInfluenceList = ("localInfluenceS", "localInfluenceT", "localInfluenceU")
    outsideLattice = "outsideLattice"
    outsideFalloffDist = "outsideFalloffDist"
    usePartialResolution = "usePartialResolution"
    partialResolution = "partialResolution"
    bindToOriginalGeometry = "bindToOriginalGeometry"
    freezeGeometry = "freezeGeometry"

    resolutionLabel = maya.stringTable['y_maya_internal_nodes_ffd_ae_template.kResolution' ]


def getAttrValue(nodeName, attrName):
    return cmds.getAttr("{}.{}".format(nodeName, attrName))

def dimControl(nodeName, attrName, dim):
    cmds.editorTemplate(dimControl=[nodeName, attrName, dim])

#-------------------------------------------------------------------------------

class AEuseFfdPartialResolutionControl(CustomControl):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, **kwargs)
        self.controlEnumGrp = ''

    def buildControlUI(self):
        cmds.setUITemplate("attributeEditorTemplate", pst=True)
        self.controlEnumGrp = cmds.attrEnumOptionMenuGrp(l=Attr.resolutionLabel, at=self.plugName)
        cmds.setUITemplate(ppt=True)
        self.replaceControlUI()

    def replaceControlUI(self):
        cmds.attrEnumOptionMenuGrp(
            self.controlEnumGrp, 
            e=True, 
            l=Attr.resolutionLabel, 
            at=self.plugName)

        cmds.scriptJob(
            p=self.controlEnumGrp, 
            rp=True, 
            ac=(self.plugName, self.__onChoicePartialResolution))

        cmds.evalDeferred(self.__onChoicePartialResolution)

    def __onChoicePartialResolution(self):
        choice = getAttrValue(self.nodeName, Attr.usePartialResolution)
        dimControl(self.nodeName, Attr.partialResolution, not choice)

#-------------------------------------------------------------------------------

class AETemplate(AETemplateBase):
    def buildUI(self, nodeName):
        layoutName = maya.stringTable['y_maya_internal_nodes_ffd_ae_template.kFreeformDeformationAttributes' ]
        with Layout(self, layoutName):
            self.buildCommon()
        super().buildUI(nodeName)

    def buildCommon(self):
        self.addControl(Attr.local, callback=self.__onCheckLocal)
        self.addControls(Attr.localInfluenceList)
        self.addControl(Attr.outsideLattice, callback=self.__onChoiceOutsideLattice)
        self.addControl(Attr.outsideFalloffDist)

        self.addSeparator()
        self.defineCustom(AEuseFfdPartialResolutionControl(), Attr.usePartialResolution)
        self.addControl(Attr.partialResolution)

        self.addSeparator()
        self.addControls((Attr.bindToOriginalGeometry, Attr.freezeGeometry))
        
        self.suppress('caching')

    @staticmethod
    def __onCheckLocal(nodeName):
        checked = getAttrValue(nodeName, Attr.local)
        for name in Attr.localInfluenceList:
            dimControl(nodeName, name, not checked)

    @staticmethod
    def __onChoiceOutsideLattice(nodeName):
        choice = getAttrValue(nodeName, Attr.outsideLattice)
        dimControl(nodeName, Attr.outsideFalloffDist, choice in (0, 1))
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
