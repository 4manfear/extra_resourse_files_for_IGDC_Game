"""
morph -
    Module containing functions to create setup with the morph deformer
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


from builtins import object
import maya.cmds

import maya.internal.common.cmd.deformer as cmddeformer
import maya.internal.common.utils.ui as ui_utils
import maya.internal.common.utils.geometry as geo_utils
import maya.internal.nodes.morph.node_interface as ifc

class eMorphMode(object):
    kAbsolute = 0
    kRelative = 1
    kSurface = 2
    kRetarget = 3
    kMirror = 4

class eMorphSpace(object):
    kObject = 0
    kWorld = 1

# ------------------------------------------------------------------------------
# Command
# ------------------------------------------------------------------------------
class Command(cmddeformer.Command):

    def __init__(self):
        super(Command, self).__init__()

        self.commandName = 'Morph'
        self.commandHelpTag	= 'Morph'
        self.commandDescription = maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kCommandDescription' ]
        self.commandTitle = maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kCommandTitle' ]
        self.optionVarCategory = 'Deform.Morph'
        self.optionVarPrefix = 'Morph'
        self.optionVarDefaults.update( {
            'morphMode': eMorphMode.kAbsolute,
            'morphSpace': eMorphSpace.kObject,
            'useComponentLookup': False,
            'useOriginalMorphTarget': False } )
    @classmethod
    def command(cls, **kwargs):
        '''Morph deformer command
        '''
        returnedNodes = list()

        selectedObjects = maya.cmds.ls(selection=True, objectsOnly=True)
        morphMode = kwargs.get('morphMode', 0)

        if morphMode != eMorphMode.kMirror:
            # The even numbers in the selection list are the driven geometries
            # The odd numbers in the selection list are the drivers
            bendies = selectedObjects[0::2]
            targets = selectedObjects[1::2]
        else:
            # In mirror mode there are no morph targets
            bendies = selectedObjects
            targets = []

        # Create the deformer node using the generic command
        result = cmddeformer.Command.createDeformer(deformerType='morph', deformerGeom=bendies, **kwargs)

        if result is not None:
            deformerNode = result[0]

            for idx, trg in enumerate(targets):
                trgShape = geo_utils.extendToShape(trg)
                editor = ifc.NodeInterface(deformerNode)

                useOriginalMorphTarget = morphMode == eMorphMode.kRetarget
                if morphMode == eMorphMode.kRelative:
                    useOriginalMorphTarget = kwargs.get('useOriginalMorphTarget', False)

                useComponentLookup = kwargs.get('useComponentLookup', False)
                if morphMode == eMorphMode.kMirror:
                    useComponentLookup = False

                if useComponentLookup or useOriginalMorphTarget:
                    geo_utils.getOrCreateOriginalGeometry(trgShape)

                editor.setMorphTarget(trgShape, index=idx, connectOriginal=useOriginalMorphTarget)

                if useComponentLookup:
                    editor.insertComponentMatch(index=idx)

            settableAttrs = [ 'morphMode',
                              'morphSpace',
                              'useComponentLookup',
                              'useOriginalMorphTarget' ]

            cls.setNodeAttributes(deformerNode, kwargs, settableAttrs)
            returnedNodes.append(deformerNode)

        return cls.finalizeCommand(returnedNodes)

    def addBasicDeformerDialogWidgets(self):

        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}

        with ui_utils.AttributeLayoutManager():

            opts = [ (maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kLabelOptMorphModeAbsolute' ], eMorphMode.kAbsolute),
                     (maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kLabelOptMorphModeRelative' ], eMorphMode.kRelative),
                     (maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kLabelOptMorphModeSurface' ], eMorphMode.kSurface),
                     (maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kLabelOptMorphModeRetarget' ], eMorphMode.kRetarget),
                     (maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kLabelOptMorphModeMirror' ], eMorphMode.kMirror) ]
            widget, lookup = ui_utils.createOptionMenu(maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kLabelMorphMode' ], options=opts, changeCommand=self._onMorphMode)
            self.optionMenuGrp_labelToEnum['morphMode'] = lookup
            widgetDict['morphMode'] = (maya.cmds.optionMenuGrp, widget)

            opts = [ (maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kLabelOptMorphSpaceAbsolute' ], eMorphSpace.kObject),
                     (maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kLabelOptMorphSpaceRelative' ], eMorphSpace.kWorld) ]
            widget, lookup = ui_utils.createOptionMenu(maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kLabelMorphSpace' ], options=opts)
            self.optionMenuGrp_labelToEnum['morphSpace'] = lookup
            widgetDict['morphSpace'] = (maya.cmds.optionMenuGrp, widget)
            self.morphSpace = widget

            widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kUseOriginalMorphTarget' ],
                                annotation=maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kAnnotUseOriginalMorphTarget' ])
            widgetDict['useOriginalMorphTarget'] = (maya.cmds.checkBoxGrp, widget)
            self.useOriginalMorphTargetWidget = widget

            widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kUseComponentLookup' ],
                                annotation=maya.stringTable['y_maya_internal_nodes_morph_cmd_create.kAnnotUseComponentLookup' ])
            widgetDict['useComponentLookup'] = (maya.cmds.checkBoxGrp, widget)
            self.useComponentLookup = widget

        return widgetDict

    def _enable(self, morphMode):
        maya.cmds.control(self.useOriginalMorphTargetWidget, edit=True, enable=(morphMode==eMorphMode.kRelative))
        maya.cmds.control(self.useComponentLookup, edit=True, enable=(morphMode!=eMorphMode.kMirror))
        maya.cmds.control(self.morphSpace, edit=True, enable=(morphMode!=eMorphMode.kRetarget and morphMode!=eMorphMode.kMirror))

    def _onMorphMode(self, morphMode):
        morphMode = self.optionMenuGrp_labelToEnum['morphMode'][morphMode]
        self._enable(morphMode)

    def _onUpdateWidgets(self, *args):
        ''' Override from the base class
        '''
        optionVarDict = self.getWidgetValues()
        morphMode = optionVarDict.get('morphMode', None)
        self._enable(morphMode)

    def updateWindow(self):
        self._onUpdateWidgets()
        super(Command, self).updateWindow()
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
