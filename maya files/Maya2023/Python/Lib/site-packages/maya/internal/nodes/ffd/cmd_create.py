"""
ffd -
    Module containing functions to create setup with the ffd node
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


from builtins import object
import maya.cmds

import maya.internal.common.cmd.deformer as cmddeformer
import maya.internal.common.utils.message as msg_utils
import maya.internal.common.utils.ui as ui_utils

import maya.internal.nodes.ffd.node_interface as ifc

class eOutsideLatticeMode(object):
    kInside = 0
    kAll = 1
    kFalloff = 2

# ------------------------------------------------------------------------------
# Command
# ------------------------------------------------------------------------------
class Command(cmddeformer.Command):
    def __init__(self):
        super(Command, self).__init__()

        self.commandName = 'Ffd'
        self.commandHelpTag	= 'Ffd'
        self.commandDescription = maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeCommandDescription' ]
        self.commandTitle = maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeCommandTitle' ]
        self.defaultWindowSize = [500, 450]

        self.optionVarCategory = 'Deform.Lattice'
        self.optionVarPrefix = 'Ffd'
        self.optionVarDefaults.update( {
            'divisions': [2, 5, 2],
            'localDivisions': [2, 2, 2],
            'localMode': True,
            'bindToOriginalGeometry': False,
            'freezeGeometry': False,

            'centerObject': True,
            'commonParent': False,
            'autoParent': False,

            'outsideLattice': eOutsideLatticeMode.kInside,
            'outsideFalloffDist': 1.0 } )

    @classmethod
    def command(cls, **kwargs):
        '''Ffd deformer command
        '''
        returnedNodes = list()
        selectNodes = None

        # Build the arguments for the lattice command from the optionVars in kwargs
        argDict = Command.getDeformerCommandArgs(**kwargs)

        if kwargs.get('localMode'):
            ld = kwargs.get('localDivisions')
            argDict['ldv'] =  (ld[0], ld[1], ld[2])

        div = kwargs.get('divisions')
        argDict['divisions'] =  (div[0], div[1], div[2])
        argDict['oc'] = kwargs.get('centerObject')
        argDict['cp'] = kwargs.get('commonParent')
        #argDict[_NOL10N('fm')] = kwargs.get(_NOL10N('freezeGeometry'))
        #argDict[_NOL10N('ol')] = outsideMode
        #if outsideMode == eOutsideLatticeMode.kFalloff:
        #    argDict[_NOL10N('ofd')] = kwargs.get(_NOL10N('outsideFalloffDist'))

        # Get the current selection we might want to use as the new parent when
        # autoParent is turned on
        selectedParent = None
        autoParent = kwargs.get('autoParent')
        if autoParent:
            sel = maya.cmds.ls(selection=True, tail=2)
            if len(sel) != 1:
                msg_utils.showError(maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeAutoparentSelError'])
                autoParent = False
            else:
                selectedParent = sel[0]

        result = maya.cmds.lattice( **argDict)

        if result is not None:
            deformerNode = result[0]

            editor = ifc.NodeInterface(deformerNode)

            if autoParent:
                editor.parentLattices(selectedParent)

            selectNodes = [ editor.getLattice() ]
            returnedNodes.append(editor.getLattice())
            returnedNodes.append(editor.getBaseLattice())

            settableAttrs = [ 'bindToOriginalGeometry', 'freezeGeometry', 'outsideLattice', 'outsideFalloffDist' ]
            cls.setNodeAttributes(deformerNode, kwargs, settableAttrs)

            returnedNodes.append(deformerNode)

        return cls.finalizeCommand(createdNodes=returnedNodes, selectNodes=selectNodes)

    def addBasicDeformerDialogWidgets(self):

        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}

        with ui_utils.AttributeLayoutManager():
            widget = ui_utils.intFieldGrp(maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeLabelDivisions' ], numberOfFields=3)
            widgetDict['divisions'] = (maya.cmds.intFieldGrp, widget)

            widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeLabelLocalMode' ],
                                        onCommand1=self._onUpdateWidgets,
                                        offCommand1=self._onUpdateWidgets)
            widgetDict['localMode'] = (maya.cmds.checkBoxGrp, widget)

            widget = ui_utils.intFieldGrp(maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeLabelLocalDivisions' ], numberOfFields=3)
            widgetDict['localDivisions'] = (maya.cmds.intFieldGrp, widget)
            self.localDivisions = widget

            ui_utils.addSeparatorLine()

            widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeLabelCenterObject' ], annotation=maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeAnnotCenterObject' ])
            widgetDict['centerObject'] = (maya.cmds.checkBoxGrp, widget)

            widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeLabelCommonParent' ], annotation=maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeAnnotCommonParent' ])
            widgetDict['commonParent'] = (maya.cmds.checkBoxGrp, widget)

            widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeLabelAutoParent' ], annotation=maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeAnnotAutoParent' ])
            widgetDict['autoParent'] = (maya.cmds.checkBoxGrp, widget)

            widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeLabelFreezeGeom' ], annotation=maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeAnnotFreezeGeom' ])
            widgetDict['freezeGeometry'] = (maya.cmds.checkBoxGrp, widget)

            widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeLabelBindOriginalGeom' ], annotation=maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeAnnotBindOriginalGeom' ])
            widgetDict['bindToOriginalGeometry'] = (maya.cmds.checkBoxGrp, widget)

            ui_utils.addSeparatorLine()

            opts = [ (maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeLabelOptOutsideModeInside' ], eOutsideLatticeMode.kInside),
                    (maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeLabelOptOutsideModeAll' ], eOutsideLatticeMode.kAll),
                    (maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeLabelOptOutsideModeFalloff' ], eOutsideLatticeMode.kFalloff) ]

            widget, lookup = ui_utils.createOptionMenu(maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeLabelTransformMode'],
                                                    options=opts,
                                                    annotation=maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeAnnotTransformMode' ])
            self.optionMenuGrp_labelToEnum['outsideLattice'] = lookup
            maya.cmds.optionMenuGrp(widget, edit=True, cc=self._onUpdateWidgets)
            widgetDict['outsideLattice'] = (maya.cmds.optionMenuGrp, widget)

            widget = ui_utils.floatFieldGrp(maya.stringTable['y_maya_internal_nodes_ffd_cmd_create.kLatticeLabelFalloffDistance' ])
            widgetDict['outsideFalloffDist'] = (maya.cmds.floatFieldGrp, widget)
            self.outsideFalloffDist = widget

        return widgetDict

    def _onUpdateWidgets(self, *args):

        optionVarDict = self.getWidgetValues()
        localOn = optionVarDict.get('localMode', None)
        if localOn is not None:
            maya.cmds.control(self.localDivisions, edit=True, enable=localOn)

        outsideMode = optionVarDict.get('outsideLattice', None)
        if outsideMode is not None:
            useDist = outsideMode==eOutsideLatticeMode.kFalloff
            maya.cmds.control(self.outsideFalloffDist, edit=True, enable=useDist)

    def updateWindow(self):
        self._onUpdateWidgets()
        super(Command, self).updateWindow()



# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
