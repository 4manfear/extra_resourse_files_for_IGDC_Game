"""
tension -
    Module containing functions to create setup with the tension node
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


import maya.cmds

import maya.internal.common.cmd.deformer as cmddeformer
import maya.internal.common.utils.ui as ui_utils

# ------------------------------------------------------------------------------
# Command
# ------------------------------------------------------------------------------
class Command(cmddeformer.Command):
    def __init__(self):
        super(Command, self).__init__()

        self.commandName = 'Tension'
        self.commandHelpTag	= 'Tension'
        self.commandDescription = maya.stringTable['y_maya_internal_nodes_tension_cmd_create.kTensionCommandDescription' ]
        self.commandTitle = maya.stringTable['y_maya_internal_nodes_tension_cmd_create.kTensionCommandTitle' ]
        self.defaultWindowSize = [500, 475]

        self.optionVarCategory = 'Deform.Tension'
        self.optionVarPrefix = 'Tension'
        self.optionVarDefaults.update( {
            'smoothingIterations': 10,
            'smoothingStep': 0.5,
            'pinBorderVertices': True,
            'inwardConstraint': 0.0,
            'outwardConstraint': 0.0,
            'squashConstraint': 1.0,
            'stretchConstraint': 1.0,
            'shearStrength': 0.0,
            'bendStrength': 0.0,
            'relative': 0.0  } )

    @classmethod
    def command(cls, **kwargs):
        '''Tension deformer command
        '''
        returnedNodes = list()

        # Create the deformer node using the generic command
        result = cmddeformer.Command.createDeformer(deformerType='tension', **kwargs)

        if result is not None:
            deformerNode = result[0]

            settableAttrs = [ 'smoothingIterations', 'smoothingStep' ,
                            'pinBorderVertices', 'displacement',
                            'inwardConstraint', 'outwardConstraint',
                            'squashConstraint', 'stretchConstraint',
                            'shearStrength', 'bendStrength',
                            'relative' ]
            cls.setNodeAttributes(deformerNode, kwargs, settableAttrs)
            returnedNodes.append(deformerNode)

        return cls.finalizeCommand(returnedNodes)

    def addBasicDeformerDialogWidgets(self):

        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}

        with ui_utils.AttributeLayoutManager():
            widget = ui_utils.intSliderGrp(maya.stringTable['y_maya_internal_nodes_tension_cmd_create.kTensionLabelSmoothingIterations' ], 0, 100)
            widgetDict['smoothingIterations'] = (maya.cmds.intSliderGrp, widget)

            widget = ui_utils.floatSliderGrp(maya.stringTable['y_maya_internal_nodes_tension_cmd_create.kTensionLabelSmoothingStep' ], 0, 1)
            widgetDict['smoothingStep'] = (maya.cmds.floatSliderGrp, widget)

            widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_nodes_tension_cmd_create.kTensionLabelPinBorderVerts' ])
            widgetDict['pinBorderVertices'] = (maya.cmds.checkBoxGrp, widget)

            widget = ui_utils.floatSliderGrp(maya.stringTable['y_maya_internal_nodes_tension_cmd_create.kTensionLabelRelative' ], 0, 1)
            widgetDict['relative'] = (maya.cmds.floatSliderGrp, widget)

        with ui_utils.HeaderLayoutManager(maya.stringTable['y_maya_internal_nodes_tension_cmd_create.kTensionLabelConstraints' ]):
            with ui_utils.AttributeLayoutManager():

                widget = ui_utils.floatSliderGrp(maya.stringTable['y_maya_internal_nodes_tension_cmd_create.kTensionLabelInwardConstraint' ], 0, 1)
                widgetDict['inwardConstraint'] = (maya.cmds.floatSliderGrp, widget)

                widget = ui_utils.floatSliderGrp(maya.stringTable['y_maya_internal_nodes_tension_cmd_create.kTensionLabelOutwardConstraint' ], 0, 1)
                widgetDict['outwardConstraint'] = (maya.cmds.floatSliderGrp, widget)

                ui_utils.addSeparatorLine()
                widget = ui_utils.floatSliderGrp(maya.stringTable['y_maya_internal_nodes_tension_cmd_create.kTensionLabelSquashConstraint' ], 0, 1)
                widgetDict['squashConstraint'] = (maya.cmds.floatSliderGrp, widget)

                widget = ui_utils.floatSliderGrp(maya.stringTable['y_maya_internal_nodes_tension_cmd_create.kTensionLabelStretchConstraint' ], 0, 1)
                widgetDict['stretchConstraint'] = (maya.cmds.floatSliderGrp, widget)

                ui_utils.addSeparatorLine()
                widget = ui_utils.floatSliderGrp(maya.stringTable['y_maya_internal_nodes_tension_cmd_create.kTensionLabelShearStrength' ], 0, 1)
                widgetDict['shearStrength'] = (maya.cmds.floatSliderGrp, widget)

                widget = ui_utils.floatSliderGrp(maya.stringTable['y_maya_internal_nodes_tension_cmd_create.kTensionLabelBendStrength' ], 0, 1)
                widgetDict['bendStrength'] = (maya.cmds.floatSliderGrp, widget)

        return widgetDict

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
