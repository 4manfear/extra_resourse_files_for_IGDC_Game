from maya.internal.common.node_interface import NodeInterface as BaseNodeInterface
from maya.internal.nodes.componentfalloff.node_interface import NodeInterface as ComponentFalloffNodeInterface
import maya.internal.common.utils.connections as con_utils
import maya.internal.common.utils.falloff as fo_utils
import maya.cmds

class NodeInterface(BaseNodeInterface, fo_utils.FalloffAssignMixinInterface):
    _mayaNodeType = 'blendFalloff'

    def __init__(self, nodeName):
        super(NodeInterface, self).__init__(nodeName)

    # --------------------------------------------------------------------------
    # Plug names
    # --------------------------------------------------------------------------
    def targetPlugName(self, index = None):
        if index is None:
            return '{}.target'.format(self.getEditNode())
        else:
            return u'{}.target[{}]'.format(self.getEditNode(), index)

    def weightPlugName(self, index):
        return '{}.weight'.format(self.targetPlugName(index))

    def modePlugName(self, index):
        return '{}.mode'.format(self.targetPlugName(index))

    def weightFunctionPlugName(self, index=None):
        if index == None:
            return None# no root plug for blendfalloff
        return '{}.weightFunction'.format(self.targetPlugName(index))

    # --------------------------------------------------------------------------
    # Indices
    # --------------------------------------------------------------------------
    def getIndices(self):
        return maya.cmds.getAttr(self.targetPlugName(),  multiIndices=True) or []

    def getFreeIndex(self):
        indices = sorted(self.getIndices())
        return 0 if len(indices) == 0 else (indices[-1] + 1)

    # --------------------------------------------------------------------------
    # Items
    # --------------------------------------------------------------------------
    def appendItem(self, weight=None):
        newIndex = self.getFreeIndex()
        self.setWeight(newIndex, 1.0 if weight is None else weight)
        return newIndex

    def deleteItem(self, index):
        if index is not None and index >= 0:
            maya.cmds.removeMultiInstance(self.targetPlugName(index), b=True)
            return True
        return False

    def moveItem(self, moveIndex, delta):
        if delta == 0:
            return False
        multiIndices = self.getIndices()
        try:
            ip = multiIndices.index(moveIndex)
        except:
            return False

        reorderList = con_utils.moveItemInList(multiIndices, ip, delta)
        if reorderList == multiIndices:
            return False

        changes = list()
        for (oi, ni) in zip(multiIndices, reorderList):
            if oi == ni:
                changes.append(None)
            else:
                wt = self.getWeight(ni)
                md = self.getWeightMode(ni)
                src = self.getFalloffSourcePlug(ni)
                changes.append((wt, md, src))

        for (oi, ch) in zip(multiIndices, changes):
            if ch is not None:
                wt, md, src = ch
                self.setFalloffSourcePlug(oi, src)
                self.setWeight(oi, wt)
                self.setWeightMode(oi, md)

        return True

    # --------------------------------------------------------------------------
    # Weight
    # --------------------------------------------------------------------------
    def getWeight(self,index):
        return maya.cmds.getAttr(self.weightPlugName(index))

    def setWeight(self, index, weight):
        maya.cmds.setAttr(self.weightPlugName(index), weight)
        return True

    # --------------------------------------------------------------------------
    # Mode
    # --------------------------------------------------------------------------
    def getWeightMode(self,index):
        return maya.cmds.getAttr(self.modePlugName(index))

    def setWeightMode(self, index, weight):
        maya.cmds.setAttr(self.modePlugName(index), weight)
        return True

    # --------------------------------------------------------------------------
    # Info
    # --------------------------------------------------------------------------
    def _getTableIndexData(self, index):
        src = self.getFalloffSourcePlug(index)
        return (index, src)

    def getTableData(self):
        a = list()
        indices = self.getIndices()
        for index in indices:
            a.append(self._getTableIndexData(index))
        return a

    # --------------------------------------------------------------------------
    # Paint
    # --------------------------------------------------------------------------
    def paintablePlugs(self):
        indices = self.getIndices()
        plugs = list()
        for i in indices:
            plug = self.getFalloffSourcePlug(i)
            if plug is not None:
                node = con_utils.plugNode(plug)
                t = maya.cmds.nodeType(node)

                if t == 'componentFalloff':
                    plugs += ComponentFalloffNodeInterface(node).paintablePlugs(con_utils.plugMultiIndex(plug, 'outputWeightFunction'))
                elif t == 'blendFalloff':
                    plugs += NodeInterface(node).paintablePlugs()

        return plugs# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
