"""
morph  -
    Module containing functions to edit the morph node
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


import maya.cmds

import maya.internal.common.utils.message as msg_utils
import maya.internal.common.utils.geometry as geo_utils
import maya.internal.common.utils.connections as con_utils
import maya.internal.nodes.geometryfilter.node_interface as gf_ifc

# ------------------------------------------------------------------------------
class NodeInterface(gf_ifc.NodeInterface):
    _mayaNodeType = 'morph'

    def __init__(self, nodeName):
        super(NodeInterface, self).__init__(nodeName)

    # --------------------------------------------------------------------------
    # Plug names
    # --------------------------------------------------------------------------
    def targetPlugName(self, index = None):
        if index is None:
            return '{}.morphTarget'.format(self.getEditNode())
        else:
            return u'{}.morphTarget[{}]'.format(self.getEditNode(), index)

    def originalTargetPlugName(self, index = None):
        if index is None:
            return '{}.originalMorphTarget'.format(self.getEditNode())
        else:
            return u'{}.originalMorphTarget[{}]'.format(self.getEditNode(), index)

    def componentLookupPlugName(self, index = None):
        if index is None:
            return '{}.componentLookupList'.format(self.getEditNode())
        else:
            return u'{}.componentLookupList[{}].componentLookup'.format(self.getEditNode(), index)

    def inputGeomPlugName(self, index):
        return u'{}.input[{}].inputGeometry'.format(self.getEditNode(), index)

    # --------------------------------------------------------------------------
    # Target
    # --------------------------------------------------------------------------
    def setMorphTarget(self, shapeNode, index, connectOriginal=False):
        if connectOriginal:
            origPlug = geo_utils.getOrCreateOriginalGeometry(shapeNode)
            maya.cmds.connectAttr(origPlug, self.originalTargetPlugName(index), force=True)

        worldAttr = geo_utils.getWorldShapeOutAttr(shapeNode)
        maya.cmds.connectAttr(u'{0}.{1}[0]'.format(shapeNode,worldAttr), self.targetPlugName(index), force=True)
        return True


    def getMorphTarget(self, index):
        return con_utils.getSourcePlug(self.targetPlugName(index))

    def getInputGeom(self, index):
        return con_utils.getSourcePlug(self.inputGeomPlugName(index))

    # --------------------------------------------------------------------------
    # Target
    # --------------------------------------------------------------------------
    def insertComponentMatch(self, index):
        trg = self.getMorphTarget(index)
        if trg is None:
            msg_utils.showError(maya.stringTable['y_maya_internal_nodes_morph_node_interface.kErrMsgNoTarget' ])
            return False

        bnd = self.getInputGeom(index)
        if bnd is None:
            msg_utils.showError(maya.stringTable['y_maya_internal_nodes_morph_node_interface.kErrMsgNoInput' ])
            return False

        orgTrg = maya.cmds.geometryAttrInfo(self.targetPlugName(index), og=True)[0]
        orgBnd = maya.cmds.geometryAttrInfo(self.inputGeomPlugName(index), og=True)[0]

        if orgTrg and orgBnd:
            topMatchNode = maya.cmds.createNode('componentMatch')
            maya.cmds.connectAttr(orgBnd, '{}.inputGeometry'.format(topMatchNode), force=True)
            maya.cmds.connectAttr(orgTrg, '{}.targetGeometry'.format(topMatchNode), force=True)
            maya.cmds.connectAttr('{}.componentLookup'.format(topMatchNode), self.componentLookupPlugName(index), force=True)
        return True
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
