"""
sine -
    Module containing functions to create setup with the sine deformer
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


import maya.cmds

import maya.internal.common.cmd.deformer as cmddeformer
import maya.internal.common.utils.ui as ui_utils

# ------------------------------------------------------------------------------
# Command
# ------------------------------------------------------------------------------
class Command(cmddeformer.Command):

    def __init__(self):
        super(Command, self).__init__()

        self.commandName = 'Sine'
        self.commandHelpTag	= 'Sine'
        self.commandDescription = maya.stringTable['y_maya_internal_nodes_sine_cmd_create.kSineCommandDescription' ]
        self.commandTitle = maya.stringTable['y_maya_internal_nodes_sine_cmd_create.kSineCommandTitle' ]
        self.optionVarCategory = 'Deform.Sine'
        self.optionVarPrefix = 'Sine'
        self.optionVarDefaults.update( {
            'lowBound': -1.0,
            'highBound': 1.0,
            'amplitude': 0.0,
            'wavelength': 2.0,
            'dropoff': 0.0,
            'offset': 0.0 } )

    @classmethod
    def command(cls, **kwargs):
        '''Sine deformer
        '''
        returnedNodes = list()

        result = cmddeformer.Command.createNonLinearDeformer(deformerType='sine', **kwargs)

        if result is not None:
            deformerNode = result[0]

            settableAttrs = [ 'lowBound',
                              'highBound',
                              'amplitude',
                              'wavelength',
                              'dropoff',
                              'offset' ]

            cls.setNodeAttributes(deformerNode, kwargs, settableAttrs)

            returnedNodes.append(deformerNode)

        return cls.finalizeCommand(returnedNodes)

    def addBasicDeformerDialogWidgets(self):

        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}

        with ui_utils.AttributeLayoutManager():
            widget = ui_utils.floatSliderGrp(maya.stringTable['y_maya_internal_nodes_sine_cmd_create.kSineLabelLowBound' ], -10, 0.0, llim=False)
            widgetDict['lowBound'] = (maya.cmds.floatSliderGrp, widget)

            widget = ui_utils.floatSliderGrp(maya.stringTable['y_maya_internal_nodes_sine_cmd_create.kSineLabelHighBound' ], 0.0, 10.0, ulim=False)
            widgetDict['highBound'] = (maya.cmds.floatSliderGrp, widget)

            widget = ui_utils.floatSliderGrpNoLimit(maya.stringTable['y_maya_internal_nodes_sine_cmd_create.kSineLabelAmplitude' ], -5.0, 5.0)
            widgetDict['amplitude'] = (maya.cmds.floatSliderGrp, widget)

            widget = ui_utils.floatSliderGrpNoLimit(maya.stringTable['y_maya_internal_nodes_sine_cmd_create.kSineLabelWaveLength' ], -0.1, 10.0)
            widgetDict['wavelength'] = (maya.cmds.floatSliderGrp, widget)

            widget = ui_utils.floatSliderGrp(maya.stringTable['y_maya_internal_nodes_sine_cmd_create.kSineLabelDropoff' ], -1.0, 1.0, step=0.1)
            widgetDict['dropoff'] = (maya.cmds.floatSliderGrp, widget)

            widget = ui_utils.floatSliderGrpNoLimit(maya.stringTable['y_maya_internal_nodes_sine_cmd_create.kSineLabelOffset' ], -10.0, 10.0)
            widgetDict['offset'] = (maya.cmds.floatSliderGrp, widget)

        return widgetDict

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
