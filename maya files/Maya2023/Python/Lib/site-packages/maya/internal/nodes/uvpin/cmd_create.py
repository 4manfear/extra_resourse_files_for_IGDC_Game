"""
uvPin -
    Module containing functions to create setup with the uvPin node
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


from builtins import object
import maya.cmds

import maya.internal.common.cmd.base as cmdbase
import maya.internal.common.utils.message as msg_utils
import maya.internal.common.utils.geometry as geo_utils
import maya.internal.common.utils.ui as ui_utils
import maya.internal.nodes.uvpin.node_interface as ifc
import maya.internal.nodes.common.pin.node_interface as pin_ifc
from maya.common.ui import ParentManager

annotPinUVSetupMode = maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinAnnotSetupMode' ]

# ------------------------------------------------------------------------------
#
# Enum types
#
# ------------------------------------------------------------------------------

class ePinUVSetupMode(object):
    kComponents = 0
    kTransforms = 1


# ------------------------------------------------------------------------------
#
# Command
#
# ------------------------------------------------------------------------------

class Command(cmdbase.Command):
    def __init__(self):
        super(Command, self).__init__()

        self.commandName = 'UVPin'
        self.commandHelpTag	= 'UVPin'
        self.commandDescription = maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinCommandDescription' ]
        self.commandTitle = maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinCommandTitle' ]
        self.defaultWindowSize = [500, 375]
        self.optionVarCategory = 'Animation.Constrain.UV Pin'
        self.optionVarPrefix = 'UVPin'
        self.optionVarDefaults = {
            'normalAxis': pin_ifc.eAxisType.kXAxis,
            'tangentAxis': pin_ifc.eAxisType.kYAxis,
            'outputConnect':  pin_ifc.eXformIO.kCurrent,
            'setupMode' : ePinUVSetupMode.kTransforms,
            'uvSetName' : '',
            'normalizedIsoParms':  True }

    @classmethod
    def command(cls,
                setupMode=ePinUVSetupMode.kTransforms,
                outputConnect=pin_ifc.eXformIO.kCurrent,
                **kwargs):
        '''Create a uvPin node
        '''
        returnedNodes = list()

        if setupMode == ePinUVSetupMode.kComponents and outputConnect == pin_ifc.eXformIO.kCurrent:
            msg_utils.showError(maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinErrMsgOutputMode' ])
            return returnedNodes

        selectedObjects = maya.cmds.ls(selection=True, objectsOnly=True)
        geomShapeNode = geo_utils.getGeometryNode(selectedObjects[0]) if len(selectedObjects) > 0 else None

        if geomShapeNode is None:
            msg_utils.showError(maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinErrMsgSelectionGeometry' ])
            return returnedNodes

        normalizedIsoParms = kwargs.get('normalizedIsoParms', True)
        uvSetName = kwargs.get('uvSetName', '')
        allowCreateWithoutInputs = kwargs.get('allowCreateWithoutInputs', True)
        result = list()

        if setupMode == ePinUVSetupMode.kTransforms:
            geomuvs, resStat = geo_utils.getUvsFromClosestPointToTransforms(selectedObjects[0], selectedObjects[1:], normalizedIsoParms=normalizedIsoParms, uvSet=uvSetName)
            result = [ geomuvs ] if geomuvs else [ ]
        elif setupMode == ePinUVSetupMode.kComponents:
            result, resStat = geo_utils.getUvsFromSelection(normalizedIsoParms=normalizedIsoParms, uvSet=uvSetName)

        if resStat != geo_utils.eCollectUvsStatus.kSuccess:
            # Return immediately if we encountered an error
            if (resStat == geo_utils.eCollectUvsStatus.kNoSelection):
                msg_utils.showError(maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinErrMsgNoSelection' ])
            elif (resStat == geo_utils.eCollectUvsStatus.kIncompatibleComponents):
                msg_utils.showError(maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinErrMsgIncompatibleComponents' ])
            elif (resStat == geo_utils.eCollectUvsStatus.kNoUvSet):
                msg_utils.showError(maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinErrMsgMissingUvSet' ])
            elif (resStat == geo_utils.eCollectUvsStatus.kFail):
                msg_utils.showError(maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinErrMsgFail' ])
            elif (resStat == geo_utils.eCollectUvsStatus.kNoGeometry):
                msg_utils.showError(maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinErrMsgNoGeometry' ])
            elif (resStat == geo_utils.eCollectUvsStatus.kNoTransforms):
                msg_utils.showError(maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinErrMsgNoTransforms' ])

            return cls.finalizeCommand(returnedNodes)

        skipCreate = (len(result) == 0)

        for r in result:

            if len(r) == 4:
                geomShapeNode, uvSet, uvs, targets = r
            else:
                geomShapeNode, uvSet, uvs = r
                targets = []

            if not allowCreateWithoutInputs and len(uvs) == 0:
                skipCreate = True
                continue

            # Make a new node
            pinNode = maya.cmds.createNode('uvPin')
            returnedNodes.append(pinNode)

            settableAttrs = [ 'normalAxis', 'tangentAxis', 'normalizedIsoParms' ]
            cls.setNodeAttributes(pinNode, kwargs, settableAttrs)

            # Add the inputs
            editor = ifc.NodeInterface(pinNode)

            editor.setGeometry(geomShapeNode)
            if uvSet is not None:
                editor.setUvSetName(uvSet)
            indices = editor.addInputs(uvs)
            returnedNodes.extend(editor.hookupOutputs(outputConnect=outputConnect, indices=indices, targets=targets))


        if len(returnedNodes) == 0 and skipCreate:
            msg_utils.showError(maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinErrMsgNoNodeCreated' ])

        return cls.finalizeCommand(returnedNodes)

    def addOptionDialogWidgets(self):
        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}

        ui_utils.createCommandDescriptionLayout(self.commandDescription)
        with ParentManager(ui_utils.createCommandSettingsLayout()):
            widgetDict.update(self.addBasicDialogWidgets())

        return widgetDict

    def addBasicDialogWidgets(self):
        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}

        with ui_utils.HeaderLayoutManager(maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUvPinLabelConnections' ]):
            with ui_utils.AttributeLayoutManager():

                opts = [ (maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinLabelOptPinUVSetupComponents' ], ePinUVSetupMode.kComponents),
                        (maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinLabelOptPinUVSetupTransforms' ], ePinUVSetupMode.kTransforms) ]

                widget, lookup = ui_utils.createOptionMenu(maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinLabelPinUVSetupMode'],
                                                        options=opts,
                                                        annotation=annotPinUVSetupMode)
                self.optionMenuGrp_labelToEnum['setupMode'] = lookup
                widgetDict['setupMode'] = (maya.cmds.optionMenuGrp, widget)

                widget, lookup = pin_ifc.createXformIOMenu(label=pin_ifc.labelOutputConnect, annotation=pin_ifc.annotOutputConnect)
                self.optionMenuGrp_labelToEnum['outputConnect'] = lookup
                widgetDict['outputConnect'] = (maya.cmds.optionMenuGrp, widget)
                self.outputConnectMenu = widget

        with ui_utils.HeaderLayoutManager(maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUvPinLabelCoordinates' ]):
            with ui_utils.AttributeLayoutManager():

                pin_ifc.createCoordSysWidgets(self)
                widgetDict['normalAxis'] = (maya.cmds.optionMenuGrp, self.normalMenu)
                widgetDict['tangentAxis'] = (maya.cmds.optionMenuGrp, self.tangentMenu)

                widget = ui_utils.textFieldGrp(pin_ifc.labelUVSet, annotation=pin_ifc.annotUVSet)
                widgetDict['uvSetName'] = (maya.cmds.textFieldGrp, widget)

                widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUVPinLabelNormalizedIsoParms'],
                                    annotation=maya.stringTable['y_maya_internal_nodes_uvpin_cmd_create.kUvPinAnnotNormalizedIsoParms' ])
                widgetDict['normalizedIsoParms'] = (maya.cmds.checkBoxGrp, widget)

        return widgetDict

    def _onUpdateNormalAxis(self, *args):
        pin_ifc.resolveConflictingAxisOptionBox(self, checkNormalAxis=True)

    def _onUpdateTangentAxis(self, *args):
        pin_ifc.resolveConflictingAxisOptionBox(self, checkNormalAxis=False)

    def updateWindow(self):
        pin_ifc.capturePrevAxis(self)
        super(Command, self).updateWindow()

    def customApplyAndCloseButtonLabel(self):
        return maya.stringTable[ 'y_maya_internal_nodes_uvpin_cmd_create.kGetApplyAndClose' ]
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
