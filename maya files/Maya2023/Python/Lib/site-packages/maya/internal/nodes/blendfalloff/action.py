import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds as cmds
import maya.internal.common.utils.connections as con_utils
import maya.internal.common.utils.falloff as fo_utils
import maya.internal.common.utils.ui as ui_utils
from maya.internal.nodes.componentfalloff.node_interface import NodeInterface as ComponentFalloffNodeInterface

from PySide2 import QtWidgets, QtCore

PRIMITIVE_ICON = ui_utils.createIcon(':/falloff_primitive.png')
UNIFORM_ICON = ui_utils.createIcon(':/falloff_uniform.png')
BLEND_ICON = ui_utils.createIcon(':/falloff_blend.png')
COMPONENT_ICON = ui_utils.createIcon(':/falloff_component.png')
TRANSFER_ICON = ui_utils.createIcon(':/falloff_transfer.png')
PROXIMITY_ICON = ui_utils.createIcon(':/falloff_proximity.png')
SUBSET_ICON = ui_utils.createIcon(':/falloff_subset.png')
GENERIC_ICON = ui_utils.createIcon(':/falloff_generic.png')

primitiveFalloffLabel = maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionPrimitiveFalloff' ]
uniformFalloffLabel = maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionUniformFalloff' ]
blendFalloffLabel = maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionBlendFalloff' ]
proximityFalloffLabel = maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionProximityFalloff' ]
subsetFalloffLabel = maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionSubsetFalloff' ]
componentFalloffLabel = maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionCompFalloff' ]
transferFalloffLabel = maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionTransferFalloff' ]
genericFalloffLabel = maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionMiscFalloff' ]

iconLookup = {
        'primitiveFalloff' : PRIMITIVE_ICON,
        'uniformFalloff' : UNIFORM_ICON,
        'blendFalloff' : BLEND_ICON,
        'proximityFalloff' :  PROXIMITY_ICON,
        'subsetFalloff' :  SUBSET_ICON,
        'componentFalloff' : COMPONENT_ICON,
        'transferFalloff' :  TRANSFER_ICON }

labelLookup = {
        'primitiveFalloff' : primitiveFalloffLabel,
        'uniformFalloff' : uniformFalloffLabel,
        'blendFalloff' : blendFalloffLabel,
        'proximityFalloff' : proximityFalloffLabel,
        'subsetFalloff' : subsetFalloffLabel,
        'componentFalloff' : componentFalloffLabel,
        'transferFalloff' :  transferFalloffLabel }

#-------------------------------------------------------------------------------
def iconForFalloffType(nodeType):
    return iconLookup.get(nodeType, GENERIC_ICON)

#-------------------------------------------------------------------------------
def iconForFalloffSource(sourcePlug):
    if sourcePlug:
        return iconForFalloffType(maya.cmds.nodeType(sourcePlug))
    else:
        return None

#-------------------------------------------------------------------------------
def labelForFalloffType(nodeType):
    return labelLookup.get(nodeType, genericFalloffLabel)

#-------------------------------------------------------------------------------
class eAction(object):
    kNew = 0
    kExisting = 1
    kPaint = 2

#-------------------------------------------------------------------------------
class Action(QtWidgets.QAction):
    def __init__(self, name, parent, actId):
        super(Action, self).__init__(name, parent)
        self.actId = actId
        self.falloff = name
        self.falloffType = None
        self.falloffOutputIndex = None
        self.paintPlug = None

#-------------------------------------------------------------------------------
class MultiFalloffMenuMaker(QtCore.QObject):
    def __init__(self):
        super(MultiFalloffMenuMaker, self).__init__()
        self.falloffName = None

    def createMenu(self, parentMenu, falloffName, curValue = None):
        self.falloffName = falloffName
        self.curValue = curValue
        act = parentMenu.addAction(self.falloffName)
        self.menu = QtWidgets.QMenu(parentMenu)
        self.menu.aboutToShow.connect(self._buildMenu)
        act.setMenu(self.menu)
        return act

    @QtCore.Slot()
    def _buildMenu(self):
        self.menu.clear()

        act = Action(maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionCreateFalloffLayer' ], self.menu, eAction.kExisting)
        act.falloff = self.falloffName
        act.falloffOutputIndex = -1
        self.menu.addAction(act)

        falloffOutputs = fo_utils.getOutputs(self.falloffName)
        if (len(falloffOutputs)):
            self.menu.addSeparator()
            for fo in falloffOutputs:
                falloffName = fo[0]
                falloffOutputIndex = fo[1]
                label = fo[2]

                name = label if label is not None else maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionUnnamedFalloffLayer' ]
                if falloffOutputIndex is not None:
                    name = '{} [{}]'.format(name, falloffOutputIndex)

                act = Action(name, self.menu, eAction.kExisting)
                act.falloff = falloffName
                act.falloffOutputIndex = falloffOutputIndex

                if self.curValue is not None:
                    value = fo_utils.getOutputPlugName(falloffName, falloffOutputIndex)
                    act.setEnabled(self.curValue != value)

                self.menu.addAction(act)

#-------------------------------------------------------------------------------
class FalloffMenuMaker(QtCore.QObject):

    def __init__(self, nodeType):
        super(FalloffMenuMaker, self).__init__()
        self.nodeType = nodeType
        self.subMenuMakers = None
        self.falloffTypeLabel = labelForFalloffType(self.nodeType)

    def createMenu(self, parentMenu, actionLabel, curValue = None):
        label = '{} {}'.format(actionLabel, self.falloffTypeLabel)
        act = parentMenu.addAction(label)
        self.curValue = curValue
        self.menu = QtWidgets.QMenu(parentMenu)
        self.menu.aboutToShow.connect(self._buildMenu)
        act.setMenu(self.menu)
        act.setIcon(iconForFalloffType(self.nodeType))
        return act

    @QtCore.Slot()
    def _buildMenu(self):
        self.menu.clear()
        self.subMenuMakers = list()

        label = maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionCreateFalloff' ]
        if self.falloffTypeLabel:
            label = '{} {}'.format(label, self.falloffTypeLabel)

        act = Action(label, self.menu, eAction.kNew)
        act.falloffType = self.nodeType
        self.menu.addAction(act)

        nodes = maya.cmds.ls(type=self.nodeType)
        if (len(nodes)):
            self.menu.addSeparator()

            for falloffName in nodes:

                if not fo_utils.isMultiOutput(falloffName):

                    act = Action(falloffName, self.menu, eAction.kExisting)
                    act.falloff = falloffName

                    if self.curValue is not None:
                        value = fo_utils.getOutputPlugName(falloffName)
                        act.setEnabled(self.curValue != value)

                    self.menu.addAction(act)
                else:
                    sub = MultiFalloffMenuMaker()
                    act = sub.createMenu(self.menu, falloffName, self.curValue)
                    self.subMenuMakers.append(sub)

#-------------------------------------------------------------------------------
class FalloffContextMenuBuilder(QtCore.QObject):

    def __init__(self, actionLabel = None):
        super(FalloffContextMenuBuilder, self).__init__()
        self.actionLabel = actionLabel if actionLabel is not None else maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionLabelAssign' ]

    def _itemLabel(self, falloffTypeLabel):
        return '{} {}'.format(self.actionLabel, falloffTypeLabel)

    def appendToMenu(self, menu, curFalloff, curSourcePlug):
        self.actions = list()
        self.selectAction = menu.addAction(maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionSelectFalloff' ])
        self.selectAction.setEnabled(curFalloff is not None)
        self.actions.append(self.selectAction)

        menu.addSeparator()

        self.primitive = FalloffMenuMaker('primitiveFalloff')
        self.uniform = FalloffMenuMaker('uniformFalloff')
        self.blend = FalloffMenuMaker('blendFalloff')
        self.proximity = FalloffMenuMaker('proximityFalloff')
        self.subset = FalloffMenuMaker('subsetFalloff')

        for mm in [self.primitive, self.uniform, self.blend, self.proximity, self.subset]:
            self.actions.append(mm.createMenu(menu, self.actionLabel, curSourcePlug))

        menu.addSeparator()

        self.component = FalloffMenuMaker('componentFalloff')
        self.transfer = FalloffMenuMaker('transferFalloff')

        for mm in [self.component, self.transfer]:
            self.actions.append(mm.createMenu(menu, self.actionLabel, curSourcePlug))

        menu.addSeparator()

        self.disconnectAction = menu.addAction(maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionDisconnectFalloff' ])
        self.disconnectAction.setEnabled(curFalloff is not None)

        self.deleteAction = menu.addAction(maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionDeleteFalloff' ])
        self.deleteAction.setEnabled(curFalloff is not None)

        self.actions.append(self.disconnectAction)
        self.actions.append(self.deleteAction)

    def appendPaintMenu(self, menu, paintableAttrs):
        self.paintableAttrs = paintableAttrs
        paintLabel = '{} {}'.format(maya.stringTable['y_maya_internal_nodes_blendfalloff_action.kFalloffActionPaint' ], labelForFalloffType('componentFalloff'))
        self.paintAction = menu.addAction(paintLabel)
        self.paintAction.setEnabled(len(self.paintableAttrs) > 0)
        self.actions.append(self.paintAction)

        self.paintMenu = QtWidgets.QMenu(menu)
        self.paintMenu.aboutToShow.connect(self._buildPaintMenu)
        self.paintAction.setMenu(self.paintMenu)

    def disableAllActions(self):
        for act in self.actions:
            act.setEnabled(False)

    @QtCore.Slot()
    def _buildPaintMenu(self):
        self.paintMenu.clear()
        for plug in self.paintableAttrs:
            index = con_utils.plugMultiIndex(plug, 'weightLayers')
            if index is not None:
                nodeName = con_utils.plugNode(plug)
                gwi = ComponentFalloffNodeInterface(nodeName)
                extraLabel = gwi.getLayerName(index)
                itemLabel = '{} : {} [{}]'.format(nodeName, extraLabel, index)

                act = Action(itemLabel, self.paintMenu, eAction.kPaint)
                act.paintPlug = plug
                self.paintMenu.addAction(act)
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
