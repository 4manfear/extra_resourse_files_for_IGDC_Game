import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds
import maya.internal.common.ae.template as aetemplate
import maya.internal.common.utils.geometry as geo_utils
import maya.internal.common.utils.ui as ui_utils
import maya.internal.common.qt.buttons as qt_buttons

import maya.internal.nodes.common.pin.node_interface as pin_ifc
import maya.internal.nodes.proximitypin.node_interface as ifc
import maya.internal.nodes.proximitypin.cmd_optionvar as opv

# --------------------------------------------------------------------------------------------------------------
class ManagePinsWidget(qt_buttons.ManageMenuButtonWidget):

    def __init__(self, uiParent=None):
        super(ManagePinsWidget, self).__init__(
            label = maya.stringTable['y_maya_internal_nodes_proximitypin_ae_template.kManagePins' ],
            annotation = maya.stringTable['y_maya_internal_nodes_proximitypin_ae_template.kManagePinsAnnot' ],
            uiParent=uiParent)

        self.selectGeomAct = self.addMenuAction(maya.stringTable['y_maya_internal_nodes_proximitypin_ae_template.kSelectGeom' ], annotation=maya.stringTable['y_maya_internal_nodes_proximitypin_ae_template.kSelectGeomAnnot' ])
        self.replaceGeomAct = self.addMenuAction(maya.stringTable['y_maya_internal_nodes_proximitypin_ae_template.kReplaceGeom' ], annotation=maya.stringTable['y_maya_internal_nodes_proximitypin_ae_template.kReplaceGeomAnnot' ])
        self.addMenuSeparator()
        self.createPinAct = self.addMenuAction(maya.stringTable['y_maya_internal_nodes_proximitypin_ae_template.kCreatePins' ])
        self.addMenuSeparator()
        self.editDefaultsAct = self.addMenuAction(maya.stringTable['y_maya_internal_nodes_proximitypin_ae_template.kEditDefaultsItem' ], ':/menu_options.png')

    @ui_utils.undoChunk('replace geometry on uvPin')
    def _replaceGeometry(self, editor):
         editor.setGeometry(self.replaceGeom)

    @ui_utils.undoChunk('create pins from transforms')
    def _createPins(self, editor):
        optionVars = opv.Command().getOptionVars()
        ic = optionVars.get('inputConnect', None)
        oc = optionVars.get('outputConnect', None)

        indices, createdNodes = editor.addInputs(inputConnect=ic, transforms=self.unusedTransforms)
        editor.hookupOutputs(outputConnect=oc, indices=indices, targets=self.unusedTransforms)

    def enableMenuItems(self):
        editor = ifc.NodeInterface(self.nodeName)

        self.geom = None
        self.replaceGeom = None
        self.unusedTransforms = list()

        if editor.isValid():
            self.geom = editor.getGeometry()
            selectedShapes = geo_utils.getSelectedShapes(geomType=editor.driverGeomTypeFilter())
            if self.geom in selectedShapes:
                pass
            else:
                self.replaceGeom = selectedShapes[0] if len(selectedShapes) == 1 else None
                selected = set(maya.cmds.ls(sl=True, type='transform'))

                conInputs = set(editor.getConnectedMatrixInputs())
                conOutputs = set(editor.getConnectedMatrixOutputs())
                self.unusedTransforms = list(selected.difference(conInputs, conOutputs))

        self.selectGeomAct.setEnabled(self.geom is not None)
        self.replaceGeomAct.setEnabled(self.replaceGeom is not None)
        self.createPinAct.setEnabled(len(self.unusedTransforms) > 0)

    def actionTriggered(self, action):
        if action == self.editDefaultsAct:
            # popup the dialog to edit the defaults
            opv.Command().createDialog()
            return

        editor = ifc.NodeInterface(self.nodeName)
        if not editor.isValid():
            return

        if action == self.selectGeomAct:
            maya.cmds.select(self.geom, replace=True)
        elif action == self.replaceGeomAct:
            self._replaceGeometry(editor)
        elif action == self.createPinAct:
            self._createPins(editor)

# --------------------------------------------------------------------------------------------------------------
class AETemplate(aetemplate.Template):

    prevNormalAxis = None
    prevTangentAxis = None

    def buildUI(self, nodeName):
        AETemplate.prevNormalAxis = maya.cmds.getAttr(u"{0}.normalAxis".format(nodeName))
        AETemplate.prevTangentAxis = maya.cmds.getAttr(u"{0}.tangentAxis".format(nodeName))

        maya.cmds.editorTemplate(beginLayout=maya.stringTable['y_maya_internal_nodes_proximitypin_ae_template.kLabelPinAttr' ], collapse=False)
        self.defineQtCustom(ManagePinsWidget, 'inputMatrix')

        self.addControl('envelope')
        self.addControl('coordMode', callback=self._onUpdateCoordMode)
        self.addControl('uvSetName')
        self.addControl('normalAxis', callback=self._onUpdateNormalAxis)
        self.addControl('tangentAxis', callback=self._onUpdateTangentAxis)

        self.addControls(['offsetTranslation',
                          'offsetOrientation',
                          'normalOverride',
                          'inputMatrix'])

        self.suppress('deformedGeometry')
        self.suppress('originalGeometry')
        self.suppress('railCurve')
        self.suppress('originalRailCurve')

        maya.cmds.editorTemplate(endLayout=True)

        self.callTemplate('dependNode')

    @staticmethod
    def _onUpdateNormalAxis(nodeName):
        AETemplate.prevNormalAxis = pin_ifc.resolveConflictingAxisAttributeEditor(nodeName, AETemplate.prevNormalAxis, True)

    @staticmethod
    def _onUpdateTangentAxis(nodeName):
        AETemplate.prevTangentAxis = pin_ifc.resolveConflictingAxisAttributeEditor(nodeName, AETemplate.prevTangentAxis, False)

    @staticmethod
    def _onUpdateCoordMode(nodeName):
        crdMode = maya.cmds.getAttr(u"{0}.coordMode".format(nodeName))
        maya.cmds.editorTemplate(dimControl=[nodeName, "tangentAxis", crdMode == 0])
        maya.cmds.editorTemplate(dimControl=[nodeName, "uvSetName", crdMode == 0])


# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
