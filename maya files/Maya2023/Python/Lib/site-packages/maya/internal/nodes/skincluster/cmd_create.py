"""
proximitywrap -
    Module containing functions to create setup with the proximityWrap nodes
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


from builtins import object
import maya.cmds
import maya.api.OpenMaya as oma
import maya.internal.common.cmd.base as cmdbase
import maya.internal.nodes.proximitywrap.cmd_create as proxwrap_create
import maya.internal.common.utils.ui as ui_utils
import maya.mel

from maya.common.ui import LayoutManager


# ------------------------------------------------------------------------------
class eNormalization(object):
    kNone = 1
    kInteractive = 2
    kPost = 3

    options = [
        (maya.stringTable['y_maya_internal_nodes_skincluster_cmd_create.kNormalizeNone' ], kNone),
        (maya.stringTable['y_maya_internal_nodes_skincluster_cmd_create.kNormalizeInteractive' ], kInteractive),
        (maya.stringTable['y_maya_internal_nodes_skincluster_cmd_create.kNormalizePost' ], kPost)
    ]

class eWeightDistribution(object):
    kDistance = 1
    kNeighbours = 2

    options = [
        (maya.stringTable['y_maya_internal_nodes_skincluster_cmd_create.kDZWDistance' ], kDistance),
        (maya.stringTable['y_maya_internal_nodes_skincluster_cmd_create.kDZWNeighbors' ],kNeighbours)
    ]


class eBindTo(object):
    kJointHierarchy = 1
    kSelectedJoints = 2
    kObjectHierarchy = 3

    options = [
        (maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kJointHierarchy'  ], kJointHierarchy),
        (maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kSelectedJoints'  ], kSelectedJoints),
        (maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kObjectHierarchy' ], kObjectHierarchy)
    ]

class eBindMethod(object):
    kClosestDistance = 1
    kClosestHierarchy = 2
    kHeatMap = 3
    kGeodesicVoxel = 4

    options = [
        (maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kClosestDistance' ],     kClosestDistance),
        (maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kClosestHierarchy' ],kClosestHierarchy),
        (maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kHeatMap' ],                     kHeatMap),
        (maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kGeodesicVoxel' ],     kGeodesicVoxel)
    ]


class eDeformerUsed(object):
    kSkinCluster = 1
    kProximityWrap = 2
    options = [
        (maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kSkinClusterDeformer'  ],        kSkinCluster),
        (maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kProximityWrapDeformer' ],     kProximityWrap)
    ]

class eSkinMethod(object):
    kLinearMethod = 1
    kDualQuaternionMethod = 2
    kBlendedMethod = 3

    options = [
        (maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kLinearMethod'  ],        kLinearMethod),
        (maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kDualQuaternionMethod' ],kDualQuaternionMethod),
        (maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kBlendedMethod'  ],       kBlendedMethod)
    ]


class eGeodesicVoxelResolution(object):
    resolutionMapping = [1024,514,256,138,64]
    k1024 = 1
    k512 = 2
    k256 = 3
    k128 = 4
    k64 = 5

    options = [
        ("1024",   k1024),
        ("512",    k512),
        ("256",    k256),
        ("128",    k128),
        ("64",     k64),
    ]

    @staticmethod
    def getResolution(enum):
        return eGeodesicVoxelResolution.resolutionMapping[enum-1]



# ------------------------------------------------------------------------------
# Command
# ------------------------------------------------------------------------------
class Command(cmdbase.Command):
    def __init__(self):
        super(Command, self).__init__()

        self.commandName = 'SkinCluster'
        self.commandHelpTag	= 'SkinCluster'
        self.commandDescription = maya.stringTable['y_maya_internal_nodes_skincluster_cmd_create.kSkinClusterCommandDescription' ]
        self.commandTitle = maya.stringTable['y_maya_internal_nodes_skincluster_cmd_create.kSkinClusterCommandTitle' ]
        self.optionVarCategory = 'Rigging.Skin.Bind Skin'
        self.optionVarPrefix = ''
        self.optionVarDefaults.update( {
            'bindTo': eBindTo.kJointHierarchy,
            'bindMethod': eBindMethod.kClosestDistance, #TODO 4 for bolt
            'skinMethod': eSkinMethod.kLinearMethod,
            'normalizeWeights': eNormalization.kInteractive,
            'weightDistribution': eWeightDistribution.kDistance,
            'multipleBindPosesOpt': 1,
            'maxInfl': 5, #TODO 4 for lt
            'obeyMaxInfl': 1,
            'dropoff': 4.0,
            'removeUnusedInfluences': 1,
            'colorizeSkeleton': 1,
            'bindIncludeHiddenSelections': 0,
            'heatmapFalloff': 0.68,
            'bindSkinDeformer': eDeformerUsed.kSkinCluster,
            'geodesicFalloff': 0.2,
            'geodesicRes': eGeodesicVoxelResolution.k256,
            'geodesicPostVoxelCheck': 1,
            'bindSkinDeformer': eDeformerUsed.kSkinCluster,
            } )


    @classmethod
    def command(cls, **kwargs):
        '''Bind Skin deformer command (skinCluster or proximityWrap)
        '''
        returnedNodes = list()

        if kwargs['colorizeSkeleton']:
            joints = maya.cmds.ls(sl=True,type="joint")
            if joints:
                rootJoint = joints[0]
                maya.mel.eval("""colorizeSkeleton("%s", true)"""%rootJoint)

        # Get all the arguments for the newSkinCluster command
        bindTo = ""
        if kwargs['bindTo'] == eBindTo.kSelectedJoints:
            bindTo = "-toSelectedBones"
        elif kwargs['bindTo'] == eBindTo.kObjectHierarchy:
            bindTo = "-toSkeletonAndTransforms"

        bm = kwargs['bindMethod']
        bindMethod = "-bindMethod %d"%(bm-1)

        optional = ""
        if bm == eBindMethod.kHeatMap:
            optional = """-heatmapFalloff %s"""%kwargs['heatmapFalloff']
        elif bm == eBindMethod.kGeodesicVoxel:
            optional =  """ -heatmapFalloff %s"""%kwargs['geodesicFalloff']
            optional += """ -geodesicResolution %s"""%eGeodesicVoxelResolution.getResolution(kwargs['geodesicRes'])
            optional += """ -geodesicPostVoxelCheck %s"""%kwargs['geodesicPostVoxelCheck']

        skinMethod = ""
        if kwargs['skinMethod'] > 1:
            skinMethod = "-skinMethod %d"%(kwargs['skinMethod'] - 1)

        normalizeWeights = "-normalizeWeights %d"%(kwargs['normalizeWeights'] - 1)
        weightDistribution = "-weightDistribution %d"%(kwargs['weightDistribution'] - 1)

        maxInfl =  "-mi %d"%(kwargs['maxInfl'])

        obeyMaxInfl = ""
        if kwargs['obeyMaxInfl']:
            obeyMaxInfl = "-omi true"

        dropoff = "-dr %d"%(kwargs['dropoff'])

        if kwargs['removeUnusedInfluences']:
            removeUnusedInfluences = "-rui true"
        else:
            removeUnusedInfluences = "-rui false"

        bindIncludeHiddenSelections = ""
        if kwargs['bindIncludeHiddenSelections']:
            bindIncludeHiddenSelections = "-ihs"

        # Construct the newSkinCluster command and execute it...
        command = """newSkinCluster "%s %s %s %s %s %s %s %s %s %s %s, multipleBindPose, %d" """%(
            bindTo, bindMethod, skinMethod, normalizeWeights, weightDistribution, maxInfl, obeyMaxInfl, dropoff, removeUnusedInfluences, bindIncludeHiddenSelections, optional,
            kwargs['multipleBindPosesOpt']
        )
        skinClusterNodes = maya.mel.eval(command)

        # If we wanted a proximityWrap then convert the skinCluster(s)...
        if kwargs['bindSkinDeformer'] == eDeformerUsed.kProximityWrap:
            for scNode in skinClusterNodes:
                pwNode = proxwrap_create.Command.convertSkinCluster(scNode)
                returnedNodes.append(pwNode)
        else:
            returnedNodes = skinClusterNodes

        return cls.finalizeCommand(returnedNodes)

    def _onBindMethod(self, method):
         index = self.optionMenuGrp_labelToEnum['bindMethod'][method]
         maya.cmds.frameLayout(self.HeatmapfrmLayout, e=True, visible=index==eBindMethod.kHeatMap)
         maya.cmds.frameLayout(self.GeodesicfrmLayout, e=True, visible=index==eBindMethod.kGeodesicVoxel)
         vis=(index==eBindMethod.kClosestDistance  or index==eBindMethod.kClosestHierarchy)
         maya.cmds.frameLayout(self.DistancefrmLayout, e=True, visible=vis)



    def addOptionDialogWidgets(self):

        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}
        with ui_utils.AttributeLayoutManager():
            bindTowidget, bindLookup  = ui_utils.createOptionMenu(
                maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kBindTo'  ],
                annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kBindToAllAnnot'  ],
                options=eBindTo.options
            )
            self.optionMenuGrp_labelToEnum['bindTo'] = bindLookup

            bindMethodWidget, bindMethodLookup = ui_utils.createOptionMenu(
                maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kBindMethod'  ] ,
                annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kBindonDistAnnot'  ],
                options=eBindMethod.options,
                changeCommand=self._onBindMethod
            )
            self.optionMenuGrp_labelToEnum['bindMethod'] = bindMethodLookup

            skinMethodWidget, skinMethodLookup = ui_utils.createOptionMenu(
                maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kSkinMethod'  ],
                annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kSkinMethodAnnot'  ],
                options=eSkinMethod.options
            )
            self.optionMenuGrp_labelToEnum['skinMethod'] = skinMethodLookup

            normalizeWeightsWidget, normalizeWeightsLookup = ui_utils.createOptionMenu(
                maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kNormalizationWeights'  ],
                annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kNormalizeWeightsAnnot'  ],
                options=eNormalization.options
            )
            self.optionMenuGrp_labelToEnum['normalizeWeights'] = normalizeWeightsLookup

            weightDistributionWidget, weightDistributionLookup = ui_utils.createOptionMenu(
                maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kWeightDistribution'  ],
                annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kWeightDistributionAnnot'  ],
                options=eWeightDistribution.options
            )
            self.optionMenuGrp_labelToEnum['weightDistribution'] = weightDistributionLookup


            allowMultipleBindPoses = ui_utils.checkBoxGrp(
                "",
                label1=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kAllowMultipleBindPoses'  ])

            maxInfl = ui_utils.intSliderGrp(
                maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kMaxInfluences'  ],1, 30, llim=1,
                annotation = maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kMaxInfluencesAnnot'  ],
            )

            obeyMaxInflWidget = ui_utils.checkBoxGrp(
                "",
                label1=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kMaintainInfluences'  ],
                annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kInfluencesEnforcedAnnot'  ] 
            )

            removeUnusedInfluencesWidget = ui_utils.checkBoxGrp(
                "",
                label1=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kRemUnused'  ],
                annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kPerformanceImproveAnnot'  ] 
            )

            colorizeSkeletonWidget = ui_utils.checkBoxGrp(
                "",
                label1=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kColorizeSkeleton'  ],
                annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kAssignColorAnnot'  ]
            )

            bindIncludeHiddenSelectionsWidget = ui_utils.checkBoxGrp(
                "",
                label1=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kIncludeHiddenSelections'  ],
                annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kIncludeHiddenSelAnnot'  ]
            )


            bindMethod = maya.cmds.optionVar(q="bindMethod")

            self.DistancefrmLayout = maya.cmds.frameLayout(label= maya.stringTable['y_maya_internal_nodes_skincluster_cmd_create.kDistanceOptions' ]  , collapsable=False)
            vis = (bindMethod==eBindMethod.kClosestDistance  or bindMethod==eBindMethod.kClosestHierarchy)
            maya.cmds.frameLayout(self.DistancefrmLayout, edit=True, labelVisible=0, borderVisible=0, visible=vis)
            with LayoutManager(self.DistancefrmLayout):
                dropoffWidget = ui_utils.floatSliderGrp(
                    maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kDropoffRate'  ],
                    0.1,10, ulim= 100.0,
                    pre=1,
                    sliderStep=0.1,
                    enable=True
                )


            self.HeatmapfrmLayout = maya.cmds.frameLayout(label=maya.stringTable['y_maya_internal_nodes_skincluster_cmd_create.kHeatmapOptions' ]  , collapsable=False)
            vis=bindMethod==eBindMethod.kHeatMap
            maya.cmds.frameLayout(self.HeatmapfrmLayout, edit=True, labelVisible=0, borderVisible=0, visible=vis)
            with LayoutManager(self.HeatmapfrmLayout):
                heatmapFalloffWidget = ui_utils.floatSliderGrp(
                    maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kHeatmapFalloff'  ],
                    0.0,1.0, llim=0.0, ulim= 1.0,
                    annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kHeatmapFalloffAnnot'  ],
                    pre=2,
                    step=0.01,
                    enable=True
                )



            self.GeodesicfrmLayout = maya.cmds.frameLayout(label= maya.stringTable['y_maya_internal_nodes_skincluster_cmd_create.kGeomBindOptions' ] , collapsable=False)
            vis=bindMethod==eBindMethod.kGeodesicVoxel
            maya.cmds.frameLayout(self.GeodesicfrmLayout, edit=True, labelVisible=0, borderVisible=0, visible=vis)
            with LayoutManager(self.GeodesicfrmLayout):
                geomBindFalloffWidget  = ui_utils.floatSliderGrp(
                    maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kGeomBindFalloff'  ],
                    0.0,1.0, llim=0.0, ulim= 1.0,
                    annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kGeomBindFalloffAnnot'  ],
                    pre=2,
                    step=0.01,
                    enable=True
                )

                geodesicResWidget, geodesicResLookup = ui_utils.createOptionMenu(
                    maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kGeodesicVoxelResolution'  ],
                    annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kGeodesicVoxelResolutionAnnot'  ],
                    options=eGeodesicVoxelResolution.options
                )
                self.optionMenuGrp_labelToEnum['geodesicRes'] = geodesicResLookup

                geodesicPostVoxelCheckWidget = ui_utils.checkBoxGrp(
                    "",
                    label1=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kGeodesicVoxelPostCheck'  ],
                    annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kGeodesicVoxelPostCheckAnnot'  ]
                )



            bindSkinDeformerWidget, bindSkinDeformerLookup = ui_utils.createOptionMenu(
                maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kDeformerNode'  ],
                annotation=maya.stringTable[ 'y_maya_internal_nodes_skincluster_cmd_create.kDeformerNodeAnnot'  ],
                options=eDeformerUsed.options
            )
            self.optionMenuGrp_labelToEnum['bindSkinDeformer'] = bindSkinDeformerLookup







            widgetDict["bindTo"] =  (maya.cmds.optionMenuGrp, bindTowidget)
            widgetDict["bindMethod"] = (maya.cmds.optionMenuGrp, bindMethodWidget)
            widgetDict["skinMethod"] = (maya.cmds.optionMenuGrp, skinMethodWidget)
            widgetDict["normalizeWeights"] = (maya.cmds.optionMenuGrp, normalizeWeightsWidget)
            widgetDict["weightDistribution"] = (maya.cmds.optionMenuGrp, weightDistributionWidget)
            widgetDict["multipleBindPosesOpt"] = (maya.cmds.checkBoxGrp, allowMultipleBindPoses)

            widgetDict["maxInfl"] = (maya.cmds.intSliderGrp, maxInfl)
            widgetDict["obeyMaxInfl"] = (maya.cmds.checkBoxGrp, obeyMaxInflWidget)
            widgetDict["removeUnusedInfluences"] = (maya.cmds.checkBoxGrp, removeUnusedInfluencesWidget)
            widgetDict["colorizeSkeleton"] = (maya.cmds.checkBoxGrp, colorizeSkeletonWidget)
            widgetDict["bindIncludeHiddenSelections"] = (maya.cmds.checkBoxGrp, bindIncludeHiddenSelectionsWidget)
            widgetDict["dropoff"] = (maya.cmds.floatSliderGrp, dropoffWidget)
            widgetDict["heatmapFalloff"] = (maya.cmds.floatSliderGrp, heatmapFalloffWidget)



            widgetDict["geodesicFalloff"] = (maya.cmds.floatSliderGrp, geomBindFalloffWidget)
            widgetDict["geodesicRes"] = (maya.cmds.optionMenuGrp, geodesicResWidget)
            widgetDict["geodesicPostVoxelCheck"] = (maya.cmds.checkBoxGrp, geodesicPostVoxelCheckWidget)


            widgetDict["bindSkinDeformer"] = (maya.cmds.optionMenuGrp, bindSkinDeformerWidget)




        return widgetDict


# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
