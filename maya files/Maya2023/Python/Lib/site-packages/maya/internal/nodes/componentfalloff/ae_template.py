import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds as cmds
import maya.internal.common.qt.table as qt_table
import maya.internal.common.qt.buttons as qt_buttons
import maya.internal.common.qt.attribute as qt_attr
import maya.internal.common.utils.ui as ui_utils
import maya.internal.common.ae.template as aetemplate
import maya.internal.common.utils.falloff as fo_utils
import maya.internal.common.utils.transform as xfm_utils

from PySide2 import QtWidgets, QtCore
from maya.internal.nodes.componentfalloff.node_interface import NodeInterface
from functools import partial

#-------------------------------------------------------------------------------
class TabItemInfo:
    def __init__(self):
        self.index = -1
        self.name = None
        self.row = -1
        return

#-------------------------------------------------------------------------------
class PaintGeomAction(QtWidgets.QAction):
    def __init__(self, name, parent):
        super(PaintGeomAction, self).__init__(name, parent)
        self.paintGeom = name

#-------------------------------------------------------------------------------
class ComponentTableWidget(qt_table.TableWidget):
    kColIdx = 0
    kColName = 1
    kColWeight = 2
    kColLAST = 3

    def __init__(self):
        super(ComponentTableWidget, self).__init__()
        self.prepareTable(self.kColLAST)

        self.makeHeader(self.kColIdx,
            maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kCompFalloffAEColIdx' ],
            maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kCompFalloffAEColIdxTip' ])

        self.makeHeader(self.kColName,
            maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kCompFalloffAEColName' ],
            maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kCompFalloffAEColNameTip' ])

        self.makeHeader(self.kColWeight,
            maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kCompFalloffAEColWeight' ],
            maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kCompFalloffAEColWeightTip' ])

        self.setColumnResizeMode(content=[self. kColIdx], stretch=[self.kColName, self.kColWeight])

        self.interface = None
        return

    def updateItems(self, nodeName):
        self.interface = NodeInterface(nodeName)
        if not self.interface.isValid():
            self.clearItems()
            return

        tableData = self.interface.getTableData()

        self.setSortingEnabled(False)
        self.setRowCount(len(tableData))

        for row, d in enumerate(tableData):
            info = TabItemInfo()
            info.index = d[0]
            info.name = d[1]
            info.row = row

            for col in [self.kColIdx, self.kColName]:
                self.setItem(row, col, self.makeTableItem(col, info))

            weightPlug = self.interface.defaultWeightPlugName(info.index)
            weightWidget = qt_attr.FloatAttributeWidget(weightPlug)
            self.setCellWidget(row, self.kColWeight, weightWidget)


        return

    def makeTableItem(self, col, info):
        text = ''
        horizontalAlign = QtCore.Qt.AlignLeft
        flags = QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled
        if col == self.kColIdx:
            text = str(info.index)
            horizontalAlign = QtCore.Qt.AlignHCenter
        elif col == self.kColName:
            text = info.name
            flags |= QtCore.Qt.ItemIsEditable

        wi = qt_table.InfoTableWidgetItem(text, info)
        wi.setTextAlignment(horizontalAlign | QtCore.Qt.AlignVCenter)
        wi.setFlags(flags)
        return wi

    def clearItems(self):
        self.setRowCount(0)
        self.interface = None
        return

    def getCurrentItemInfo(self):
        row = self.currentRow()
        if row >= 0:
            widgetItem = self.item(row, self.kColIdx)
            if widgetItem:
                return widgetItem.info
        return None

    def contextMenuEvent(self, event):
        index = self.indexAt(event.pos())
        widgetItem = self.item(index.row(), index.column()) if index.isValid() else None
        info = widgetItem.info if widgetItem is not None else None

        menu = QtWidgets.QMenu(self)

        createAction = menu.addAction(maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kCompFalloffAEActionCreate' ])
        duplicateAction = menu.addAction(maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kCompFalloffAEActionDuplicate' ])
        menu.addSeparator()
        deleteAction = menu.addAction(maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kCompFalloffAEActionDelete' ])
        menu.addSeparator()
        clearAction = menu.addAction(maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kClear' ])
        paintAction = menu.addAction(maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kCompFalloffAEActionPaint' ])

        self.paintableGeoms = self.interface.getPaintableGeometries(info.index) if info is not None else []
        self.paintGeomMenu = QtWidgets.QMenu(menu)
        self.paintGeomMenu.aboutToShow.connect(self._buildPaintGeomMenu)
        paintAction.setMenu(self.paintGeomMenu)

        duplicateAction.setEnabled(info is not None)
        paintAction.setEnabled(len(self.paintableGeoms))
        deleteAction.setEnabled(info is not None)
        clearAction.setEnabled(info is not None)

        action = menu.exec_(self.mapToGlobal(event.pos()))
        if action == createAction:
            self.__addItem()
        elif action == duplicateAction:
            self.__duplicateItem(info)
        elif action == deleteAction:
            self.__deleteItem(info)
        elif action == clearAction:
            self.__clearItem(info)
        elif isinstance(action, PaintGeomAction):
            self.__paintItem(info, action.paintGeom)

    def commitData(self, editor):
        super(ComponentTableWidget, self).commitData(editor)
        tabIndex = self.currentIndex()
        if not tabIndex.isValid() or tabIndex.column() != self.kColName:
            return

        wi = self.item(tabIndex.row(), self.kColName)
        curName = wi.info.name
        newName = wi.text().strip()
        if not self.__renameItem(wi.info, newName) and wi.info.name != newName:
            wi.setText(curName)
            msg =maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kLayerRenameFailedMsg' ].format(curName, newName),
            maya.cmds.warning(msg)
        return

    #---------- Undo/Redo and Context Menu Actions ----------
    @ui_utils.undoChunk('add component falloff layer')
    def __addItem(self):
        self.interface.createNewLayer()
        return

    @ui_utils.undoChunk('delete component falloff layer')
    def __deleteItem(self, info):
        self.interface.deleteItem(info.index)
        return

    @ui_utils.undoChunk('clear component falloff layer')
    def __clearItem(self, info):
        if self.interface.clearLayer(info.index):
            geo = self.interface.getPaintableGeometry(info.index)
            if geo:
                maya.cmds.dgdirty(geo) # force viewport update

    @ui_utils.undoChunk('rename component falloff layer')
    def __renameItem(self, info, newLayerName):
        if newLayerName in self.interface.getLayerNames():
            return False
        return self.interface.setLayerName(info.index, newLayerName)

    @ui_utils.undoChunk('duplicate component falloff layer')
    def __duplicateItem(self, info):
        if info:
            idx = self.interface.createNewLayer(info.name)
            w = self.interface.getDefaultWeight(info.index)
            self.interface.setDefaultWeight(idx, w)

    @ui_utils.undoChunk('paint component falloff layer')
    def __paintItem(self, info, geom=None):
        if info:
            # find out the geometry and the plug to paint
            geo = geom if geom else self.interface.getPaintableGeometry()
            plugs = self.interface.paintablePlugs(info.index)
            if geo and len(plugs):
                fo_utils.paintComponentFalloff(geo, plugs[0])

    #---------- QtSlots ----------
    @QtCore.Slot()
    def addItem(self):
        self.__addItem()
        return

    @QtCore.Slot()
    def deleteItem(self):
        info = self.getCurrentItemInfo()
        if info:
            self.__deleteItem(info)
        return

    @QtCore.Slot()
    def _buildPaintGeomMenu(self):
        self.paintGeomMenu.clear()
        geoms = sorted(list(self.paintableGeoms))
        for geom in geoms:
            dp = xfm_utils.getDagPathFromNodeName(geom)
            act = PaintGeomAction(geom, self.paintGeomMenu)
            act.paintGeom = geom
            act.setEnabled(dp.isVisible())
            self.paintGeomMenu.addAction(act)

#-------------------------------------------------------------------------------
class ComponentInputWidget(QtWidgets.QWidget):
    def __init__(self, uiParent=None):
        super(ComponentInputWidget, self).__init__()

        self.mainLayout = QtWidgets.QVBoxLayout()

        self.topBarLayout = QtWidgets.QHBoxLayout()
        self.topBarLayout.setSpacing(1)

        self.addButton, self.delButton = qt_buttons.makeItemAddDelIconButtons(
                maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kCompFalloffAEItemAdd' ],
                maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kCompFalloffAEItemDel' ])

        spacer = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.topBarLayout.addItem(spacer)
        self.topBarLayout.addWidget(self.addButton)
        self.topBarLayout.addWidget(self.delButton)

        self.tableWidget = ComponentTableWidget()
        self.tableWidget.itemSelectionChanged.connect(self.tableSelectionChangedSlot)

        self.addButton.clicked.connect(self.tableWidget.addItem)
        self.delButton.clicked.connect(self.tableWidget.deleteItem)

        self.mainLayout.addLayout(self.topBarLayout)
        self.mainLayout.addWidget(self.tableWidget)

        self.setLayout(self.mainLayout)
        return

    def changeNode(self, nodeName, plugName):
        self.nodeName = nodeName
        self.refresh()
        return

    def refresh(self):
        self.tableWidget.updateItems(self.nodeName)
        self.updateTopBar()
        return

    def updateTopBar(self):
        row = self.tableWidget.currentRow()
        self.delButton.setEnabled(row >= 0)
        return

    @QtCore.Slot()
    def tableSelectionChangedSlot(self):
        self.updateTopBar()
        return

#-------------------------------------------------------------------------------
class AETemplate(aetemplate.Template):
    def buildUI(self, nodeName):
        with aetemplate.Layout(self, maya.stringTable['y_maya_internal_nodes_componentfalloff_ae_template.kLabelCompFalloff' ]):
            self.defineQtCustom(ComponentInputWidget, ['weightLayers'])

            self.suppress('weightLayers')
            self.suppress('outputWeightFunction')


        self.callTemplate('dependNode')
        return
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
