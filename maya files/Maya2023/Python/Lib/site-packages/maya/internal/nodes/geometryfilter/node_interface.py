import maya
maya.utils.loadStringResourcesForModule(__name__)

from maya.internal.common.node_interface import NodeInterface as BaseNodeInterface
from maya.internal.nodes.componentfalloff.node_interface import NodeInterface as ComponentFalloffNodeInterface
import maya.internal.common.ae.template as ae
import maya.internal.common.utils.connections as con_utils
import maya.internal.common.utils.falloff as fo_utils
import maya.internal.common.utils.geometry as geo_utils
import maya.internal.common.utils.message as msg_utils
import maya.cmds

# ------------------------------------------------------------------------------
class NodeInterface(BaseNodeInterface, fo_utils.FalloffAssignMixinInterface):
    _mayaNodeType = 'geometryFilter'

    def __init__(self, nodeName):
        super(NodeInterface, self).__init__(nodeName)

    # --------------------------------------------------------------------------
    # Plug names
    # --------------------------------------------------------------------------
    def weightFunctionPlugName(self, index=None):
        if index is None:
            return '{}.weightFunction'.format(self.getEditNode())
        else:
            return u'{}.weightFunction[{}]'.format(self.getEditNode(), index)

    def inputPlugName(self, index=None):
        if index is None:
            return '{}.input'.format(self.getEditNode())
        else:
            return u'{}.input[{}]'.format(self.getEditNode(), index)

    def componentTagExpressionPlugName(self, index):
        return '{}.componentTagExpression'.format(self.inputPlugName(index))

    def inputGeometryPlugName(self, index):
        return '{}.inputGeometry'.format(self.inputPlugName(index))

    # --------------------------------------------------------------------------
    # Indices
    # --------------------------------------------------------------------------
    def weightFunctionIndices(self):
        return maya.cmds.getAttr(self.weightFunctionPlugName(),  multiIndices=True) or []

    def getInputIndices(self):
        return maya.cmds.getAttr(self.inputPlugName(), multiIndices=True) or []

    def getFreeIndex(self):
        indices = sorted(self.weightFunctionIndices())
        return 0 if len(indices) == 0 else (indices[-1] + 1)

    # --------------------------------------------------------------------------
    # ComponentTag expressionn
    # --------------------------------------------------------------------------
    def getComponentTagExpression(self, index, expression):
        maya.cmds.getAttr(self.componentTagExpressionPlugName(index))
        return True

    def setComponentTagExpression(self, index, expression):
        maya.cmds.setAttr(self.componentTagExpressionPlugName(index), expression, type='string')
        return True

    # --------------------------------------------------------------------------
    # Info
    # --------------------------------------------------------------------------
    def _getInputDataAtIndex(self, index, geomLookup):
        inputPlug = self.inputPlugName(index)
        gid = maya.cmds.getAttr('{}.groupId'.format(inputPlug))
        cex = maya.cmds.getAttr('{}.componentTagExpression'.format(inputPlug))
        geo = geomLookup.get(index, None)
        src = self.getFalloffSourcePlug(index)
        con = True
        if not geo:
            srcNode = con_utils.getSourceNode('{}.inputGeometry'.format(inputPlug))
            con = srcNode is not None
        return (index, gid, cex, geo, src, con)

    def _createGeomLookup(self):
        geoms = maya.cmds.deformer(self.editNode, q=True, geometry=True)
        geomIndices = maya.cmds.deformer(self.editNode, q=True, geometryIndices=True)

        geomLookup = dict()
        if geoms and geomIndices and len(geoms) == len(geomIndices):
            geomLookup = dict( list(zip( geomIndices, geoms )) )
        return geomLookup

    def getInputData(self):
        geomLookup = self._createGeomLookup()

        a = list()
        indices = self.getInputIndices()
        for index in indices:
            a.append(self._getInputDataAtIndex(index, geomLookup))
        return a

    def getComponents(self, index):
        inputPlug = self.inputPlugName(index)
        gid = maya.cmds.getAttr('{}.groupId'.format(inputPlug))
        cex = maya.cmds.getAttr('{}.componentTagExpression'.format(inputPlug))
        plg = self.inputGeometryPlugName(index)

        if gid > 0:
            cmp = maya.cmds.geometryAttrInfo(plg, gid=gid, cmp=True)
        else:
            cmp = maya.cmds.geometryAttrInfo(plg, cex=cex, cmp=True)
        return cmp

    # --------------------------------------------------------------------------
    # Deformed Shapes
    # --------------------------------------------------------------------------
    def getDeformedShapes(self):
        geoms = maya.cmds.deformer(self.editNode, q=True, geometry=True)
        return geoms if geoms else []

    def getDeformedShapeAtIndex(self, index):
        geomLookup = self._createGeomLookup()
        return geomLookup.get(index, None)

    def deformableGeomTypeFilter(self):
        return geo_utils.GeomType.All

    def _addShapeToDeformer(self, shapeNodeSelection):
        '''
        shapeNodeSelection could be a list like:
            ['ballShape']
        or:
            ['ball.f[63:64]', 'ball.f[82:84]', 'ball.f[339]']
        '''
        geoms = self.getDeformedShapes()
        if not shapeNodeSelection:
            return False

        shapeNode = geo_utils.extendToShape(shapeNodeSelection[0])

        # Check if we already have it
        if shapeNode in geoms:
            return False

        # Check if it is a valid type
        if not geo_utils.checkGeomType(shapeNode, self.deformableGeomTypeFilter()):
            return False

        maya.cmds.deformer(self.editNode, edit=True, geometry=shapeNodeSelection)
        # now it should be added
        geoms = self.getDeformedShapes()
        if not shapeNode in geoms:
            return False

        return True

    def _removeShapeFromDeformer(self, shapeNodeSelection):
        geoms = self.getDeformedShapes()

        if not shapeNodeSelection:
            return False

        shapeNode = geo_utils.extendToShape(shapeNodeSelection[0] if isinstance(shapeNodeSelection, list) else shapeNodeSelection)
        if not shapeNode in geoms:
            return False

        maya.cmds.deformer(self.editNode, edit=True, rm=True, geometry=shapeNode)
        return True

    def addOrRemoveShapesAllowed(self):
        return True

    def filterAddShapesToDeformer(self, shapeNodes):
        '''
        Derived classes should override this , but still call this one as well
        '''
        toAdd = list()
        bendyShapes = self.getDeformedShapes()
        for shape in shapeNodes:
            if not geo_utils.checkGeomType(shape, self.deformableGeomTypeFilter()):
                continue

            if not shape in bendyShapes:
                 toAdd.append(shape)
        return toAdd

    def addShapesToDeformer(self, shapeNodesList):
        '''
        Add multiple shapes to the deformer
        '''
        if not self.addOrRemoveShapesAllowed():
            return False

        # create a dictionary matching the shapeNode to the component selection (if any)'''
        cmpLookup = dict()
        for s in shapeNodesList:
            k = geo_utils.extendToShape(s)
            if k in cmpLookup:
                cmpLookup[k].append(s)
            else:
                cmpLookup[k] = [s]

        shapeNodes = cmpLookup.keys()

        toAdd = self.filterAddShapesToDeformer(shapeNodes)
        added = list()
        skipped = list()

        for shape in shapeNodes:
            ok = False
            if shape in toAdd:
                if self._addShapeToDeformer(cmpLookup.get(shape)):
                    added.append(shape)
                    ok = True

            if not ok:
                skipped.append(shape)

        if len(skipped) > 0:
            msg_utils.showWarning(maya.stringTable['y_maya_internal_nodes_geometryfilter_node_interface.kInfoMsgGeomSkipped' ].format(str(skipped)))

        if len(added) == 0:
            msg_utils.showWarning(maya.stringTable['y_maya_internal_nodes_geometryfilter_node_interface.kWrnMsgNoAddedGeom' ])

        return added

    def removeShapesFromDeformer(self, shapeNodesList):

        if not self.addOrRemoveShapesAllowed():
            return False

        bendyShapes = self.getDeformedShapes()
        withoutComponents = set([s.split('.')[0] for s in shapeNodesList])
        shapeNodes = [geo_utils.extendToShape(s) for s in withoutComponents]

        removed = list()
        for shape in shapeNodes:
            if shape in bendyShapes:
                if self._removeShapeFromDeformer(shape):
                    removed.append(shape)

        if len(removed) == 0:
            msg_utils.showWarning(maya.stringTable['y_maya_internal_nodes_geometryfilter_node_interface.kWrnMsgNoRemovedGeom' ])
        else:
            print (maya.stringTable['y_maya_internal_nodes_geometryfilter_node_interface.kInfoMsgGeomRemoved' ].format(str(removed)))


    # --------------------------------------------------------------------------
    # Paint
    # --------------------------------------------------------------------------
    def paintablePlugs(self, index):
        """
            returns all paintable plugs that influences this specifie weightFunction index
        """
        return fo_utils.paintablePlugs(self.weightFunctionPlugName(index))

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
