import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds as cmds
import maya.internal.common.ae.template as aetemplate
import maya.internal.common.qt.table as qt_table
import maya.internal.common.qt.buttons as qt_buttons
import maya.internal.common.utils.connections as con_utils
import maya.internal.common.utils.falloff as fo_utils
import maya.internal.common.utils.ui as ui_utils

from PySide2 import QtWidgets, QtCore

import maya.internal.nodes.blendfalloff.action as fo_action
from maya.internal.nodes.transferfalloff.node_interface import NodeInterface


#-------------------------------------------------------------------------------
class TableItemInfo:
    def __init__(self):
        self.src = None
        self.index = -1
        self.row = -1
        return

#-------------------------------------------------------------------------------
class TransferTableWidget(qt_table.TableWidget):
    kColIdx = 0
    kColSrc = 1
    kColLAST = 2

    def __init__(self):
        super().__init__()
        self.prepareTable(self.kColLAST)

        self.makeHeader(self.kColIdx, 
            maya.stringTable['y_maya_internal_nodes_transferfalloff_ae_template.kTransferFalloffAEColIdx' ],
            maya.stringTable['y_maya_internal_nodes_transferfalloff_ae_template.kTransferFalloffAEColIdxTip' ])

        self.makeHeader(self.kColSrc,
            maya.stringTable['y_maya_internal_nodes_transferfalloff_ae_template.kTransferFalloffAEColName' ],
            maya.stringTable['y_maya_internal_nodes_transferfalloff_ae_template.kTransferFalloffAEColNameTip' ])

        self.setColumnResizeMode(content=[self.kColIdx], stretch=[self.kColSrc])
        self.interface = None
        return

    def updateItems(self, nodeName):
        self.interface = NodeInterface(nodeName)
        
        if not self.interface.isValid():
            self.clearItems()
            return

        tableData = self.interface.getTableData()
        self.setSortingEnabled(False)
        self.setRowCount(len(tableData))
        for row, d in enumerate(tableData):
            info = TableItemInfo()
            info.index = d[0]
            info.src = d[1]
            info.row = row
            for col in [self.kColIdx, self.kColSrc]:
                self.setItem(row, col, self.makeTableItem(col, info))
        return

    def makeTableItem(self, col, info):
        text = ''
        horizontalAlign = QtCore.Qt.AlignLeft
        if col == self.kColIdx:
            text = str(info.index)
            horizontalAlign = QtCore.Qt.AlignHCenter
        elif col == self.kColSrc:
            text = fo_utils.getConnectionLabel(info.src)

        flags = QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled
        wi = qt_table.InfoTableWidgetItem(text, info)
        wi.setTextAlignment(horizontalAlign | QtCore.Qt.AlignVCenter)
        wi.setFlags(flags)

        if col == self.kColSrc:
            ic = fo_action.iconForFalloffSource(info.src)
            if ic is not None:
                wi.setIcon(ic)
        return wi

    def clearItems(self):
        self.setRowCount(0)
        self.interface = None
        return

    def getCurrentItemInfo(self):
        row = self.currentRow()
        if row >= 0:
            widgetItem = self.item(row, self.kColIdx)
            if widgetItem:
                return widgetItem.info
        return None

    def contextMenuEvent(self, event):
        index = self.indexAt(event.pos())
        if not index.isValid():
            info = TableItemInfo()
        else:
            row = index.row()
            col = index.column()
            widgetItem = self.item(row, col)
            info = widgetItem.info

        curFalloff = None
        curFalloffSourcePlug = None
        if info.index >= 0:
            curFalloffSourcePlug = info.src
            curFalloff = con_utils.plugNode(curFalloffSourcePlug)

        menu = QtWidgets.QMenu(self)

        actionLabel = None
        if info.index < 0:
            actionLabel = maya.stringTable['y_maya_internal_nodes_transferfalloff_ae_template.kTransferFalloffAEAddItem' ]

        focMenu = fo_action.FalloffContextMenuBuilder(actionLabel)
        focMenu.appendToMenu(menu, curFalloff, curFalloffSourcePlug)

        action = menu.exec_(self.mapToGlobal(event.pos()))

        if action == focMenu.selectAction:
            cmds.select(curFalloff)
        elif isinstance(action, fo_action.Action):
            self._assignFalloff(info, action)
        elif action == focMenu.disconnectAction:
             self._disconnectFalloff(info)
        elif action == focMenu.deleteAction:
             self._deleteFalloff(info)

        return

    def _updateItems(self):
        self.updateItems(self.interface.getEditNode())
        return

    @ui_utils.undoChunk('add transfer falloff item')
    def _addItem(self):
        saveSelection = cmds.ls(selection=True)
        self.interface.appendItem()
        cmds.select(saveSelection, r=True)
        return

    @ui_utils.undoChunk('delete transfer falloff item')
    def _deleteItem(self, info):
        self.interface.deleteItem(info.index)
        return

    @ui_utils.undoChunk('assign transfer falloff')
    def _assignFalloff(self, info, action):
        index = info.index
        if index < 0:
            index = self.interface.getFreeIndex()

        if action.actId == fo_action.eAction.kNew:
            saveSelection = cmds.ls(selection=True)
            if self.interface.createAndAssignFalloff(index, action.falloffType, labelHint='transfer'):
                self._updateItems()
            cmds.select(saveSelection, r=True)

        elif action.actId == fo_action.eAction.kExisting:
            if self.interface.assignFalloff(index, action.falloff, action.falloffOutputIndex, labelHint='transfer'):
                self._updateItems()
        return

    @ui_utils.undoChunk('disconnect falloff')
    def _disconnectFalloff(self, info):
        if self.interface.setFalloffSourcePlug(info.index, None):
            self._updateItems()
        return

    @ui_utils.undoChunk('delete falloff')
    def _deleteFalloff(self, info):
        if self.interface.deleteFalloff(info.index):
            self._updateItems()
        return

    @QtCore.Slot()
    def addItem(self):
        self._addItem()
        return

    @QtCore.Slot()
    def deleteCurrentItem(self):
        info = self.getCurrentItemInfo()
        if info:
            self._deleteItem(info)
        return


#-------------------------------------------------------------------------------
class TransferInputWidget(QtWidgets.QWidget):
    def __init__(self, uiParent=None):
        super().__init__()

        self.mainLayout = QtWidgets.QVBoxLayout()

        self.topBarLayout = QtWidgets.QHBoxLayout()
        self.topBarLayout.setSpacing(1)

        self.addButton, self.delButton = qt_buttons.makeItemAddDelIconButtons(
                maya.stringTable['y_maya_internal_nodes_transferfalloff_ae_template.kTransferFalloffAEItemAdd' ],
                maya.stringTable['y_maya_internal_nodes_transferfalloff_ae_template.kTransferFalloffAEItemDel' ])

        spacer = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.topBarLayout.addItem(spacer)
        self.topBarLayout.addWidget(self.addButton)
        self.topBarLayout.addWidget(self.delButton)

        self.tableWidget = TransferTableWidget()
        self.tableWidget.itemSelectionChanged.connect(self.tableSelectionChangedSlot)

        self.addButton.clicked.connect(self.tableWidget.addItem)
        self.delButton.clicked.connect(self.tableWidget.deleteCurrentItem)

        self.mainLayout.addLayout(self.topBarLayout)
        self.mainLayout.addWidget(self.tableWidget)

        self.setLayout(self.mainLayout)
        return

    def changeNode(self, nodeName, plugName):
        self.nodeName = nodeName
        self.refresh()
        return

    def refresh(self):
        self.tableWidget.updateItems(self.nodeName)
        self.updateTopBar()
        return

    def updateTopBar(self):
        row = self.tableWidget.currentRow()
        self.delButton.setEnabled(row >= 0)
        return

    @QtCore.Slot()
    def tableSelectionChangedSlot(self):
        self.updateTopBar()
        return

#-------------------------------------------------------------------------------
class AETemplate(aetemplate.Template):
    def buildUI(self, nodeName):
        with aetemplate.Layout(self, maya.stringTable['y_maya_internal_nodes_transferfalloff_ae_template.kLabelTransferFalloff' ]):

            with aetemplate.Layout(self, maya.stringTable['y_maya_internal_nodes_transferfalloff_ae_template.kBindTags' ], collapse=False):
                self.addControl('useBindTags', callback=self.__useBindTagsCheck)
                self.addControl('bindTagsFilter')

            self.defineQtCustom(TransferInputWidget, ['weightFunction'])

            self.suppress('weightFunction')
            self.suppress('outputWeightFunction')

        self.callTemplate('dependNode')
        return

    @staticmethod
    def __useBindTagsCheck(nodeName):
        useBindTags = maya.cmds.getAttr('{}.useBindTags'.format(nodeName))
        maya.cmds.editorTemplate(dimControl=[nodeName, 'bindTagsFilter', not useBindTags])
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
