from maya.internal.common.node_interface import NodeInterface as BaseNodeInterface
import maya.internal.common.utils.connections as con_utils
import maya.cmds

def _findDestinationGeoms(plug):
    geoms = set()

    # follow connections downstream to get all shapes using the layer
    cons = con_utils.getDestinationPlugs(plug)

    parentPlug, arrayIdx = con_utils.plugSplitMultiIndex(plug)
    if arrayIdx is not None:
        # plug was an entry in the array, check if the full array was hooked up
        # to something
        arrayCons = con_utils.getDestinationPlugs(parentPlug)
        for ac in arrayCons:
            cons.append('{}[{}]'.format(ac, arrayIdx))

    for c in cons:
        parts = c.split('.')
        node = parts[0]
        attr, idx = con_utils.plugSplitMultiIndex(parts[-1])
        if maya.cmds.objectType(node, isAType='geometryFilter'):
            from maya.internal.nodes.geometryfilter.node_interface import NodeInterface as GeometryFilterNodeInterface
            if attr == 'weightFunction':
                if idx is not None:
                    geom = GeometryFilterNodeInterface(node).getDeformedShapeAtIndex(idx)
                    if geom:
                        geoms.add(geom)
                else:
                    geoms.update(GeometryFilterNodeInterface(node).getDeformedShapes())

        elif maya.cmds.objectType(node, isAType='blendFalloff'):
            if attr == 'weightFunction':
                geoms.update(_findDestinationGeoms('{}.outputWeightFunction'.format(node)))

    return geoms

#-------------------------------------------------------------------------------
class NodeInterface(BaseNodeInterface):
    _mayaNodeType = 'componentFalloff'

    def __init__(self, nodeName):
        super(NodeInterface, self).__init__(nodeName)
        return

    # --------------------------------------------------------------------------
    # Plug names
    # --------------------------------------------------------------------------
    def weightLayersPlugName(self, index=None):
        if index is None:
            return '{}.weightLayers'.format(self.getEditNode())
        else:
            return u'{}.weightLayers[{}]'.format(self.getEditNode(), index)

    def outputWeightFunctionPlugName(self, index=None):
        if index is None:
            return '{}.outputWeightFunction'.format(self.getEditNode())
        else:
            return '{}.outputWeightFunction[{}]'.format(self.getEditNode(), index)

    def weightInfoLayersPlugName(self, index=None):
        if index is None:
            return '{}.weightInfoLayers'.format(self.getEditNode())
        else:
            return u'{}.weightInfoLayers[{}]'.format(self.getEditNode(), index)

    def layerNamePlugName(self, index):
         return '{}.layerName'.format(self.weightInfoLayersPlugName(index))

    def weightsPlugName(self, index):
         return '{}.weights'.format(self.weightLayersPlugName(index))

    def defaultWeightPlugName(self, index):
         return '{}.defaultWeight'.format(self.weightInfoLayersPlugName(index))

    def geometryPlugName(self):
         return '{}.weightedGeometry'.format(self.getEditNode())

    # --------------------------------------------------------------------------
    # Indices
    # --------------------------------------------------------------------------
    def getIndices(self):
        layersFunction = maya.cmds.getAttr(self.weightLayersPlugName(), multiIndices=True) or []
        layersInfo = maya.cmds.getAttr(self.weightInfoLayersPlugName(), multiIndices=True) or []
        return list(set(layersInfo) | set(layersFunction))

    def getFreeIndex(self):
        indices = sorted(self.getIndices())
        return 0 if len(indices) == 0 else (indices[-1] + 1)

    # --------------------------------------------------------------------------
    # Items
    # --------------------------------------------------------------------------
    def appendItem(self, layerName='untitledLayer'):
        newIndex = self.getFreeIndex()
        self.setLayerName(newIndex, layerName)
        return newIndex

    def deleteItem(self, index):
        if index is not None and index >= 0:
            maya.cmds.removeMultiInstance(self.weightLayersPlugName(index), b=True)
            maya.cmds.removeMultiInstance(self.weightInfoLayersPlugName(index), b=True)
            return True
        return False

    # --------------------------------------------------------------------------
    # Layers
    # --------------------------------------------------------------------------
    def getLayerName(self, index):
        return maya.cmds.getAttr(self.layerNamePlugName(index))

    def setLayerName(self, index, layerName):
        try:
            maya.cmds.setAttr(self.layerNamePlugName(index), layerName, type='string')
        except RuntimeError:
            return False
        return True

    def setUniqueLayerName(self, index, layerHint=None):
        self.setLayerName(index, self.getUniqueLayerName(layerHint))

    def getLayerNames(self):
        indices = self.getIndices()
        return [ self.getLayerName(idx) for idx in indices]

    def getUniqueLayerName(self, labelHint=None):
        existingNames = set(self.getLayerNames())
        baseLayerName = labelHint if labelHint else 'untitledLayer'
        layerName = baseLayerName
        cnt = 1
        while layerName in existingNames:
            layerName = '{}_{}'.format(baseLayerName, cnt)
            cnt+=1
        return layerName

    def createNewLayer(self, layerHint=None):
        return self.appendItem(self.getUniqueLayerName(layerHint))

    # --------------------------------------------------------------------------
    # Weights
    # --------------------------------------------------------------------------
    def getDefaultWeight(self, index):
        return maya.cmds.getAttr(self.defaultWeightPlugName(index))

    def setDefaultWeight(self, index, weight):
        return maya.cmds.setAttr(self.defaultWeightPlugName(index), weight)

    def clearLayer(self, index):
        # Remove all values from the layer
        wp = self.weightsPlugName(index)
        vertIndices = maya.cmds.getAttr(wp, multiIndices=True) or []
        if len(vertIndices):
            for i in vertIndices:
                maya.cmds.removeMultiInstance('{}[{}]'.format(wp, i), b=True)
            return True
        else:
            return False

    # --------------------------------------------------------------------------
    # Info
    # --------------------------------------------------------------------------
    def getTableData(self):
        return [(i, self.getLayerName(i)) for i in self.getIndices()]

    # --------------------------------------------------------------------------
    # Paint
    # --------------------------------------------------------------------------
    def paintablePlugs(self, index):
        return [self.weightsPlugName(index)]

    def getPaintableGeometry(self, index=None):
        src = con_utils.getSourcePlug(self.geometryPlugName())
        node = con_utils.plugNode(src)
        if node is not None and maya.cmds.objectType(node, isAType='shape'):
            return node
        return None

    def getPaintableGeometries(self, index):
        geoms = set()

        # Add the connected shape (if it exists)
        geom = self.getPaintableGeometry()
        if geom:
            geoms.add(geom)

        # Follow connections downstream to get all shapes using the layer
        plug = self.outputWeightFunctionPlugName(index)
        geoms.update(_findDestinationGeoms(plug))

        return geoms
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
