from maya.internal.common.node_interface import NodeInterface as BaseNodeInterface
from maya.internal.nodes.componentfalloff.node_interface import NodeInterface as ComponentFalloffNodeInterface
import maya.internal.common.utils.connections as con_utils
import maya.internal.common.utils.falloff as fo_utils
import maya.cmds

class NodeInterface(BaseNodeInterface, fo_utils.FalloffAssignMixinInterface):
    _mayaNodeType = 'transferFalloff'

    def __init__(self, nodeName):
        super().__init__(nodeName)
        return

    # --------------------------------------------------------------------------
    # Plug names
    # --------------------------------------------------------------------------
    def weightFunctionPlugName(self, index=None):
        if index is None:
            return '{}.weightFunction'.format(self.getEditNode())
        return u'{}.weightFunction[{}]'.format(self.getEditNode(), index)

    # --------------------------------------------------------------------------
    # Indices
    # --------------------------------------------------------------------------
    def getIndices(self):
        return maya.cmds.getAttr(self.weightFunctionPlugName(),  multiIndices=True) or []

    def getFreeIndex(self):
        indices = sorted(self.getIndices())
        return 0 if len(indices) == 0 else (indices[-1] + 1)

    # --------------------------------------------------------------------------
    # Items
    # --------------------------------------------------------------------------
    def appendItem(self, weightFuncPlug=None):
        idx = self.getFreeIndex()
        if weightFuncPlug is None:
            self.createAndAssignFalloff(idx, 'primitiveFalloff')
        else:
            falloffInputPlug = self.weightFunctionPlugName(idx)
            maya.cmds.connectAttr(weightFuncPlug, falloffInputPlug, f=True)
        return idx

    def deleteItem(self, index):
        if index is not None and index >= 0:
            maya.cmds.removeMultiInstance(self.weightFunctionPlugName(index), b=True)
            return True
        return False

    # --------------------------------------------------------------------------
    # Info
    # --------------------------------------------------------------------------
    def getTableData(self):
        return [(i, self.getFalloffSourcePlug(i)) for i in self.getIndices()]

    # --------------------------------------------------------------------------
    # Paint
    # --------------------------------------------------------------------------
    def paintablePlugs(self):
        indices = self.getIndices()
        plugs = list()
        for i in indices:
            plug = self.getFalloffSourcePlug(i)
            if plug is not None:
                node = con_utils.plugNode(plug)
                t = maya.cmds.nodeType(node)

                if t == 'componentFalloff':
                    index = con_utils.plugMultiIndex(plug, 'outputWeightFunction')
                    plugs += ComponentFalloffNodeInterface(node).paintablePlugs(index)
                elif t == 'transferFalloff':
                    plugs += NodeInterface(node).paintablePlugs()

        return plugs
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
