import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.internal.common.ae.template as aetemplate

import maya.internal.common.ae.custom as aecustom
import maya.internal.common.utils.material as mtl_utils
import maya.internal.common.qt.table as qt_table
import maya.internal.common.qt.buttons as qt_buttons
import maya.internal.common.utils.ui as ui_utils
from maya.internal.nodes.materialtemplate.node_interface import NodeInterface
from maya.internal.nodes.common.componenttag.component_tag_edit import ComponentTagExpressionEdit

import maya.cmds

from PySide2 import QtWidgets, QtCore

MTL_CREATE_ICON = ui_utils.createIcon(':/material_create.png')
MTL_ASSIGN_ICON = ui_utils.createIcon(':/material_assign.png')

#-------------------------------------------------------------------------------
class AssignmentInfo(object):
    def __init__(self):
        self.tag = None
        self.mtl = None
        self.index = -1
        self.row = -1

#-------------------------------------------------------------------------------
class eMaterialAction(object):
    kNewMaterial = 0
    kExistingMaterial = 1

#-------------------------------------------------------------------------------
class AssignTableWidget(qt_table.TableWidget):

    kColIdx = 0
    kColTag = 1
    kColMtl = 2
    kColLAST = 3

    def __init__(self):
        super(AssignTableWidget, self).__init__()
        self.prepareTable(self.kColLAST)

        self.makeHeader(self.kColIdx, maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEColIdx' ], maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEColIdxTip' ])
        self.makeHeader(self.kColTag, maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEColTag' ], maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEColTagTip' ])
        self.makeHeader(self.kColMtl, maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEColMtl' ], maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEColMtlTip' ])
        self.setColumnResizeMode(content=[self. kColIdx], stretch=[self.kColTag, self.kColMtl])

        self.interface = None
        self.contextMenuWidgetItem = None
        self.cellDoubleClicked.connect(self.doubleClickedOnItem)
        self.shapeNodeName = None
        self.geomPlug = None

    def sizeHint(self):
        return QtCore.QSize(400, 250)

    def makeTableItem(self, col, info):
        horizontalAlign=QtCore.Qt.AlignHCenter
        horizontalAlign=QtCore.Qt.AlignLeft

        if col == self.kColIdx:
            text = str(info.index)
        elif col == self.kColTag:
            text = info.tag
        elif col == self.kColMtl:
            text = info.mtl

        flags = QtCore.Qt.ItemIsSelectable | QtCore.Qt.ItemIsEnabled
        if col == self.kColTag:
            flags = flags | QtCore.Qt.ItemIsEditable

        wi = qt_table.InfoTableWidgetItem(text, info)
        wi.setTextAlignment(horizontalAlign | QtCore.Qt.AlignVCenter)
        wi.setFlags(flags)
        return wi

    def updateItems(self, shapeNodeName, materialTemplateNodeName):
        # collect all the info from the materialTemplate node
        self.interface = NodeInterface(materialTemplateNodeName)
        self.shapeNodeName = shapeNodeName
        self.geomPlug = None

        if self.interface.isValid():
            assignmentData = self.interface.getAssignmentData()
            self.setSortingEnabled(False)
            self.setRowCount(len(assignmentData))
            for row, d in enumerate(assignmentData):
                info = AssignmentInfo()
                info.index = d[0]
                info.tag = d[1]
                info.mtl = d[2]
                info.row = row

                for col in [ self.kColIdx, self.kColTag, self.kColMtl]:
                    self.setItem(row, col, self.makeTableItem(col, info))
                self.setCellWidget(row, self.kColTag, None)
                row = (row+1)
        else:
            self.clearItems()

    def clearItems(self):
        self.setRowCount(0)
        self.interface = None


    def getCurrentItemInfo(self):
        row = self.currentRow()
        if row >= 0:
            widgetItem = self.item(row, self.kColIdx)
            if widgetItem:
                return widgetItem.info
        return None

    def contextMenuEvent(self, event):

        index = self.indexAt(event.pos())
        widgetItem = None
        if not index.isValid():
            info = AssignmentInfo()
        else:
            row = index.row()
            col = index.column()
            widgetItem = self.item(row, col)
            info = widgetItem.info

        menu = QtWidgets.QMenu(self)

        self.contextMenuWidgetItem = widgetItem

        # Material actions
        selectMtlAction = menu.addAction(maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEActionSelectMaterial' ])
        selectMtlAction.setEnabled(info.mtl is not None)

        act = menu.addAction(maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEActionNewMaterial' ])
        self.createMaterialMenu = QtWidgets.QMenu(self)
        self.createMaterialMenu.aboutToShow.connect(self.buildCreateMaterialMenu)
        act.setMenu(self.createMaterialMenu)
        act.setIcon(MTL_CREATE_ICON)
        act.setEnabled(info.index >= 0)

        act = menu.addAction(maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEActionExistingMaterial' ])
        self.existingMaterialMenu = QtWidgets.QMenu(self)
        self.existingMaterialMenu.aboutToShow.connect(self.buildExistingMaterialMenu)
        act.setMenu(self.existingMaterialMenu)

        act.setIcon(MTL_ASSIGN_ICON)
        act.setEnabled(info.index >= 0)

        # Expression actions
        menu.addSeparator()
        selectTagAction = menu.addAction(maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEActionSelectTag' ])
        selectTagAction.setEnabled(info.tag is not None and self.shapeNodeName is not None)

        editTagAction = menu.addAction(maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEActionEditTag' ])
        editTagAction.setEnabled(False)

        # General actions
        menu.addSeparator()
        addAction = menu.addAction(maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEActionAdd' ])
        addAction.setEnabled(True)
        deleteAction = menu.addAction(maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEActionDelete' ])
        deleteAction.setEnabled(info.index >= 0)

        # Rename template
        # Rename material

        # Execute the menu
        action = menu.exec_(self.mapToGlobal(event.pos()))
        if action == addAction:
            self._addAssignment(info)
        elif action == deleteAction:
            self._deleteAssignment(info)
        elif action == selectMtlAction:
            mtl = self.interface.getMaterial(info.index)
            if mtl:
                maya.cmds.select(mtl)
        elif action == selectTagAction:
            self._selectTag(info)
        elif isinstance(action, qt_table.TableAction):
            self._assignMaterial(info, action)

        self.contextMenuWidgetItem = None

    def _updateItems(self):
        self.updateItems(self.shapeNodeName, self.interface.getEditNode())

    def getGeomPlug(self):
        if self.geomPlug is not None:
            return self.geomPlug

        geomShape = self.shapeNodeName
        if geomShape is None:
            # If we did have a shape given to us (f.e. when editing the
            # template directly and not in the shapeAE) then just use
            # one our destinations
            dstShapes = self.interface.getDestinationShapes()
            geomShape = dstShapes[0] if len(dstShapes) else None

        if geomShape:
            # Get the plug that contains the geometry with the componentTags
            lso = maya.cmds.deformableShape(geomShape, lso=True)[0]
            self.geomPlug = '{}.{}'.format(geomShape, lso)

        return self.geomPlug

    @ui_utils.undoChunk('add material assignment item')
    def _addAssignment(self, info):
        shadEngine = None
        tagExpr = '*'
        if info is not None and info.index is not None and info.index >= 0:
            shadEngine = self.interface.getShadingEngine(info.index)
            tagExpr = self.interface.getExpression(info.index)
        if shadEngine is None:
            shadEngine = mtl_utils.findDefaultShadingEngineForShape(self.shapeNodeName)

        self.interface.appendAssignment(shadEngine, tagExpr)


    @ui_utils.undoChunk('delete material assignment item')
    def _deleteAssignment(self, info):
        self.interface.deleteAssignment(info.index)

    @ui_utils.undoChunk('select component tag expression')
    def _selectTag(self, info):
        wso =  maya.cmds.deformableShape(self.shapeNodeName, wso=True)
        comp = None
        if wso and len(wso) > 0:
            plug = '{}.{}'.format(self.shapeNodeName, wso[0])
            comp = maya.cmds.geometryAttrInfo(plug, cex=info.tag, cmp=True)

        if comp:
            args = []
            for c in comp:
                args.append('{0}.{1}'.format(self.shapeNodeName, c))
            maya.cmds.select(*args, r=True)
        else: # We failed, so just select the total shape without components
            maya.cmds.select(self.shapeNodeName, r=True)

    @ui_utils.undoChunk('assign material')
    def _assignMaterial(self, info, action):
        if action.actId == eMaterialAction.kNewMaterial:
            saveSelection = maya.cmds.ls(selection=True)
            self.interface.createAndAssignMaterial(info.index, action.text())
            maya.cmds.select(saveSelection, r=True)

        elif action.actId == eMaterialAction.kExistingMaterial:
            if self.interface.assignMaterial(info.index, action.text()):
                self._updateItems()

    @ui_utils.undoChunk('move material assignments')
    def _moveAssignment(self, info, delta):
        old_row = info.row
        if self.interface.moveAssignment(info.index, delta):
            self._updateItems()
            self.selectRow(max(min(old_row+delta, self.rowCount()-1), 0))

    @QtCore.Slot()
    def addItem(self):
        info = self.getCurrentItemInfo()
        self._addAssignment(info)

    @QtCore.Slot()
    def deleteCurrentItem(self):
        info = self.getCurrentItemInfo()
        if info:
            self._deleteAssignment(info)

    @QtCore.Slot()
    def moveCurrentItemUp(self):
        info = self.getCurrentItemInfo()
        if info:
            self._moveAssignment(info, -1)

    @QtCore.Slot()
    def moveCurrentItemDown(self):
        info = self.getCurrentItemInfo()
        if info:
            self._moveAssignment(info, +1)

    @QtCore.Slot()
    def buildCreateMaterialMenu(self):
        self.createMaterialMenu.clear()
        materialTypes = mtl_utils.findMaterialCandidateTypesForShape(self.shapeNodeName)
        for mtl in materialTypes:
            self.createMaterialMenu.addAction(qt_table.TableAction(mtl, self.createMaterialMenu, eMaterialAction.kNewMaterial))

    @QtCore.Slot()
    def buildExistingMaterialMenu(self):
        currentMtl = self.contextMenuWidgetItem.info.mtl if self.contextMenuWidgetItem else None
        self.existingMaterialMenu.clear()
        materials = mtl_utils.findMaterialCandidatesForShape(self.shapeNodeName)
        for mtl in materials:
            act = qt_table.TableAction(mtl, self.existingMaterialMenu, eMaterialAction.kExistingMaterial)
            act.setEnabled(mtl != currentMtl)
            self.existingMaterialMenu.addAction(act)

    @QtCore.Slot(int, int)
    def doubleClickedOnItem(self, row, col):
        if col == self.kColTag:
            widgetItem = self.item(row, self.kColTag)
            tagWidget = self.cellWidget(row, self.kColTag)
            if tagWidget is None:
                plugName = self.interface.getExpressionPlugName(widgetItem.info.index)
                tagWidget = ComponentTagExpressionEdit(plugName, geometryPlugName=self.getGeomPlug(), onlyShowDuringEdit=True)
                self.setCellWidget(row, self.kColTag, tagWidget)

            tagWidget.show()
            tagWidget.setFocus()


#-------------------------------------------------------------------------------
class MaterialTemplateWidget(QtWidgets.QWidget):
    def __init__(self):
        super(MaterialTemplateWidget, self).__init__()

        self.mainLayout = QtWidgets.QVBoxLayout()

        self.topBarLayout = QtWidgets.QHBoxLayout()
        self.topBarLayout.setSpacing(1)
        spacerItem1 = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        spacerItem2 = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Minimum)

        self.addButton, self.delButton = qt_buttons.makeItemAddDelIconButtons(
                maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEItemAdd' ],
                maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEItemDel' ])

        self.upButton, self.downButton = qt_buttons.makeItemUpDownIconButtons(
                maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEItemUp' ],
                maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEItemDown' ])

        self.topBarLayout.addItem(spacerItem1)
        self.topBarLayout.addWidget(self.addButton)
        self.topBarLayout.addWidget(self.delButton)
        self.topBarLayout.addItem(spacerItem2)
        self.topBarLayout.addWidget(self.upButton)
        self.topBarLayout.addWidget(self.downButton)

        # Material template
        self.tableWidget = AssignTableWidget()
        self.tableWidget.itemSelectionChanged.connect(self.tableSelectionChangedSlot)

        self.addButton.clicked.connect(self.tableWidget.addItem)
        self.delButton.clicked.connect(self.tableWidget.deleteCurrentItem)
        self.upButton.clicked.connect(self.tableWidget.moveCurrentItemUp)
        self.downButton.clicked.connect(self.tableWidget.moveCurrentItemDown)

        #
        self.mainLayout.addLayout(self.topBarLayout)
        self.mainLayout.addWidget(self.tableWidget)

        # Finish up the layout
        self.setLayout(self.mainLayout)

    def updateItems(self, shapeNodeName, materialTemplateNodeName):
        self.tableWidget.updateItems(shapeNodeName, materialTemplateNodeName)
        self.updateTopBar()

    def clearItems(self):
        self.tableWidget.clearItems()

    def updateTopBar(self):
        row = self.tableWidget.currentRow()
        cnt = self.tableWidget.rowCount()
        if row < 0:
            self.delButton.setEnabled(False)
            self.upButton.setEnabled(False)
            self.downButton.setEnabled(False)
        else:
            self.delButton.setEnabled(True)
            self.upButton.setEnabled(row > 0)
            self.downButton.setEnabled(row < (cnt-1))

    @QtCore.Slot()
    def tableSelectionChangedSlot(self):
        self.updateTopBar()

#-------------------------------------------------------------------------------
class AssignControlWidget(QtWidgets.QWidget):
    def __init__(self, uiParent=None):
        super(AssignControlWidget, self).__init__()

        self.mainLayout = QtWidgets.QVBoxLayout()
        # Material template
        self.materialTemplateWidget = MaterialTemplateWidget()
        self.mainLayout.addWidget(self.materialTemplateWidget)

        # Finish up the layout
        self.setLayout(self.mainLayout)

    def changeNode(self, nodeName, plugName):
        self.plugName = plugName
        self.nodeName = nodeName
        self.refresh()

    def _refreshTemplateWidget(self):
        self.materialTemplateWidget.updateItems(None, self.nodeName)

    def refresh(self):
        self._refreshTemplateWidget()

    @QtCore.Slot()
    def templateChanged(self):
        self._refreshTemplateWidget()

#-------------------------------------------------------------------------------
class AETemplate(aetemplate.Template):
    def __init__(self, nodeName):
        self.nodeName = nodeName
        self.buildUI(nodeName)

    def buildUI(self, nodeName):
        with aetemplate.Layout(self, maya.stringTable['y_maya_internal_nodes_materialtemplate_ae_template.kMaterialAssignAEAttrHeader' ], collapse=False):
            self.defineQtCustom(AssignControlWidget, 'assign')




# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
