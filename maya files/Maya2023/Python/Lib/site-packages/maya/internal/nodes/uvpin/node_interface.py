"""
    Module containing functions to edit the uvPin node
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds
import maya.internal.nodes.common.pin.node_interface as pin_ifc
import maya.internal.common.utils.connections as con_utils
import maya.internal.common.utils.message as msg_utils
import maya.internal.common.utils.geometry as geo_utils

# ------------------------------------------------------------------------------
class NodeInterface(pin_ifc.NodeInterface):
    _mayaNodeType = 'uvPin'

    def __init__(self, nodeName):
        super(NodeInterface, self).__init__(nodeName)

    def getNormalizedIsoParms(self):
        plugName = u'{0}.normalizedIsoParms'.format(self.editNode)
        return maya.cmds.getAttr(plugName)

    def addInputs(self, uvs):

        plugName = u'{0}.coordinate'.format(self.editNode)
        usedIndices = con_utils.getValidMultiIndices(plugName)

        if usedIndices is None or len(usedIndices) == 0:
            index = 0
        else:
            index = usedIndices[-1] + 1

        newIndices = []
        for uv in uvs:
            newIndices.append(index)
            maya.cmds.setAttr(u'{0}[{1}].coordinateU'.format(plugName, index), uv[0])
            maya.cmds.setAttr(u'{0}[{1}].coordinateV'.format(plugName, index), uv[1])
            index = index + 1

        return newIndices

    def _checkValidGeom(self):
        geom = None

        if self.isValidWithErrorMessage():
            geom = self.getGeometry()
            if geom is None:
                msg_utils.showError(maya.stringTable['y_maya_internal_nodes_uvpin_node_interface.kErrMsgNoGeomSet' ])

        return geom

    def addInputsFromSelectedComponents(self, outputConnect=pin_ifc.eXformIO.kLocator):
        createdNodes = list()

        geom = self._checkValidGeom()
        if geom is None:
            return createdNodes

        if outputConnect == pin_ifc.eXformIO.kCurrent:
            msg_utils.showWarning(maya.stringTable['y_maya_internal_nodes_uvpin_node_interface.kErrMsgOutputMode' ])
            return createdNodes

        normalizedIsoParms = self.getNormalizedIsoParms()
        uvSetName = self.getUvSetName()

        # Find which components to use and and create pins for those...
        result, resStat = geo_utils.getUvsFromSelection(geom=geom, normalizedIsoParms=normalizedIsoParms, uvSet=uvSetName)
        if len(result) != 1 or resStat != geo_utils.eCollectUvsStatus.kSuccess:
            return createdNodes

        _geomShapeNode, _uvSet, uvs = result[0]
        indices = self.addInputs(uvs)

        createdNodes = self.hookupOutputs(outputConnect=outputConnect, indices=indices)
        return createdNodes

    def addInputsFromClosestPointToTransforms(self, transforms=None, outputConnect=pin_ifc.eXformIO.kCurrent):
        createdNodes = list()

        geom = self._checkValidGeom()
        if geom is None:
            return createdNodes

        if transforms is None or len(transforms) == 0:
            msg_utils.showError(maya.stringTable['y_maya_internal_nodes_uvpin_node_interface.kErrMsgNoTransforms' ])
            return createdNodes

        normalizedIsoParms = self.getNormalizedIsoParms()
        uvSetName = self.getUvSetName()

        # Find which components to use and and create pins for those...
        result, resStat = geo_utils.getUvsFromClosestPointToTransforms(geom, transforms=transforms, normalizedIsoParms=normalizedIsoParms, uvSet=uvSetName)
        if result is None or resStat != geo_utils.eCollectUvsStatus.kSuccess:
            return createdNodes

        _geomShapeNode, _uvSet, uvs, targets = result

        indices = self.addInputs(uvs)
        createdNodes = self.hookupOutputs(outputConnect=outputConnect, indices=indices, targets=targets)

        return createdNodes

def createRivet():
    import maya.internal.nodes.uvpin.cmd_create as ptguv
    ptguv.Command().execute(setupMode=0, outputConnect=3, uvSetName='', allowCreateWithoutInputs=False)
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
