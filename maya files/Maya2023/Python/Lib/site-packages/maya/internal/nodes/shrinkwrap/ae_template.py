import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds as cmds
import maya.internal.nodes.weightgeometryfilter.ae_template as wgfae
import maya.internal.nodes.geometryfilter.ae_template as gfae
from functools import partial
import maya.internal.common.utils.ui as ui_utils
import maya.internal.common.ae.custom as aecustom
from maya.internal.common.ae.template import Layout

class ShrinkWrapAxesNewControl(aecustom.CustomControl):
    # don't need to add replaceUI since callbacks always use
    def buildControlUI(self):
        cmds.checkBoxGrp(ncb=3, label=maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kAlongXYZ' ],
                         labelArray3=[maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kAlongX' ], maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kAlongY' ], maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kAlongZ' ]],
                         changeCommand1=partial(self.onChangeCommand, "alongX"),
                         changeCommand2=partial(self.onChangeCommand, "alongY"),
                         changeCommand3=partial(self.onChangeCommand, "alongZ"))

    def onChangeCommand(self, attr, value):
        cmds.setAttr("{}.{}".format(self.nodeName, attr), value)

class ShrinkWrapSMPMapBordersNewControl(aecustom.CustomControl):
    #TODO add replace UI
    def buildControlUI(self):
        self.keepBoderAttrsForUIMap = {0: 3, 1: 2, 2: 1}

        parent = maya.cmds.setParent(q=True)
        maya.cmds.setUITemplate('attributeEditorTemplate', pushTemplate=True)

        self.SMMapBorders_RBG = cmds.radioButtonGrp(numberOfRadioButtons=3, label=maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kSMPMapBordersLabel' ],
            vertical=True,
            labelArray3=[maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kSMPDoNotSmooth' ], maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kSMPSmoothInternal' ], maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kSMPSmoothAll' ]],
            changeCommand=self.shrinkWrapSMPAttrsFromMapBordersUI)

        self.SMPreserver_CBG = cmds.checkBoxGrp(ncb=2, label=maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kSMPPreserve' ],
            vertical=True,
            labelArray2=[maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kSMPGeometryBorders' ], maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kSMPHardEdges' ]],
            changeCommand=self.shrinkWrapSMPAttrsFromMapBordersUI)

        self.setupUIFromAttrs()

        maya.cmds.setUITemplate(popTemplate=True)
        maya.cmds.setParent(parent)

        cmds.scriptJob(replacePrevious=True, parent=self.SMMapBorders_RBG, attributeChange=[self.plugName, self.setupUIFromAttrs])

    def _set_attr_value(self, attrName, value):
        connectedPlugs = cmds.listConnections(attrName, plugs=True, source=True)
        return cmds.setAttr(connectedPlugs[0] if connectedPlugs else attrName, value)

    def setupUIFromAttrs(self):
        smpMapBorders = cmds.getAttr("{}.keepMapBorders".format(self.nodeName))
        cmds.radioButtonGrp(self.SMMapBorders_RBG, edit=True, select=self.getRadioButtonIdForKeepBorderAttr(smpMapBorders))

        keepBorder = cmds.getAttr("{}.keepBorder".format(self.nodeName))
        cmds.checkBoxGrp(self.SMPreserver_CBG, edit=True, value1=keepBorder)

        keepHardEdge = cmds.getAttr("{}.keepHardEdge".format(self.nodeName))
        cmds.checkBoxGrp(self.SMPreserver_CBG, edit=True, value2=keepHardEdge)

    def getRadioButtonIdForKeepBorderAttr(self, attrValue):
        return self.keepBoderAttrsForUIMap.get(attrValue)

    def getKeepBorderAttrForRadioButtonId(self, radioButtonId):
        for attrId, buttonId in self.keepBoderAttrsForUIMap.items():
            if buttonId == radioButtonId:
                return attrId

    def shrinkWrapSMPAttrsFromMapBordersUI(self, unusedValue):
        mapBorders = cmds.radioButtonGrp(self.SMMapBorders_RBG, q=True, select=True)
        self._set_attr_value("{}.keepMapBorders".format(self.nodeName), self.getKeepBorderAttrForRadioButtonId(mapBorders))

        keepBorder = cmds.checkBoxGrp(self.SMPreserver_CBG, q=True, value1=True)
        self._set_attr_value("{}.keepBorder".format(self.nodeName), keepBorder)

        keepHardEdge = cmds.checkBoxGrp(self.SMPreserver_CBG, q=True, value2=True)
        self._set_attr_value("{}.keepHardEdge".format(self.nodeName), keepHardEdge)


class AETemplate(wgfae.AETemplate):
    def inputAttributesTableHiddenColumns(self):
        return [gfae.eColumn.kFal]

    @staticmethod
    def checkShrinkWrapProjection(nodename):
        projection = cmds.getAttr("{}.projection".format(nodename))

        cmds.editorTemplate(dimControl=[nodename, "boundingBoxCenter", projection != 1])
        cmds.editorTemplate(dimControl=[nodename, "axisReference", projection != 2])
        cmds.editorTemplate(dimControl=[nodename, "alongX", projection != 2])
        cmds.editorTemplate(dimControl=[nodename, "alongY", projection != 2])
        cmds.editorTemplate(dimControl=[nodename, "alongZ", projection != 2])
        cmds.editorTemplate(dimControl=[nodename, "closestIfNoIntersection", projection == 4])
        cmds.editorTemplate(dimControl=[nodename, "bidirectional", projection == 4])
        cmds.editorTemplate(dimControl=[nodename, "reverse", projection == 4])

    @staticmethod
    def checkShrinkWrapSmoothLevel(nodename):
        targetSmoothLevel = cmds.getAttr("{}.targetSmoothLevel".format(nodename))

        cmds.editorTemplate(dimControl=[nodename, "boundaryRule", targetSmoothLevel == 0])
        cmds.editorTemplate(dimControl=[nodename, "continuity", targetSmoothLevel == 0])
        cmds.editorTemplate(dimControl=[nodename, "smoothUVs", targetSmoothLevel == 0])
        cmds.editorTemplate(dimControl=[nodename, "propagateEdgeHardness", targetSmoothLevel == 0])
        cmds.editorTemplate(dimControl=[nodename, "keepMapBorders", targetSmoothLevel == 0])
        cmds.editorTemplate(dimControl=[nodename, "keepHardEdge", targetSmoothLevel == 0])
        cmds.editorTemplate(dimControl=[nodename, "keepBorder", targetSmoothLevel == 0])

    @staticmethod
    def checkShrinkWrapFalloff(nodename):
        falloff = cmds.getAttr("{}.falloff".format(nodename))
        cmds.editorTemplate(dimControl=[nodename, "falloff", falloff == 0])

    @staticmethod
    def checkShrinkWrapShapePreservation(nodename):
        shapePreservationEnable = cmds.getAttr("{}.shapePreservationEnable".format(nodename))

        cmds.editorTemplate(dimControl=[nodename, "shapePreservationSteps", shapePreservationEnable == 0])
        cmds.editorTemplate(dimControl=[nodename, "shapePreservationIterations", shapePreservationEnable == 0])
        cmds.editorTemplate(dimControl=[nodename, "shapePreservationMethod", shapePreservationEnable == 0])
        cmds.editorTemplate(dimControl=[nodename, "shapePreservationReprojection", shapePreservationEnable == 0])

    def buildUI(self, nodeName):
        with Layout(self, maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kShrinkWrapAttributes'  ], False):

            self.addControl("projection", callback=self.checkShrinkWrapProjection)
            self.addControl("closestIfNoIntersection")
            cmds.editorTemplate(interruptOptimize=True)
            self.addControls([
                "reverse",
                "bidirectional",
                "offset",
                "targetInflation",
                "boundingBoxCenter",
            ])

            ui_utils.addSeparatorLine()
            self.addControl("axisReference")
            self.defineCustom(ShrinkWrapAxesNewControl(), attrs=
                [
                    "alongX",
                    "alongY",
                    "alongZ"
                ])

            ui_utils.addSeparatorLine()
            self.addControl("targetSmoothLevel", callback=self.checkShrinkWrapSmoothLevel)

            with Layout(self, maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kFalloffControls'  ], True):
                self.addControl("falloff", callback=self.checkShrinkWrapFalloff)
                self.addControl("falloffIterations")

            with Layout(self, maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kShapePreservationControls'  ], True):
                cmds.editorTemplate(label=maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kEnableShapePreservation' ], addControl=["shapePreservationEnable", self.checkShrinkWrapShapePreservation])
                cmds.editorTemplate(label=maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kIterations' ], addControl=["shapePreservationSteps"])
                cmds.editorTemplate(label=maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kIterationsPerStep' ], addControl=["shapePreservationIterations"])
                cmds.editorTemplate(label=maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kMethod' ], addControl=["shapePreservationMethod"])
                cmds.editorTemplate(label=maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kReprojection' ], addControl=["shapePreservationReprojection"])

            with Layout(self, maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kSmoothTargetControls'  ], True):
                cmds.editorTemplate(beginNoOptimize=True)
                cmds.editorTemplate(label=maya.stringTable['y_maya_internal_nodes_shrinkwrap_ae_template.kBoundaryRule' ], addControl=["boundaryRule"])

                self.addControls([
                    "continuity",
                    "smoothUVs",
                    "propagateEdgeHardness"
                ])
                cmds.editorTemplate(endNoOptimize=True)
                self.defineCustom(ShrinkWrapSMPMapBordersNewControl(),
                                [
                                    "keepMapBorders",
                                    "keepHardEdge",
                                    "keepBorder"
                                ])

        self.suppress("targetGeom")
        self.suppress("cachedSmoothTarget")
        self.suppress("innerGeom")

        super(AETemplate, self).buildUI(nodeName)
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
