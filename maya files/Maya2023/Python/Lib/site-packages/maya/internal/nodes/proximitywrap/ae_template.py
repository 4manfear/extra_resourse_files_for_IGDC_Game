import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds
import maya.internal.common.ae.template as aetemplate
import maya.internal.common.ae.custom as aecustom
import maya.internal.common.ae.ramp as aeramp
import maya.internal.common.qt.buttons as qt_buttons
import maya.internal.common.utils.geometry as geo_utils
import maya.internal.common.utils.ui as ui_utils
import maya.internal.nodes.proximitywrap.node_interface as ifc
import maya.internal.nodes.proximitywrap.cmd_optionvar as opv
import maya.internal.nodes.weightgeometryfilter.ae_template as wgfae

noneDriverLabel = maya.stringTable['y_maya_internal_nodes_proximitywrap_ae_template.kLabelNoneDriver' ]

# --------------------------------------------------------------------------------------------------
class PerDriverControl(aecustom.CustomControl):

    def buildControlUI(self):
        self.lastSelected = dict()

        # Prepare
        parent = maya.cmds.setParent(q=True)

        maya.cmds.setUITemplate('attributeEditorTemplate', pushTemplate=True)

        # Current driver
        self.curDriver = ui_utils.DynamicOptionMenu(label=maya.stringTable['y_maya_internal_nodes_proximitywrap_ae_template.kCurDriver' ],
                                                    candidateFn=self._getCurDriverCandidates,
                                                    pickedFn=self._selectDriver)

        # Original driver
        self.orgDriver = ui_utils.DynamicOptionMenu(label=maya.stringTable['y_maya_internal_nodes_proximitywrap_ae_template.kOrgDriver' ])
        maya.cmds.control(self.orgDriver.control, edit=True, enable=False)

        # Driver attributes
        indices = maya.cmds.getAttr( self.plugName, multiIndices=True)
        hasDrivers = True if indices else False
        self.plugBase = u'{}[{}]'.format(self.plugName, indices[0] if hasDrivers else 0)

        self.widgetDict = dict()

        self.addControlGrp('driverStrength')
        self.addControlGrp('driverWrapMode')
        self.addControlGrp('driverOverrideSmoothNormals', changeCommand=self._onOverride)
        self.dsm = self.addControlGrp('driverSmoothNormals')
        self.addControlGrp('driverOverrideSpanSamples', changeCommand=self._onOverride)
        self.dspns = self.addControlGrp('driverSpanSamples')

        # Falloff params
        self.addControlGrp('driverFalloffStart')
        self.addControlGrp('driverFalloffEnd')
        self.addControlGrp('driverDropoffRate')
        self.addControlGrp('driverOverrideFalloffRamp', changeCommand=self._onOverride)

        self.rampWidget = aeramp.RampWidget(attribute=self.drvAttr('driverFalloffRamp'))
        self.rampWidget.buildUI()

        if not hasDrivers:
            # We created a temporary index as a side effect for building this UI. Now we should remove it
            maya.cmds.removeMultiInstance(self.plugBase, b=True)
            self._enableDriverWidgets(False)
            self.rampWidget.setAttribute(None)
            self.plugBase = None

        # Finish
        maya.cmds.setUITemplate(popTemplate=True)
        maya.cmds.setParent(parent)
        self.setCurrentDriver()

    def replaceControlUI(self):
        self.setCurrentDriver()

    def setCurrentDriver(self, newIndex=None):
        editor = ifc.NodeInterface(self.nodeName)
        if editor.isValid():
            index = self.lastSelected.get(self.nodeName, None) if newIndex is None else newIndex
            index = editor.getValidDriverIndex(index)
            self.lastSelected[self.nodeName] = index
            if index is None:
                self.plugBase = None
            else:
                # Update which attributes the widgets are following
                self.plugBase = editor.getDriverPlug(index)
                for ctrl, args in list(self.widgetDict.items()):
                    attr, cc = args
                    if cc:
                        maya.cmds.attrControlGrp(ctrl, edit=True, attribute=self.drvAttr(attr), changeCommand=cc)
                    else:
                        maya.cmds.attrControlGrp(ctrl, edit=True, attribute=self.drvAttr(attr))

            self.rampWidget.setAttribute(attribute=self.drvAttr('driverFalloffRamp'))

        self.updateWidgets()

    def _enableDriverWidgets(self, enable):
        for ctrl in list(self.widgetDict.keys()):
                maya.cmds.control(ctrl, edit=True, enable=enable)
        self.rampWidget.setEnable(enable=enable)
        maya.cmds.control(self.curDriver.control, edit=True, enable=enable)

    def updateWidgets(self):
        editor = ifc.NodeInterface(self.nodeName)
        if not editor.isValid() or self.plugBase is None:
            self._enableDriverWidgets(False)
            return

        index = self.lastSelected[self.nodeName]
        self.plugBase = editor.getDriverPlug(index)

        curDriverName = editor.getDriverName(index, usePlugName=True, useCurrent=True)
        orgDriverName = editor.getDriverName(index, usePlugName=True, useCurrent=False)

        self.curDriver.setValue(curDriverName if curDriverName else noneDriverLabel)
        self.orgDriver.setValue(orgDriverName if orgDriverName else noneDriverLabel)

        # Enable / disable
        validDriver = True if curDriverName and orgDriverName else False

        self._enableDriverWidgets(validDriver)
        maya.cmds.control(self.curDriver.control, edit=True, enable=True)

        if validDriver:
            overrideSmooth = maya.cmds.getAttr(self.drvAttr('driverOverrideSmoothNormals'))
            maya.cmds.control(self.dsm, edit=True, enable=overrideSmooth)

            overrideSpan = maya.cmds.getAttr(self.drvAttr('driverOverrideSpanSamples'))
            maya.cmds.control(self.dspns, edit=True, enable=overrideSpan)

            overrideFalloff = maya.cmds.getAttr(self.drvAttr('driverOverrideFalloffRamp'))
            self.rampWidget.setEnable(enable=overrideFalloff)

    def _onOverride(self, *args):
        self.updateWidgets()

    def _getCurDriverCandidates(self, *args):
        editor = ifc.NodeInterface(self.nodeName)
        driverLookup = editor.getCurrentDriverLookup(usePlugName=True)
        return sorted(driverLookup.keys())

    def _selectDriver(self, *args):
        editor = ifc.NodeInterface(self.nodeName)
        driverLookup = editor.getCurrentDriverLookup(usePlugName=True)
        self.setCurrentDriver(driverLookup.get(args[0], None))

    def drvAttr(self, attr):
        return u'{0}.{1}'.format(self.plugBase, attr) if self.plugBase else None

    def addControlGrp(self, attr, changeCommand=None):
        # strip 'Driver' prefix
        attribute = self.drvAttr(attr)
        niceName = maya.cmds.attributeName(attribute, nice=True)
        label = niceName[7:] if niceName.startswith('Driver ') else niceName

        if changeCommand is None:
            ctrl = maya.cmds.attrControlGrp(attribute=attribute, label=label)
        else:
            ctrl = maya.cmds.attrControlGrp(attribute=attribute, label=label, changeCommand=changeCommand)

        self.widgetDict[ctrl] = (attr, changeCommand)
        return ctrl

#-------------------------------------------------------------------------------
class ManageDriversWidget(qt_buttons.ManageMenuButtonWidget):

    def __init__(self, uiParent=None):
        super(ManageDriversWidget, self).__init__(
            label = maya.stringTable['y_maya_internal_nodes_proximitywrap_ae_template.kManageDrivers' ],
            annotation=maya.stringTable['y_maya_internal_nodes_proximitywrap_ae_template.kManageDriversAnnot' ],
            uiParent=uiParent)

        self.addDriverAct = self.addMenuAction(maya.stringTable['y_maya_internal_nodes_proximitywrap_ae_template.kAddDriverItem' ], ':/item_add.png')
        self.remDriverAct = self.addMenuAction(maya.stringTable['y_maya_internal_nodes_proximitywrap_ae_template.kRemDriverItem' ], ':/item_delete.png')
        self.addMenuSeparator()
        self.editDefaultsAct = self.addMenuAction(maya.stringTable['y_maya_internal_nodes_proximitywrap_ae_template.kEditDefaultsItem' ], ':/menu_options.png')

    @ui_utils.undoChunk('add drivers')
    def addDrivers(self, editor, shapes):
        optionVars = opv.Command().getOptionVars()
        editor.addDrivers(shapes, **optionVars)

    @ui_utils.undoChunk('remove drivers')
    def removeDrivers(self, editor, shapes):
        editor.removeDrivers(shapes)

    def enableMenuItems(self):
        editor = ifc.NodeInterface(self.nodeName)
        if editor.isValid():
            drivers = set(editor.getConnectedDrivers().keys())
            bendies = set(editor.getDeformedShapes())
            selected = set(geo_utils.getSelectedShapes(geomType=editor.driverGeomTypeFilter()))
            selectedUsed = selected.intersection(drivers)  # the selected drivers that are used
            selectedUnused = selected.difference(drivers, bendies)  # the selected ones that are not used as drivers or bendies
            self.addDriverAct.setEnabled(len(selectedUnused)>0)
            self.remDriverAct.setEnabled(len(selectedUsed)>0)
        else:
            self.addDriverAct.setEnabled(False)
            self.remDriverAct.setEnabled(False)

    def actionTriggered(self, action):
        if action == self.editDefaultsAct:
            # popup the dialog to edit the driver defaults
            opv.Command().createDialog()
            return

        editor = ifc.NodeInterface(self.nodeName)
        if not editor.isValid():
            return

        if action == self.addDriverAct:
            self.addDrivers(editor, geo_utils.getSelectedShapes(geomType=editor.driverGeomTypeFilter()))
        elif action == self.remDriverAct:
            self.removeDrivers(editor, geo_utils.getSelectedShapes(geomType=editor.driverGeomTypeFilter()))

# --------------------------------------------------------------------------------------------------------------
class AETemplate(wgfae.AETemplate):
    def buildUI(self, nodeName):

        with aetemplate.Layout(self, maya.stringTable['y_maya_internal_nodes_proximitywrap_ae_template.kProximityWrapAttr' ], collapse=False):
            self.defineQtCustom(ManageDriversWidget, 'drivers')
            self.addControls(['wrapMode',
                             'maxDrivers',
                            'falloffScale',
                            'dropoffRateScale',
                            'smoothInfluences',
                            'smoothNormals',
                            'softNormalization',
                            'spanSamples' ])

            self.defineCustom(aeramp.RampControl(), ['falloffRamp'])

            with aetemplate.Layout(self, maya.stringTable['y_maya_internal_nodes_proximitywrap_ae_template.kBindTags' ], collapse=False):
                self.addControl('useBindTags', callback=self.__useBindTagsCheck)
                self.addControl('bindTagsFilter')

            with aetemplate.Layout(self, maya.stringTable['y_maya_internal_nodes_proximitywrap_ae_template.kPerDriverAttr' ], collapse=False):
                self.defineCustom(PerDriverControl(), ['drivers'])

            self.suppress('drivers')
            self.suppress('driverWeightFunction')
            self.suppress('falloffRamp')
            self.suppress('originalGeometry')
            self.suppress('associativeGeometry')

        super(AETemplate, self).buildUI(nodeName)

    @staticmethod
    def __useBindTagsCheck(nodeName):
        useBindTags = maya.cmds.getAttr('{}.useBindTags'.format(nodeName))
        maya.cmds.editorTemplate(dimControl=[nodeName, 'bindTagsFilter', not useBindTags])
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
