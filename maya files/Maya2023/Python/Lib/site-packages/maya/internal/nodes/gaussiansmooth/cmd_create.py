"""
Module containing functions to create setup for gaussian filter.
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


import maya.cmds

import maya.internal.common.cmd.curve_filter as cmdcurvefilter
import maya.app.general.keySetOptionBox as keySetOptionBox
import maya.internal.common.utils.ui as ui_utils
import maya.api.OpenMayaUI as omui
from maya.common.ui import LayoutManager
from maya.common.ui import ParentManager

class eTimeRangeMode(object):
    kAll = 1
    kSelection = 2
    kStartEnd = 3
    kTimeSlider = 4

# ------------------------------------------------------------------------------
# Command
# ------------------------------------------------------------------------------
class Command(cmdcurvefilter.Command):
    def __init__(self):
        super(Command, self).__init__()
        self.commandDescription = maya.stringTable['y_maya_internal_nodes_gaussiansmooth_cmd_create.kSmoothGaussianCommandDescription' ]
        self.commandTitle = maya.stringTable['y_maya_internal_nodes_gaussiansmooth_cmd_create.kCurveFilterCommandTitle' ]
        self.commandHelpTag = 'GraphGaussianCurve'
        self.optionVarCategory = 'Graph Editor.Curve Filter (Gaussian)'
        self.optionVarDefaults.update( {
            'smoothGaussianCurveFilterWidth': 3.0,
            'smoothGaussianCurveFilterSampleCount': 8,
            'useQuaternions': False })
        self.filterSmoothGaussianToolName = ""

        if not maya.cmds.filterGaussianCtx("filterGaussianCtx", query=True, ex=True):
            self.smoothGaussianPreviewInit(True, True)        
    
    def filterSmoothGaussianTool(self):
        if "" == self.filterSmoothGaussianToolName or \
            maya.cmds.filterGaussianCtx(self.filterSmoothGaussianToolName, query=True, ex=True):
            self.filterSmoothGaussianToolName = 'filterGaussianCtx'

        return self.filterSmoothGaussianToolName

    def smoothGaussianToolActive(self):
        tool = self.filterSmoothGaussianTool()
        str = "{}".format(maya.cmds.currentCtx())
        return (str == tool)

    def smoothGaussianPreviewInit(self, state=False, onCtxCreation=False):
        ''' Connect the widgets would affect the preview.
        '''
        if onCtxCreation:
            self.smoothGaussianPreviewUpdate(True)

        if not onCtxCreation and state:
            if maya.cmds.radioButtonGrp(self.timeModeWidget, query=True, exists=True):
                maya.cmds.radioButtonGrp(self.timeModeWidget, edit=True, changeCommand=lambda x: self.smoothGaussianPreviewUpdate(onCtxCreation))

            if maya.cmds.floatFieldGrp(self.startTimeBox, query=True, exists=True):
                maya.cmds.floatFieldGrp(self.startTimeBox, edit=True, changeCommand=lambda x: self.smoothGaussianPreviewUpdate(onCtxCreation), \
                    dragCommand=lambda x: self.smoothGaussianPreviewUpdate(onCtxCreation))
            
            if maya.cmds.floatFieldGrp(self.endTimeBox, query=True, exists=True):
                maya.cmds.floatFieldGrp(self.endTimeBox, edit=True, changeCommand=lambda x: self.smoothGaussianPreviewUpdate(onCtxCreation), \
                    dragCommand=lambda x: self.smoothGaussianPreviewUpdate(onCtxCreation))

            if maya.cmds.floatFieldGrp(self.widthWidget, query=True, exists=True):
                maya.cmds.floatFieldGrp(self.widthWidget, edit=True, changeCommand=lambda x: self.smoothGaussianPreviewUpdate(onCtxCreation))
            
            if maya.cmds.intFieldGrp(self.sampleCountWidget, query=True, exists=True):
                maya.cmds.intFieldGrp(self.sampleCountWidget, edit=True, changeCommand=lambda x: self.smoothGaussianPreviewUpdate(onCtxCreation))
            
            if maya.cmds.checkBoxGrp(self.useQuaternionWidget, query=True, exists=True):
                maya.cmds.checkBoxGrp(self.useQuaternionWidget, edit=True, changeCommand=lambda x: self.smoothGaussianPreviewUpdate(onCtxCreation))

    def smoothGaussianPreviewUpdate(self, onCtxCreation=False):
        ''' Update the preview
        '''
        optionVarDict = self.getWidgetValues()
        filterWidth = optionVarDict.get("smoothGaussianCurveFilterWidth", None)
        filterSampleCount = optionVarDict.get("smoothGaussianCurveFilterSampleCount", None)
        useQuat = optionVarDict.get("useQuaternions", None)

        timeRangeMode = optionVarDict.get('timeRange', None)
        playbackMin = maya.cmds.playbackOptions(query=True, minTime=True)
        playbackMax = maya.cmds.playbackOptions(query=True, maxTime=True)

        start = 0
        end = 0
        useSelection = False

        if timeRangeMode == eTimeRangeMode.kAll:
            start = playbackMin
            end = playbackMax
        elif timeRangeMode == eTimeRangeMode.kSelection:
            useSelection = True
        elif timeRangeMode == eTimeRangeMode.kStartEnd:
            start = optionVarDict.get("startTime")
            end = optionVarDict.get("endTime")
        elif timeRangeMode == eTimeRangeMode.kTimeSlider:
            start = playbackMin
            end = playbackMax

        ctx = self.filterSmoothGaussianTool()
        
        if onCtxCreation:
            maya.cmds.filterGaussianCtx(ctx)
        else:
            maya.cmds.filterGaussianCtx(ctx, edit=True, startTime=start, endTime=end, \
                selectedKeys=useSelection, width=filterWidth, sampleCount=filterSampleCount, \
                useQuaternion=useQuat)
        
        return ctx
        
    def _filterSmoothGaussianPreviewEnabled(self, *args):
        
        tool = self.filterSmoothGaussianTool()

        self.smoothGaussianPreviewInit(True, False)
        self.smoothGaussianPreviewUpdate(False)

        currentCtxStr = "{}".format(maya.cmds.currentCtx())
        if ( currentCtxStr != tool):
            maya.cmds.setToolTo(tool)
        

    def _filterSmoothGaussianPreviewDisabled(self, *args):
        tool = self.filterSmoothGaussianTool()
        currentCtxStr = "{}".format(maya.cmds.currentCtx())
        if (currentCtxStr == tool):
            maya.cmds.setToolTo('selectSuperContext')

        self.smoothGaussianPreviewInit(False, False)

    @classmethod
    def command(cls, **kwargs):
        '''Gaussian Smooth curve filter
        '''
        filterArgsDict = Command.getCurveFilterBasicCommandArgs(**kwargs)            

        filterArgsDict['filter'] = "gaussian"
        filterArgsDict['useQuaternion'] = kwargs.get('useQuaternions')
        filterArgsDict['sampleCount'] = kwargs.get('smoothGaussianCurveFilterSampleCount')
        filterArgsDict['width'] = kwargs.get('smoothGaussianCurveFilterWidth')

        maya.cmds.filterCurve(**filterArgsDict)

        returnedNodes = list()
        return cls.finalizeCommand(returnedNodes)

    def addFilterSpecificSettingsDialogWidgets(self):
        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}

        with ui_utils.AttributeLayoutManager():                
            widget = ui_utils.floatFieldGrp(maya.stringTable['y_maya_internal_nodes_gaussiansmooth_cmd_create.kSmoothGaussianCurveFilterWidth' ])
            widgetDict['smoothGaussianCurveFilterWidth'] = (maya.cmds.floatFieldGrp, widget)
            self.widthWidget = widget

            widget = ui_utils.intFieldGrp(maya.stringTable['y_maya_internal_nodes_gaussiansmooth_cmd_create.kSmoothGaussianCurveFilterSampleCount' ], numberOfFields=1)
            widgetDict['smoothGaussianCurveFilterSampleCount'] = (maya.cmds.intFieldGrp, widget)
            self.sampleCountWidget = widget

            widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_nodes_gaussiansmooth_cmd_create.kSmoothGaussianCurveFilterUseQuaternions' ])
            widgetDict['useQuaternions'] = (maya.cmds.checkBoxGrp, widget)
            self.useQuaternionWidget = widget

        self.keySetOptionPreviewOnClose("self._filterSmoothGaussianPreviewDisabled")

        return widgetDict

    def _onUpdateWidgets(self, *args):
        ''' Override from the base class
        '''
        optionVarDict = self.getWidgetValues()
        nonStartEndModeOn = optionVarDict.get('timeRange', None)
        usePreview = optionVarDict.get('preview', None)
        applyBtn = maya.mel.eval('getOptionBoxApplyBtn()')
        maya.cmds.button(applyBtn, edit=True, enable = not usePreview)

        if usePreview:
            self._filterSmoothGaussianPreviewEnabled()
        else:
            self._filterSmoothGaussianPreviewDisabled()

        if nonStartEndModeOn == eTimeRangeMode.kStartEnd:
            maya.cmds.control(self.startTimeBox, edit=True, enable=True)
            maya.cmds.control(self.endTimeBox, edit=True, enable=True)
        else:
            maya.cmds.control(self.startTimeBox, edit=True, enable=False)
            maya.cmds.control(self.endTimeBox, edit=True, enable=False)

    def executeWithPreferences(self, **kwargs):
        '''
        Performs command with the default optionVars plus the stored
        optionVar preferences plus user overrides.
        '''
        cmdKwargs = self.optionVarDefaults.copy()
        cmdKwargs.update(self.getOptionVars())
        cmdKwargs.update(kwargs)

        inPreview = cmdKwargs.get("preview")

        result = None
        if inPreview:
            maya.cmds.CompleteCurrentTool()
        else:
            result = self.command(**cmdKwargs)

        return result
        
    def updateWindow(self):
        ''' Override from the base class
        '''
        self._onUpdateWidgets()
        super(Command, self).updateWindow()

    def windowBoxClosing(self):
        ''' Override from the base class
        '''
        self._filterSmoothGaussianPreviewDisabled()

    def keySetOptionPreviewOnClose(self, cb):
        ''' This is for the UI deletion triggered.
        We want to set the context back to the original one.
        '''
        omui.MUiMessage.addUiDeletedCallback("{}".format(self.previewCheckboxWidget), self._filterSmoothGaussianPreviewDisabled)

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
