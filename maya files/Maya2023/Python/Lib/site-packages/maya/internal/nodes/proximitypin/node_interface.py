"""
    Module containing functions to edit the proximityPin node
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds
import maya.internal.nodes.common.pin.node_interface as pin_ifc
import maya.internal.common.utils.connections as con_utils
import maya.internal.common.utils.message as msg_utils
import maya.internal.common.utils.transform as xfm_utils
import maya.api.OpenMaya as om

# ------------------------------------------------------------------------------
class NodeInterface(pin_ifc.NodeInterface):
    _mayaNodeType = 'proximityPin'

    def __init__(self, nodeName):
        super(NodeInterface, self).__init__(nodeName)

    def addInputs(self, inputConnect=pin_ifc.eXformIO.kMatrix, transforms=None):

        if transforms is None or len(transforms) == 0:
            return None

        geomShape = self.getGeometry()
        if geomShape is None:
            msg_utils.showError(maya.stringTable['y_maya_internal_nodes_proximitypin_node_interface.kProximityPinErrMsgNoGeomSet' ])
            return returnedNodes

        dpGeom = xfm_utils.getDagPathFromNodeName(geomShape)

        plugName = u'{0}.inputMatrix'.format(self.editNode)
        usedIndices = con_utils.getValidMultiIndices(plugName)

        if usedIndices is None or len(usedIndices) == 0:
            index = 0
        else:
            index = usedIndices[-1] + 1

        wrnHookupList = list()
        createdNodes = list()
        newIndices = list()

        for xform in transforms:
            worldMatAttr = u'{0}.worldMatrix[0]'.format(xform)
            localMatAttr = u'{0}.matrix'.format(xform)

            inputMatAttr = u'{0}.inputMatrix[{1}]'.format(self.editNode, index)
            newIndices.append(index)
            index = index + 1

            if inputConnect == pin_ifc.eXformIO.kCurrent:
                xformParent = xfm_utils.getParent(xform)
                if xformParent is None or xformParent == shapeParent:
                    maya.cmds.connectAttr(localMatAttr, inputMatAttr, force=True)
                else:
                    maya.cmds.connectAttr(worldMatAttr, inputMatAttr, force=True)
                    wrnHookupList.append(xform)
                continue

            # Get the transform for xform if it were parented to the geometry while
            # preserving its pivot. That gives us where it is relative to the geometry
            dpXform = xfm_utils.getDagPathFromNodeName(xform)
            xfo = om.MDagPath.matchTransform(dpXform, dpXform, dpGeom, preserveOffsetParentMatrix=True, preservePivot=True)
            relativeMat = xfm_utils.matrixToList(xfo.asMatrix())

            if inputConnect == pin_ifc.eXformIO.kMatrix:
                maya.cmds.setAttr(inputMatAttr, tuple(relativeMat), type='matrix')
                continue

            if inputConnect == pin_ifc.eXformIO.kLocator:
                new_xform = maya.cmds.spaceLocator(n='pinInput')[0]
            else:
                new_xform = maya.cmds.createNode('transform', n='pinInput')

            matAttr = u'{0}.matrix'.format(new_xform)

            maya.cmds.xform(new_xform, a=True, matrix= tuple(relativeMat))
            maya.cmds.connectAttr(matAttr, inputMatAttr, force=True)
            createdNodes.append(new_xform)

        if len(wrnHookupList) > 0:
            msg_utils.showWarning(maya.stringTable['y_maya_internal_nodes_proximitypin_node_interface.kWrnMsgInputConnect' ].format(wrnHookupList))

        return newIndices, createdNodes

    def getConnectedMatrixInputs(self):
        if not self.isValid():
            return []
        plugName = u'{0}.inputMatrix'.format(self.editNode)
        cmi = maya.cmds.listConnections(plugName, plugs=False, destination=False)
        return cmi if cmi else []

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
