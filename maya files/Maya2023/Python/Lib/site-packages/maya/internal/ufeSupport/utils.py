import ufe
import re

def _safeCreateItemOrNone(pathStr):
    """Returns a UFE scene item create based on the UFE path.
    Returns None if the path was invalid instead of raising an exception.
    """
    try:
        ufePath = ufe.PathString.path(pathStr)
        return ufe.Hierarchy.createItem(ufePath)
    except:
        pass
    return None

def isPathStringValidObject(pathStr):
    """Returns true if the input path string can be converted into valid UFE scene
    item. Note: it is not enough to test if the UFE path is non-empty since the path
    string could be a valid path object syntax, but not a valid scene item."""

    item = _safeCreateItemOrNone(pathStr)
    return item is not None

def isPathStringValidMayaObject(pathStr):
    """Returns true if the input path string can be converted into a valid UFE
    scene item and that scene item is a Maya item."""

    item = _safeCreateItemOrNone(pathStr)
    return (item is not None) and (item.runTimeId() == 1)

def isPathStringValidNonMayaObject(pathStr):
    """Returns true if the input path string can be converted into a valid UFE
    scene item and that scene item is a non-Maya item."""

    item = _safeCreateItemOrNone(pathStr)
    return (item is not None) and (item.runTimeId() != 1)

def getLongRunTimeLabel(pathStr):
    item = _safeCreateItemOrNone(pathStr)
    if item:
        ufeUIInfo = ufe.UIInfoHandler.uiInfoHandler(item.runTimeId())
        if ufeUIInfo:
            return ufeUIInfo.getLongRunTimeLabel()
    return ''

def getGatewayPathFromPathString(pathStr):
    """Returns a string representing the gateway node from the input path string.
    Assumes valid path string as input. Can be checked by caller using isPathStringValidObject."""

    # We can simply remove everything from the first path segment separator onwards.
    return re.sub(ufe.PathString.pathSegmentSeparator() + '.*', '', pathStr)

def getNodeNameFromPathString(pathStr):
    """Returns the node name of the UFE scene item corresponding to the input path string.
       Assumes valid path string as input. Can be checked by caller using isPathStringValidObject."""

    sceneItem = _safeCreateItemOrNone(pathStr)
    if not sceneItem:
        return ''
    return sceneItem.nodeName()

def getNonMayaSelectedItems():
    """Returns a list of all the non-Maya selected items.
    Note: this list contains the UFE path string for each item."""

    ret = []
    ufeSel = ufe.GlobalSelection.get()
    for item in ufeSel:
        if item.runTimeId() != 1:
            ret.append(ufe.PathString.string(item.path()))
    return ret

def hasNonMayaSelectedItems():
    """Returns true of the UFE Global Selection list contains any non-Maya items."""
    ufeSel = ufe.GlobalSelection.get()
    for item in ufeSel:
        if item.runTimeId() != 1:
            return True
    return False

def listUFEUnselected():
    """Returns a list of UFE path strings for the items that are visible
    and not selected.
    See the MEL proc 'listUnselected()' which this python function emulates, but
    using the UFE global selection list.
    """

    def addItem(ufeSel, unsel, item):
        """Helper function to add a visible item that not selected."""
        if ufeSel.contains(item.path()) or ufeSel.containsDescendant(item.path()):
            return

        o3d = ufe.Object3d.object3d(item)
        if o3d and o3d.visibility():
            unsel.append(item)

    def addSiblingsOfParents(unsel, item):
        """Helper function to recursively add siblings of parents up the tree."""
        hier = ufe.Hierarchy.hierarchy(item)
        parentItem = hier.parent()
        if parentItem is not None:
            hier = ufe.Hierarchy.hierarchy(parentItem)
            for sibling in hier.children():
                if sibling != item:
                    addItem(ufeSel, unsel, sibling)
            addSiblingsOfParents(unsel, parentItem)

    unsel = ufe.Selection()
    try:
        ufeSel = ufe.GlobalSelection.get()
        for item in ufeSel:
            hier = ufe.Hierarchy.hierarchy(item)
            parentItem = hier.parent()
            hier = ufe.Hierarchy.hierarchy(parentItem)
            for sibling in hier.children():
                if sibling == item:
                    continue

                addItem(ufeSel, unsel, sibling)

            addSiblingsOfParents(unsel, parentItem)

    except:
        print('Unexpected error')
        unsel.clear()

    retList = []
    for item in unsel:
        retList.append(ufe.PathString.string(item.path()))
    return retList
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
