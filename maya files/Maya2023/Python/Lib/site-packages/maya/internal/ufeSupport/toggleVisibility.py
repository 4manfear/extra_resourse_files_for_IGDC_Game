import maya
maya.utils.loadStringResourcesForModule(__name__)

import ufe
import maya.cmds as cmds
import maya.mel as mel
import maya.internal.ufeSupport.ufeCmdWrapper as ufeCmd

def getNonMayaSelectedItems():
    '''Returns a list of all the non-Maya items on the UFE global selection list.'''
    nonMayaItems = []
    ufeSel = ufe.GlobalSelection.get()
    for item in ufeSel:
        if item.runTimeId() != 1:
            nonMayaItems.append(item)
    return nonMayaItems

def getVisibilityOfFirstItem():
    '''Returns the visibility of the first item (Maya or non-Maya) on the UFE global
    selection list.'''
    ufeSel = ufe.GlobalSelection.get()
    for item in ufeSel:
        # Handles both Maya and non-Maya items.
        o3d = ufe.Object3d.object3d(item)
        if o3d:
            return o3d.visibility()

class ToggleVisibilityUndoableCommand(ufe.UndoableCommand):
    '''Undoable command for toggle visibility.'''
    def __init__(self, item, vis=None):
        super(ToggleVisibilityUndoableCommand, self).__init__()
        self.path = item.path()
        self.vis = None
        if vis is not None:
            self.vis = vis
        else:
            o3d = ufe.Object3d.object3d(item)
            if o3d:
                self.vis = o3d.visibility()

    def getObject3d(self):
        item = ufe.Hierarchy.createItem(self.path)
        return ufe.Object3d.object3d(item) if item else None

    def redo(self):
        o3d = self.getObject3d()
        if o3d and self.vis is not None:
            o3d.setVisibility(not self.vis)

    def undo(self):
        o3d = self.getObject3d()
        if o3d and self.vis is not None:
            o3d.setVisibility(self.vis)

def getToggleVisibilityCmd(item, behaviour, firstVis=None):
    '''Create a ToggleVisibilityUndoableCommand for the input item.'''
    o3d = ufe.Object3d.object3d(item)
    if o3d:
        # Dependant behaviour (2) - all the selection items will be visible or
        # invisible after the operation.
        # Independent behaviour (1) - all the selection items will be toggled
        # independently from each other.
        return ToggleVisibilityUndoableCommand(item, firstVis if behaviour == 2 else None)

    return None

def toggleVisibilityAndKeepSelection(behaviour, firstVis=None):
    '''Toggle the visibility of the selected objects.
    firstVis is only used when (behavior==2)
    '''

    # Validate the input args.
    if behaviour == 2 and firstVis is None:
        cmds.error(maya.stringTable['y_maya_internal_ufeSupport_toggleVisibility.kInvalidArgs' ])
        return 0

    # We only operate on the non-Maya items. The Maya MEL proc we are executed
    # from is responsible for the Maya items.
    nonMayaItems = getNonMayaSelectedItems()
    if not nonMayaItems:
        return 0    # No non-Maya items to toggle

    for item in nonMayaItems:
        # Create a UFE undoable command to toggle the visibility and execute it.
        visCmd = getToggleVisibilityCmd(item, behaviour, firstVis)
        if visCmd is not None:
            ufeCmd.execute(visCmd)

            # Add the item we just toggled to the last non maya hidden list.
            mel.eval('global string $gLastNonMayaHiddenSelection[]; $gLastNonMayaHiddenSelection[`size($gLastNonMayaHiddenSelection)`] = \"%s\";' % ufe.PathString.string(item.path()))

    return 1 # We had non-Maya items to toggle

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
