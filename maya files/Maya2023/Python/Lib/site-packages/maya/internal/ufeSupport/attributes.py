import maya
maya.utils.loadStringResourcesForModule(__name__)

'''
Attributes updating and observation support.
'''

import ufe
import functools
import maya.internal.ufeSupport.ufeCmdWrapper as ufeCmd
import maya.cmds as cmds

from PySide2.QtWidgets import QApplication
from PySide2.QtGui import QColor, QPalette

# In C++ this is done in TanimUtil::getAttributeColorRGB().
# Copied the same values here.
LOCKED_BG_COLOR = [0.361, 0.408, 0.455]

class InAttrUpdateCtx(object):
    '''Context to flag an attribute change as coming from the UI control.

    Attribute changes can be triggered by the UI control itself, or external to
    the UI.  Both will trigger an attribute changed notification.
    - A change initiated from the UI should not cause the UI control to be set,
      but a command must be recorded.
    - A change initiated from outside the UI should cause the UI control to be
      set, but no command should be recorded.
    To distinguish between the two, we know that if we hit the UI callback
    before the notification, it's a UI-triggered change.  It will trigger a
    notification during the execution of the command.  If we hit the UI
    callback after the notification, it's a change coming from outside the UI.
    '''

    # Would have been cleaner to set a flag on the attribute being updated,
    # rather than the global flag in this class, but UFE attribute Python
    # objects can't be monkey-patched to add a flag, as they are read-only
    # wrappers to underlying C++ objects.
    inAttrUpdate = 0

    def __enter__(self):
        InAttrUpdateCtx.inAttrUpdate += 1

    def __exit__(self, type, value, traceback):
        InAttrUpdateCtx.inAttrUpdate -= 1
        assert InAttrUpdateCtx.inAttrUpdate >= 0, "Illegal attribute update guard."

def inUpdate():
    return InAttrUpdateCtx.inAttrUpdate > 0

class AttributeChangedObserver(ufe.Observer):
    '''Attribute changed observation support.'''
    
    def __init__(self, updateUi, attr, uiControl):
        super(AttributeChangedObserver, self).__init__()
        self._updateUi  = updateUi
        self._attr      = attr
        self._uiControl = uiControl

    def __call__(self, notification):
        if isinstance(notification, ufe.AttributeValueChanged) and \
           notification.name() == self._attr.name:
            # If we're being notified following a UI control changing the
            # attribute, the UI control is already set, nothing to do.
            if inUpdate():
                return

            with InAttrUpdateCtx():
                self._updateUi(self._attr, self._uiControl)

def updateData(value, updateUi, ufeAttr, uiControl):
    '''Callback function to update the data model when the UI changes.
    
    Args:
        value:   value from the UI control.
        ufeAttr: UFE attribute.
    '''
    if inUpdate():
        return

    try:
        with InAttrUpdateCtx():
            ufeCmd.execute(ufeAttr.setCmd(value))
    except:
        updateUi(ufeAttr, uiControl)
        raise

def updateDataWithReader(*values, **kwargs):
    '''Callback function to update the data model when the UI changes.

    This callback is the UI control change callback.  It calls the
    updateDataReader callable, provided by the UI control, to read data from
    the UI, then sets that value onto the UFE attribute through a command.

    If the updateDataReader returns None, no data is set onto the UFE
    attribute, and no command is executed or recorded.
    '''
    if inUpdate():
        return

    updateDataReader = kwargs['updateDataReader']
    attrValue = updateDataReader(*values, **kwargs)
    if attrValue is None:
        return
    ufeAttr = kwargs['ufeAttr']

    try:
        with InAttrUpdateCtx():
            ufeCmd.execute(ufeAttr.setCmd(attrValue))
    except:
        uiControl = kwargs['uiControl']
        updateUi = kwargs['updateUi']
        updateUi(ufeAttr, uiControl)
        raise

def createChangeCb(updateUi, ufeAttr, uiControl, updateDataReader=None):
    '''Create a callback to synchronize UI and data model attribute values.

    Create a callback object for two purposes:
    - UI changes: set the new value(s) in UFE.
    - UFE attribute changes: handle UFE attribute changed notification, to set
          the new value(s) in the UI control.

    The updateUi callable is invoked by the UFE attribute change notification.
    It is invoked with two arguments, the UFE attribute and the UI control name.

    If present, the updateDataReader callable is invoked by the UI control's
    change command callback to read data from the UI, and return it to be set
    onto the UFE attribute through a command.  Through its keyword arguments,
    it is provided with the UFE attribute ('ufeAttr') and the UI control
    ('uiControl').

    Args:
        updateUi:          callable to update the UI control.
        ufeAttr:           the UFE attribute.
        uiControl:         the name of the UI control.
        updateDataReader:  callable to read the data from the UI.

    '''
    cb = functools.partial(updateData, uiControl=uiControl, ufeAttr=ufeAttr, updateUi=updateUi) \
         if updateDataReader is None else \
         functools.partial(
             updateDataWithReader, uiControl=uiControl, ufeAttr=ufeAttr, updateUi=updateUi,
             updateDataReader=updateDataReader)
    attrChangedObs = AttributeChangedObserver(updateUi, ufeAttr, uiControl)
    ufe.Attributes.addObserver(ufeAttr.sceneItem(), attrChangedObs)
    # Monkey patch the observer into the change callback, for lifescope control.
    # This ensures the observer is destroyed along with the UI control.
    cb.attrChangedObs = attrChangedObs
    return cb

def isAttributeLocked(ufeAttr):
    if ufeAttr.hasMetadata(ufe.Attribute.kLocked):
        md = ufeAttr.getMetadata(ufe.Attribute.kLocked)
        return bool(md) if not md.empty() else False
    return False

def getAttributeColorRGB(ufeAttr):
    if isAttributeLocked(ufeAttr):
        return LOCKED_BG_COLOR
    else:
        clr = QApplication.instance().palette().color(QPalette.Active, QPalette.Base)
        return [clr.redF(), clr.greenF(), clr.blueF()]

class AEPopupMenu(object):
    '''Class that defines a dynamic popupMenu for the Attribute Editor when
    showing a non-Maya Ufe item.
    '''

    def __init__(self, uiControl, ufeAttr):
        self.ufeAttr = ufeAttr
        self.attrPathStr = '%s.%s' % (ufe.PathString.string(ufeAttr.sceneItem().path()), ufeAttr.name)
        self.popupMenu = cmds.popupMenu(parent=uiControl, postMenuCommand=self._makeMenuCB)

    def _setAttributeLocked(self, locked):
        cmds.setAttr(self.attrPathStr, lock=locked)

    # This section must come after any methods used in the actions.
    LOCK_ACTION    = (maya.stringTable['y_maya_internal_ufeSupport_attributes.kLockAttribute' ],             _setAttributeLocked, [True])
    UNLOCK_ACTION  = (maya.stringTable['y_maya_internal_ufeSupport_attributes.kUnlockAttribute' ],         _setAttributeLocked, [False])

    LOCKED_MENU   = [UNLOCK_ACTION]
    GENERAL_MENU  = [LOCK_ACTION]

    def _addMenuItem(self, label, command, args):
        if label is not None:
            cmds.menuItem(label=label, parent=self.popupMenu, c=lambda *_a: command(self, *args))

    def _buildFromActions(self, actions, addItemCmd):
        [addItemCmd(label, command, args) for label, command, args in actions]

    def _buildMenu(self, addItemCmd):
        if isAttributeLocked(self.ufeAttr):
            self._buildFromActions(self.LOCKED_MENU, addItemCmd)
        else:
            self._buildFromActions(self.GENERAL_MENU, addItemCmd)

    def _makeMenuCB(self, *args):
        cmds.popupMenu(self.popupMenu, edit=True, deleteAllItems=True)
        self._buildMenu(self._addMenuItem)
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
