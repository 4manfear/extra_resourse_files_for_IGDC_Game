import maya.cmds
import maya.internal.common.utils.connections as con_utils
import maya.mel as mel

globalAllFalloffTypes = None
outputAttrName = 'outputWeightFunction'

#-------------------------------------------------------------------------------
def getAllFalloffTypes(force=False):
    global globalAllFalloffTypes

    if globalAllFalloffTypes is not None and force == False:
        return globalAllFalloffTypes

    allTypes = maya.cmds.allNodeTypes()
    globalAllFalloffTypes = list()
    for nt in allTypes:
        if maya.cmds.attributeQuery(outputAttrName, type=nt, ex=True):
            globalAllFalloffTypes.append(nt)

    return globalAllFalloffTypes

#-------------------------------------------------------------------------------
def findAllFalloffs():
    allFalloffTypes = getAllFalloffTypes()

    falloffNodes = list()
    for nt in allFalloffTypes:
        nodes = maya.cmds.ls(type=nt)
        falloffNodes.extend(nodes)

    return falloffNodes

#-------------------------------------------------------------------------------
def isMultiOutput(falloffName):
    return maya.cmds.attributeQuery(outputAttrName, node=falloffName, multi=True )

#-------------------------------------------------------------------------------
def getLeafPlugIndex(plugName):
    if plugName:
        n = len(plugName)
        if n > 1 and plugName[n-1] == ']':
            return int(plugName[ plugName.rindex('[')+1:n-1] )
    return None

#-------------------------------------------------------------------------------
def getOutputPlugName(falloffName, index=0):
    if isMultiOutput(falloffName):
        return '{}.{}[{}]'.format(falloffName, outputAttrName, index)
    else:
        return '{}.{}'.format(falloffName, outputAttrName)

#-------------------------------------------------------------------------------
def getConnectionLabel(falloffSourcePlug):
    """Return the label for the connection from falloffSourcePlug"""
    if falloffSourcePlug is None:
        return ''

    falloffName = con_utils.plugNode(falloffSourcePlug)
    index = getLeafPlugIndex(falloffSourcePlug)
    extraLabel = getOutputLabel(falloffName, index)

    if extraLabel:
        return '{} : {} [{}]'.format(falloffName, extraLabel, index)
    else:
        return falloffName

#-------------------------------------------------------------------------------
def getOutputLabel(falloffName, index):

    if index is None:
        return None

    if maya.cmds.objectType(falloffName, isAType='componentFalloff'):
        from maya.internal.nodes.componentfalloff.node_interface import NodeInterface as ComponentFalloffNodeInterface
        return ComponentFalloffNodeInterface(falloffName).getLayerName(index)

    elif maya.cmds.objectType(falloffName, isAType='transferFalloff'):
        inputPlug = '{}.weightFunction[{}]'.format(falloffName, index)
        srcPlug = con_utils.getSourcePlug(inputPlug)
        if srcPlug:
            srcNode = con_utils.plugNode(srcPlug)
            upLabel = getOutputLabel(srcNode, getLeafPlugIndex(srcPlug))
            if upLabel:
                return '{}|{}'.format(srcNode, upLabel)
            else:
                return srcNode

    return None

#-------------------------------------------------------------------------------
def getOutputs(falloffName):
    """Return all the possible weight outputs from the falloff node"""
    result = list()
    if isMultiOutput(falloffName):
        indices = maya.cmds.getAttr('{}.{}'.format(falloffName, outputAttrName), multiIndices=True) or []
        for i in indices:
            label = getOutputLabel(falloffName, i)
            item = (falloffName, i, label)
            result.append( item )
    else:
        item = (falloffName, None, None)
        result.append(item)

    return result

#-------------------------------------------------------------------------------
def paintablePlugs(weightFunctionPlug):
    """
        returns all paintable plugs that influences this specific weightFunction plug
    """
    src = con_utils.getSourcePlug(weightFunctionPlug)
    if src is None:
        return []

    plugs = list()
    node = con_utils.plugNode(src)
    t = maya.cmds.nodeType(node)

    if t == 'componentFalloff':
        from maya.internal.nodes.componentfalloff.node_interface import NodeInterface as ComponentFalloffNodeInterface
        index = con_utils.plugMultiIndex(src, 'outputWeightFunction')
        plugs += ComponentFalloffNodeInterface(node).paintablePlugs(index)

    elif t == 'blendFalloff':
        from maya.internal.nodes.blendfalloff.node_interface import NodeInterface as BlendFalloffNodeInterface
        plugs += BlendFalloffNodeInterface(node).paintablePlugs()

    return plugs

#-------------------------------------------------------------------------------
def paintComponentFalloff(geo, plug):
    """
        start painting the plug for the specified geometry
    """
    if geo:
        import maya.mel as mel
        mel.eval('$gArtSelectObject = "";')
        maya.cmds.select(geo, add=True)

    mel.eval("""source artAttrCreateMenuItems.mel; artSetToolAndSelectAttr ( "artAttrCtx", "componentFalloff.{}");""".format(plug))

# ------------------------------------------------------------------------------
#
# The FalloffAssignMixinInterface is a mixin that can be used to enhance the
# functionality of a NodeInterface with methods assign and remove falloffs
#
# ------------------------------------------------------------------------------
class FalloffAssignMixinInterface(object):

    # --------------------------------------------------------------------------
    # Falloff connection
    # --------------------------------------------------------------------------
    def getFalloffSourcePlug(self, index):
        #check if connected to the multi element
        source = con_utils.getSourcePlug(self.weightFunctionPlugName(index))
        if source != None: #otherwise check the parent
            return source
        return con_utils.getSourcePlug(self.weightFunctionPlugName())

    def setFalloffSourcePlug(self, index, sourcePlug):
        falloffInputPlug = self.weightFunctionPlugName(index)
        oldSourcePlug = con_utils.getSourcePlug(falloffInputPlug)
        if oldSourcePlug == sourcePlug:
            return False
        if sourcePlug:
            maya.cmds.connectAttr(sourcePlug, falloffInputPlug, f=True)
        else:
            maya.cmds.disconnectAttr(oldSourcePlug, falloffInputPlug)
        return True

    def getFalloff(self, index):
        return con_utils.getSourceNode(self.weightFunctionPlugName(index))

    def createAndAssignFalloff(self, index, falloffType, labelHint=None):
        falloffName = maya.cmds.createNode(falloffType)
        if isMultiOutput(falloffName):
            sourcePlug = '{}.outputWeightFunction[0]'.format(falloffName)
            if maya.cmds.objectType(falloffName, isAType='componentFalloff'):
                from maya.internal.nodes.componentfalloff.node_interface import NodeInterface as ComponentFalloffNodeInterface
                ComponentFalloffNodeInterface(falloffName).setUniqueLayerName(0, labelHint)
        else:
            sourcePlug = '{}.outputWeightFunction'.format(falloffName)

        if falloffType == 'blendFalloff':
            # When a new blendFalloff is created and we already had a falloff
            # assigned then move that old falloff as the first input to the
            # new blendFalloff
            curSrc = self.getFalloffSourcePlug(index)
            if curSrc is not None:
                from maya.internal.nodes.blendfalloff.node_interface import NodeInterface as BlendFalloffNodeInterface
                BlendFalloffNodeInterface(falloffName).setFalloffSourcePlug(0, curSrc)

        return self.setFalloffSourcePlug(index, sourcePlug)

    def assignFalloff(self, index, falloffName, falloffOutputIndex, labelHint=None):
        sourcePlug = '{}.outputWeightFunction'.format(falloffName)

        if falloffOutputIndex is not None:
            newIndex = falloffOutputIndex
            if newIndex < 0:
                if maya.cmds.objectType(falloffName, isAType='componentFalloff'):
                    from maya.internal.nodes.componentfalloff.node_interface import NodeInterface as ComponentFalloffNodeInterface
                    newIndex = ComponentFalloffNodeInterface(falloffName).createNewLayer(labelHint)
                else:
                     # Need to find the next new index
                    indices = sorted(maya.cmds.getAttr(sourcePlug, multiIndices=True) or [])
                    newIndex = 0 if len(indices) == 0 else (indices[-1] + 1)

            sourcePlug = '{}[{}]'.format(sourcePlug, newIndex)

        return self.setFalloffSourcePlug(index, sourcePlug)

    def deleteFalloff(self, index):
        falloffNode = self.getFalloff(index)
        if falloffNode:
            maya.cmds.delete(falloffNode)
            return True

        return False

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
