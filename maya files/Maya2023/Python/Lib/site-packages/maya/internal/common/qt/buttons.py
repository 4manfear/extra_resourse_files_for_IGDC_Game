from PySide2.QtWidgets import QPushButton
from maya.internal.common.utils.ui import createIcon

from PySide2 import QtWidgets, QtCore

def makeIconButton(iconName, annotation=None):
    button = QPushButton()
    button.setFlat(True)
    icon = createIcon(iconName)
    button.setIcon(icon)
    button.setToolTip(annotation)
    button.setStatusTip(annotation)

    return button

def makeItemAddDelIconButtons(addAnnot, delAnnot):
    addButton = makeIconButton(':/item_add.png',annotation=addAnnot)
    delButton = makeIconButton(':/item_delete.png', annotation=delAnnot)
    return addButton, delButton

def makeItemUpDownIconButtons(upAnnot, downAnnot):
    upButton = makeIconButton(':/item_up.png',annotation=upAnnot)
    downButton = makeIconButton(':/item_down.png', annotation=downAnnot)
    return upButton, downButton

#-------------------------------------------------------------------------------
class ManageMenuButtonWidget(QtWidgets.QWidget):

    def __init__(self, iconName=None, label='', annotation='', uiParent=None):
        super(ManageMenuButtonWidget, self).__init__()
        self.topLayout = QtWidgets.QHBoxLayout(self)
        cm = self.topLayout.contentsMargins()
        cm.setTop(0)
        cm.setBottom(0)
        self.topLayout.setContentsMargins(cm)
        self.button = makeIconButton(iconName if iconName else ':/hotkeySetSettings.png', annotation=annotation)
        self.button.setText(label)
        # Make button menu
        self.buttonMenu = QtWidgets.QMenu(self)
        self.buttonMenu.aboutToShow.connect(self._adjustMenuEnable)

        # Finish up
        self.buttonMenu.triggered.connect(self._actionTriggered)
        self.button.setMenu(self.buttonMenu)

        spacerItem = QtWidgets.QSpacerItem(5, 5, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.topLayout.addItem(spacerItem)
        self.topLayout.addWidget(self.button)

    def changeNode(self, nodeName, plugName):
        self.nodeName = nodeName

    def addMenuAction(self, label, iconName=None, annotation=None):
        act = QtWidgets.QAction(label, self.buttonMenu)
        if iconName:
            act.setIcon(createIcon(iconName))
        if annotation:
            act.setToolTip(annotation)
        self.buttonMenu.addAction(act)
        return act

    def addMenuSeparator(self):
        self.buttonMenu.addSeparator()

    @QtCore.Slot()
    def _adjustMenuEnable(self):
        self.enableMenuItems()

    @QtCore.Slot()
    def _actionTriggered(self, action):
        self.actionTriggered(action)

    def enableMenuItems(self):
        '''OVERRIDE
        Override this function to custom enable and disable the items in the menu
        '''
        pass

    def actionTriggered(self, action):
        '''OVERRIDE
        Override this function to peform the appropriate actions after a menu item has been clicked
        '''
        pass
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
