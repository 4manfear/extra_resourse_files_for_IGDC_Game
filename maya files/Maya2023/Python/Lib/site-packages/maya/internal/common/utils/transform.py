"""
General node utilities.
Contains methods to get transforms, parents, matrices, etc...
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


import maya.cmds
import maya.api.OpenMaya as oma
import maya.internal.common.utils.message as msg_utils
import maya.internal.common.utils.connections as con_utils

# ------------------------------------------------------------------------------
def getTransformNode(depNodeName, displayWarning=True):
    '''Check if depNode is a transform node
       Return the node if it is
       Return None and (optionally) show a warning if it is not
    '''
    if maya.cmds.objectType(depNodeName, isAType='transform'):
        return depNodeName

    if displayWarning:
        msg_utils.showWarning(maya.stringTable['y_maya_internal_common_utils_transform.kWrnMsgNoTransform' ].format(depNodeName))

    return None

# ------------------------------------------------------------------------------
def getParent(nodeName):
    '''Get the first parent of the node'''
    try:
        parents = maya.cmds.listRelatives(nodeName, parent=True, path=True )
        if parents is not None:
            return parents[0]
    except Exception:
        return None

# ------------------------------------------------------------------------------
def isChild(parentName, childName):
    p = getParent(childName)
    while p is not None:
        if p == parentName:
            return True
        p = getParent(p)

    return False

# ------------------------------------------------------------------------------
def getMatrixFromAttribute(attrName):
    '''Return the matrix in the attribute as a MMatrixnode'''
    try:
        return oma.MMatrix(maya.cmds.getAttr(attrName))
    except Exception:
        return oma.MMatrix()

# ------------------------------------------------------------------------------
def getPositionFromMatrixAttribute(attrName):
    '''Return the translation part of the matrix in the attribute'''
    try:
        mtx = maya.cmds.getAttr(attrName)
        if len(mtx) == 16:
            return [mtx[12], mtx[13], mtx[14]]
    except Exception:
        return [0, 0, 0]

    return [0, 0, 0]

# ------------------------------------------------------------------------------
def matrixToList(matrix):
    '''Turn MMatrix to a list of 16 values'''
    try:
        return [matrix.getElement(0,0), matrix.getElement(0,1), matrix.getElement(0,2), matrix.getElement(0,3),
                matrix.getElement(1,0), matrix.getElement(1,1), matrix.getElement(1,2), matrix.getElement(1,3),
                matrix.getElement(2,0), matrix.getElement(2,1), matrix.getElement(2,2), matrix.getElement(2,3),
                matrix.getElement(3,0), matrix.getElement(3,1), matrix.getElement(3,2), matrix.getElement(3,3)]
    except Exception:
        return [1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0]

#-------------------------------------------------------------------------------
def getScaleAttributes():
    return ['scaleX', 'scaleY', 'scaleZ']

#-------------------------------------------------------------------------------
def getShearAttributes():
    return ['shearXY', 'shearXZ', 'shearYZ']

#-------------------------------------------------------------------------------
def getRotateAttributes():
    return ['rotateX', 'rotateY', 'rotateZ']

#-------------------------------------------------------------------------------
def getTranslateAttributes():
    return ['translateX', 'translateY', 'translateZ']

#-------------------------------------------------------------------------------
def getTransformAttributes(useScale=True, useShear=True, useRotate=True, useTranslate=True):
    attrs = list()
    if useScale:
        attrs.extend(getScaleAttributes())
    if useShear:
        attrs.extend(getShearAttributes())
    if useRotate:
        attrs.extend(getRotateAttributes())
    if useTranslate:
        attrs.extend(getTranslateAttributes())
    return attrs

#-------------------------------------------------------------------------------
def clearTransformAttributes(nodeName):
    '''
    Disconnects all the inputs to the scale, rotate, translate, shear and
    offsetParent attributes and sets them to their default values
    '''
    con_utils.disconnectAttributes(nodeName,
                    ['t', 'tx', 'ty', 'tz', \
                     'r', 'rx', 'ry', 'rz', \
                     's', 'sx', 'sy', 'sz', \
                     'sh', 'shxy', 'shxz', 'shyz', \
                     'opm'])

    maya.cmds.setAttr(u'{}.t'.format(nodeName), 0.0, 0.0, 0.0)
    maya.cmds.setAttr(u'{}.r'.format(nodeName), 0.0, 0.0, 0.0)
    maya.cmds.setAttr(u'{}.sh'.format(nodeName), 0.0, 0.0, 0.0)
    maya.cmds.setAttr(u'{}.s'.format(nodeName), 1.0, 1.0, 1.0)
    maya.cmds.setAttr(u'{}.opm'.format(nodeName), (1,0,0,0, 0,1,0,0, 0,0,1,0, 0,0,0,1), type='matrix')

#-------------------------------------------------------------------------------
def setTransformPivot(nodeName, xform):
    """
    Set the pivot values on the transform attributes from the provided xform.
    """
    con_utils.disconnectAttributes(nodeName, ['sp', 'spx', 'spy', 'spz',
                                            'rp', 'rpx', 'rpy', 'rpz'])
    sp = xform.scalePivot(oma.MSpace.kTransform)
    rp = xform.rotatePivot(oma.MSpace.kTransform)
    maya.cmds.setAttr(u'{}.sp'.format(nodeName), sp[0], sp[1], sp[2])
    maya.cmds.setAttr(u'{}.rp'.format(nodeName), rp[0], rp[1], rp[2])

    #spt = xform.scalePivotTranslation (oma.MSpace.kTransform)
    #rpt = xform.rotatePivotTranslation(oma.MSpace.kTransform)

#-------------------------------------------------------------------------------
def setTransformAttributes(nodeName, xform, setScale=True, setShear=True, setRotate=True, setTranslate=True, setPivot=False):
    """
    Set the values on the transform attributes from the provided xform.
    This removes any curves or other connections to the attributes beforehand.
    """
    if setScale:
        con_utils.disconnectAttributes(nodeName, ['s', 'sx', 'sy', 'sz'])
        s = xform.scale(oma.MSpace.kTransform)
        maya.cmds.setAttr(u'{}.s'.format(nodeName), s[0], s[1], s[2])

    if setShear:
        con_utils.disconnectAttributes(nodeName, ['sh', 'shxy', 'shxz', 'shyz'])
        s = xform.shear(oma.MSpace.kTransform)
        maya.cmds.setAttr(u'{}.sh'.format(nodeName), s[0], s[1], s[2])

    if setRotate:
        con_utils.disconnectAttributes(nodeName, ['r', 'rx', 'ry', 'rz'])
        r = xform.rotation()
        rx = oma.MAngle(r[0], oma.MAngle.kRadians)
        ry = oma.MAngle(r[1], oma.MAngle.kRadians)
        rz = oma.MAngle(r[2], oma.MAngle.kRadians)
        maya.cmds.setAttr(u'{}.r'.format(nodeName), rx.asDegrees(), ry.asDegrees(), rz.asDegrees())

    if setTranslate:
        con_utils.disconnectAttributes(nodeName, ['t', 'tx', 'ty', 'tz'])
        t = xform.translation(oma.MSpace.kTransform)
        maya.cmds.setAttr(u'{}.t'.format(nodeName), t[0], t[1], t[2])

    if setPivot:
        setTransformPivot(nodeName, xform)

#-------------------------------------------------------------------------------
def _setValuesOrKeys(nodeName, attrs, values, frame):
    """
    Set the value on the attribute. If it already has a curve associated with it
    then add a new keyframe, otherwise set the value directly
    """
    n = len(attrs)
    for i in range(n):
        attr = attrs[i]
        if con_utils.hasAnimCurve('{}.{}'.format(nodeName, attr)):
            maya.cmds.setKeyframe(nodeName, attribute=attr, t=frame, v=values[i])
        else:
            con_utils.disconnectAttributes(nodeName, [attr])
            maya.cmds.setAttr(u'{}.{}'.format(nodeName, attr), values[i])

#-------------------------------------------------------------------------------
def _setKeyframes(nodeName, attrs, values, frame):
    """
    Set the keys on the attributes.
    """
    n = len(attrs)
    for i in range(n):
        maya.cmds.setKeyframe(nodeName, attribute=attrs[i], t=frame, v=values[i])

#-------------------------------------------------------------------------------
def setTransformAttributesOrKeyframes(nodeName, xform, frame=None, setScale=True, setShear=True, setRotate=True, setTranslate=True, setPivot=False):
    """
    Set the values on the transform attributes from the provided xform.
    If an attribute we are setting has a curve associated with it then this will
    add a new keyframe, otherwise it will set the value directly
    """
    f = frame if frame is not None else maya.cmds.currentTime(q=True)

    if setScale:
        con_utils.disconnectAttributes(nodeName, ['s'])
        _setValuesOrKeys(nodeName, getScaleAttributes(), xform.scale(oma.MSpace.kTransform), f)

    if setShear:
        con_utils.disconnectAttributes(nodeName, ['sh'])
        _setValuesOrKeys(nodeName, getShearAttributes(), xform.shear(oma.MSpace.kTransform), f)

    if setRotate:
        con_utils.disconnectAttributes(nodeName, ['r'])

        r = xform.rotation()
        rx = oma.MAngle(r[0], oma.MAngle.kRadians)
        ry = oma.MAngle(r[1], oma.MAngle.kRadians)
        rz = oma.MAngle(r[2], oma.MAngle.kRadians)

        _setValuesOrKeys(nodeName, getRotateAttributes(), [rx.asDegrees(), ry.asDegrees(), rz.asDegrees()], f)

    if setTranslate:
        con_utils.disconnectAttributes(nodeName, ['t'])
        _setValuesOrKeys(nodeName, getTranslateAttributes(), xform.translation(oma.MSpace.kTransform), f)

    if setPivot:
        setTransformPivot(nodeName, xform)

#-------------------------------------------------------------------------------
def setTransformKeyframes(nodeName, xform, frame=None, setScale=True, setShear=True, setRotate=True, setTranslate=True, setPivot=False):
    """
    Set the keyframes on the transform attributes from the provided xform.
    """
    f = frame if frame is not None else maya.cmds.currentTime(q=True)

    if setScale:
        con_utils.disconnectAttributes(nodeName, ['s'])
        _setKeyframes(nodeName, getScaleAttributes(), xform.scale(oma.MSpace.kTransform), f)

    if setShear:
        con_utils.disconnectAttributes(nodeName, ['sh'])
        _setKeyframes(nodeName, getShearAttributes(), xform.shear(oma.MSpace.kTransform), f)

    if setRotate:
        con_utils.disconnectAttributes(nodeName, ['r'])

        r = xform.rotation()
        rx = oma.MAngle(r[0], oma.MAngle.kRadians)
        ry = oma.MAngle(r[1], oma.MAngle.kRadians)
        rz = oma.MAngle(r[2], oma.MAngle.kRadians)

        _setKeyframes(nodeName, getRotateAttributes(), [rx.asDegrees(), ry.asDegrees(), rz.asDegrees()], f)

    if setTranslate:
        con_utils.disconnectAttributes(nodeName, ['t'])
        _setKeyframes(nodeName, getTranslateAttributes(), xform.translation(oma.MSpace.kTransform), f)

    if setPivot:
        setTransformPivot(nodeName, xform)

#-------------------------------------------------------------------------------
def cutTransformKeyframes(nodeName, startFrame, endFrame, useScale=True, useShear=True, useRotate=True, useTranslate=True):
    attrs = getTransformAttributes(useScale, useShear, useRotate, useTranslate)
    for a in attrs:
        maya.cmds.cutKey(nodeName, attribute=a, time=(startFrame, endFrame), clear=True, option='keys')

# ------------------------------------------------------------------------------
def initializeOffsetParentMatrix(nodeName):
    opm = u'{}.offsetParentMatrix'.format(nodeName)

    # Check if we have to disconnect offsetParentMatrix
    opmSrc = con_utils.getSourcePlug(opm)
    if opmSrc:
        maya.cmds.disconnectAttr(opmSrc, opm)

    # Initialize to identity
    maya.cmds.setAttr(opm, 1, 0, 0, 0,  0, 1, 0, 0,  0, 0, 1, 0,  0, 0, 0, 1, type='matrix')

# ------------------------------------------------------------------------------
def getDagPathFromNodeName(nodeName):
    selection = oma.MSelectionList()
    try:
        selection.add(nodeName)
        return selection.getDagPath(0)
    except:
        return None
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
