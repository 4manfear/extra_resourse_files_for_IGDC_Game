'''
UFE instruction on how to create a control for a boolean attribute.

Booleans are special since they can be grouped together,
that is why the replace function take an extra index parameter.
Read the Readme.md for further information
'''

import maya.cmds as cmds
import maya.internal.common.utils.ui as ui
from maya.common.ui import LayoutManager
import maya.internal.ufeSupport.attributes as attributes
import functools

def replace(controlName, ufeAttr, attrUIName, changedCommand, index):
    cmds.checkBoxGrp(controlName, edit=True, **{"label" + str(index) : attrUIName})
    cmds.checkBoxGrp(controlName, edit=True, **{"value" + str(index) : ufeAttr.get()})
    attachCallbacks(ufeAttr, controlName, index, changedCommand)

def updateUi(attr, uiControlName, ndx):
    '''Callback function to update the UI when the data model changes.'''
    cmds.checkBoxGrp(uiControlName, e=True, **{"v" + str(ndx) : attr.get()})

    # Update the appearance and read-only status of control.
    isLocked = attributes.isAttributeLocked(attr)
    cmds.checkBoxGrp(uiControlName, e=True, **{"enable" + str(ndx) : not isLocked})

def create(ufeAttrs, attrUINames, changedCommand):
    cmds.setUITemplate("attributeEditorTemplate", pushTemplate=True)
    createdControl = cmds.formLayout()
    with LayoutManager(createdControl):
        if type(ufeAttrs) is not list:
            ufeAttrs = [ufeAttrs]
            attrUINames = [attrUINames]
            changedCommand = [changedCommand]

        attrCount = len(attrUINames)
        uiControl = cmds.checkBoxGrp(ncb=attrCount)

        # There is a limitiation with the popupMenu postMenuCommand callback not
        # knowing which checkbox (in the group) it was created from. So because of
        # that we only attach the menu if there is a single checkbox in our group.
        if attrCount == 1:
            pMenu = attributes.AEPopupMenu(uiControl, ufeAttrs[0])

        # Set label (of each checkbox)
        cmds.checkBoxGrp(uiControl, e=True, **{"label" + str(i) : a for i, a in enumerate(attrUINames, 1)})

        for i, a in enumerate(ufeAttrs, 1):
            # Set value (of each checkbox)
            updateUi(a, uiControl, i)
            # Create change callback for UFE and UI value synchronization.
            attachCallbacks(a, uiControl, i, changedCommand)

        cmds.formLayout(createdControl,
            e=True,
            af=[(uiControl, ui.TOP, 0),
                (uiControl, ui.LEFT, 0),
                (uiControl, ui.RIGHT, 0),
                (uiControl, ui.BOTTOM, 0)
            ])

    cmds.setUITemplate(popTemplate=True)
    return createdControl

def attachCallbacks(ufeAttr, uiControl, index, changedCommand):
    # Create change callback for UFE and UI value synchronization.
    cb = attributes.createChangeCb(
        functools.partial(updateUi, ndx=index), ufeAttr, uiControl)
    cmds.checkBoxGrp(uiControl, e=True, **{"cc" + str(index) : cb})

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
