"""
General connection utilities.
"""
import maya.cmds
import re

# ------------------------------------------------------------------------------
def getNextFreeMultiIndex(plugName, startIndex):
    '''Find the next unconnected multi index starting at the passed in index.'''
    # assume a max of 10 million connections
    while startIndex < 10000000:
        if len( maya.cmds.connectionInfo(u'{0}[{1}]'.format(plugName, startIndex), sfd=True ) or [] ) == 0:
            return startIndex
        startIndex += 1

    # No connections means the first index is available
    return 0

# ------------------------------------------------------------------------------
def getValidMultiIndices(plugName):
    '''Get all the valid multi indices of the multi attribute.'''
    return maya.cmds.getAttr(plugName, multiIndices=True)

# ------------------------------------------------------------------------------
def setAttributes(plugBase, argDict, settableAttrs):
    ''' Set attributes using the settableAttrs as a qualifying list.
        Only set if value != None.
    '''
    from sys import version_info as sys_version_info
    text_type = str if sys_version_info[0] >= 3 else unicode
    for k, v in list(argDict.items()):
        if k in settableAttrs and v != None:
            if isinstance(v, list):
                maya.cmds.setAttr(u'{0}.{1}'.format(plugBase, k), *v) # covers float3 cases
            elif isinstance(v, (str, text_type)):
                maya.cmds.setAttr(u'{0}.{1}'.format(plugBase, k), v, type='string') # covers string cases
            else:
                maya.cmds.setAttr(u'{0}.{1}'.format(plugBase,k), v)

#-------------------------------------------------------------------------------
def disconnectAttributes(name, attrs):

    if attrs is None or len(attrs) == 0:
        return

    for a in attrs:
        cons = maya.cmds.listConnections(u'{0}.{1}'.format(name,a), c=True, p=True, s=True, d=False)
        if cons and len(cons) > 0:
            maya.cmds.disconnectAttr(cons[1], cons[0])

# ------------------------------------------------------------------------------
def getSourcePlug(plug):
    """
    returns the directly connected source plug for the given plug
    """
    try:
        if plug is not None and maya.cmds.connectionInfo(plug, ied=True):
            src = maya.cmds.listConnections(plug, plugs=True, destination=False)
            if src and len(src) > 0:
                return src[0]
    except:
        pass
    return None

# ------------------------------------------------------------------------------
def getSourceNode(plug):
    """
    returns the directly connected source node for the given plug
    """
    try:
        if plug is not None and maya.cmds.connectionInfo(plug, ied=True):
            src = maya.cmds.listConnections(plug, plugs=False, destination=False)
            if src and len(src) > 0:
                return src[0]
    except:
        pass
    return None

# ------------------------------------------------------------------------------
def getDestinationPlugs(plug):
    """
    returns all destinations for the given plug
    """
    try:
        if plug is not None and maya.cmds.connectionInfo(plug, ies=True):
            cons = maya.cmds.listConnections(plug, c=False, p=True, s=False, d=True) or []
            return cons
    except:
        pass
    return []

 # ------------------------------------------------------------------------------
def disconnectPlugFromSource(plug):
    """
    if the plug has an incoming connection then disconnect it
    """
    src = getSourcePlug(plug)
    if src:
        maya.cmds.disconnectAttr(src, plug)

#-------------------------------------------------------------------------------
def hasAnimCurve(plug):
    src = getSourceNode(plug)
    return maya.cmds.objectType(src, isAType='animCurve') if src is not None else False

# ------------------------------------------------------------------------------
def plugNode(plugName):
    """
    returns the node name part of plugName
    """
    return plugName.split('.')[0] if plugName else None

# ------------------------------------------------------------------------------
def plugAttr(plugName):
    """
    return the full attribute name node.attr.foo[4] => attr.foo[4]
    """
    return ".".join(plugName.split(".")[1:])

# ------------------------------------------------------------------------------
def plugMultiIndex(plugName, attr):
    """ returns the indices between [] for the given attr
        ex: a[3] => returns 3 if attr = a
            a.b[3].c[2].d => returns 2 if attr = c
    """
    r = re.search(attr + """\\[([0-9]+)\\]""", plugName)
    return int(r.group(1)) if r else None

# ------------------------------------------------------------------------------
def plugSplitMultiIndex(plug):
    """ splits the name and last index between [] for the given plug
        ex: a.b[3] => returns a.b, 3
            a[2].b => returns a[2].b, None
    """
    r = re.search("""\\[([0-9]+)\\]""", plug)
    if r:
        return plug[:r.span()[0]], int(r.group(1))
    else:
        return plug, None

# ------------------------------------------------------------------------------
def moveItemInList(oldList, index, delta):
    """
    This function takes a list and returns a copy where the item
    at position index has been moved delta positions
    """
    newList = oldList[:]

    newIndex = max(0, min(index+delta, len(oldList)-1))
    if newIndex == index:
        return newList

    newList.pop(index)
    newList.insert(newIndex, oldList[index])
    return newList# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
