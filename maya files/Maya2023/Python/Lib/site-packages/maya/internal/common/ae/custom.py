
from builtins import object

import maya.cmds
from maya.internal.common.utils.connections import plugNode
from maya.internal.common.utils.ui import makeUndoable

class CustomControl(object):
    def __init__(self, *args, **kwargs):

        self.nodeName = None
        self.plugName = None
        self.build_args = args
        self.build_kwargs = kwargs

    # args will collect all attributes that connected to this custom control
    def onCreate(self, *args):
        controlArgs = args[0]
        self.plugName = controlArgs[0] if controlArgs else ""
        self.nodeName = plugNode(self.plugName )
        pname = maya.cmds.setParent(q=True)
        maya.cmds.scriptJob(uiDeleted=[pname, self.onClose], runOnce=True)
        self.buildControlUI()

    def onReplace(self, *args):
        controlArgs = args[0]
        self.plugName = controlArgs[0] if controlArgs else ""
        self.nodeName = plugNode(self.plugName)
        self.replaceControlUI()

    def onClose(self):
        pass

    def buildControlUI(self):
        pass

    def replaceControlUI(self):
        pass

    def setEnable(self,enable):
        pass

#-------------------------------------------------------------------------------
# The QtCustomControl allows the placement of a QtWidget into the
# Atrribute Editor. The class of the widget is defined by widgetClassFn.
#
# The widget class needs to have the following methods on it:
#       __init__(self, uiParent)
#       changeNode(self, nodeName, plugName)
#
# The following are optional:
#       refresh(self)
#       tearDown(self)

class QtCustomControl(CustomControl):
    def __init__(self, widgetClassFn):
        super(QtCustomControl, self).__init__()
        self.parent = None
        self.widgetClassFn = widgetClassFn
        self.myWidget = None

    def _connectScriptJob(self):
        refresh = getattr(self.myWidget, 'refresh', None)
        if callable(refresh):
            if self.plugName and self.myWidget and self.parent:
                #maya.cmds.scriptJob(p=self.parent, ac=[self.plugName, lambda *_: self.myWidget.refresh()], rp=True)
                maya.cmds.scriptJob(p=self.parent, ac=[self.plugName, lambda *_: self.myWidget.refresh()], rp=True, alc=True, disregardIndex=True)

    def buildControlUI(self):
        from shiboken2 import wrapInstance
        from maya.OpenMayaUI import MQtUtil
        from PySide2.QtWidgets import QWidget

        self.parent = maya.cmds.setParent(q=True)
        ptr = MQtUtil.findControl(self.parent)
        parentWidget = wrapInstance(int(ptr), QWidget)

        self.myWidget = self.widgetClassFn(self.parent)

        parentWidget.layout().addWidget(self.myWidget)

        tearDown = getattr(self.myWidget, 'tearDown', None)
        if callable(tearDown):
            self.myWidget.destroyed.connect(makeUndoable(self.myWidget.tearDown))

        self._connectScriptJob()
        self.myWidget.changeNode(self.nodeName, self.plugName)


    def replaceControlUI(self):
        if self.myWidget:
            self._connectScriptJob()
            self.myWidget.changeNode(self.nodeName, self.plugName)

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
