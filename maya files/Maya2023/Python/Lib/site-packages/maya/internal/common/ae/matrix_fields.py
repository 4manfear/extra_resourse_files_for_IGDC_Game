import maya
maya.utils.loadStringResourcesForModule(__name__)

from builtins import range
from builtins import zip

import maya.cmds as cmds
import maya.internal.common.utils.ui as ui
import maya.internal.common.ae.template as aetemplate

from maya.common.ui import ParentManager, LayoutManager

MatrixRowNames = ["MatrixRow%d"%i for i in range(1,5)]
TranslateStr = "Translate"
RotateStr =  "Rotate"
ScaleStr =  "Scale"
ShearStr = "Shear"
MatrixType = "matrix"
CompositionFieldsNames = [TranslateStr, RotateStr, ScaleStr, ShearStr]

CompositionFieldsLabels = [
        maya.stringTable[ 'y_maya_internal_common_ae_matrix_fields.kDecompositionTranslate' ],
        maya.stringTable[ 'y_maya_internal_common_ae_matrix_fields.kDecompositionRotate' ],
        maya.stringTable[ 'y_maya_internal_common_ae_matrix_fields.kDecompositionScale' ],
        maya.stringTable[ 'y_maya_internal_common_ae_matrix_fields.kDecompositionShear' ]
]

RAD_UNIT = "rad"
CM_UNIT = "cm"

IDENTITY = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]

def rotationToUI(value):
    UiUnit = cmds.currentUnit(q=True, angle=True)
    return float(cmds.convertUnit(value, fromUnit=RAD_UNIT, toUnit=UiUnit))

def rotationFromUI(value):
    UiUnit = cmds.currentUnit(q=True, angle=True)
    return float(cmds.convertUnit(value, toUnit=RAD_UNIT, fromUnit=UiUnit).replace(RAD_UNIT, ""))

def linearToUI(value):
    UiUnit = cmds.currentUnit(q=True, linear=True)
    res = cmds.convertUnit(value, fromUnit=CM_UNIT, toUnit=UiUnit)
    return float(res)

def linearFromUI(value):
    UiUnit = cmds.currentUnit(q=True, linear=True)
    res = cmds.convertUnit(value, toUnit=CM_UNIT, fromUnit=UiUnit)
    return float(res.replace(CM_UNIT, ""))

def createMatrixControl(parentName, plugName):
    with ParentManager(parentName):
        controlName = cmds.columnLayout(adj=True).split("|")[-1]
        with LayoutManager(controlName):
            #Is this attr multi?
            isMulti = aetemplate.plugIsMulti(plugName)
            uiname = "attributeEditorMatrixMultiTemplate" if isMulti else "attributeEditorMatrixTemplate"
            cmds.setUITemplate(uiname, pst= True)

            with LayoutManager(cmds.formLayout()) as form:
                with LayoutManager(cmds.tabLayout(innerMarginWidth=5, innerMarginHeight=5)) as tabs:
                    cmds.formLayout(
                        form,
                        edit=True,
                        attachForm=[
                            (tabs, ui.TOP,  0),
                            (tabs, ui.LEFT, 0),
                            (tabs, ui.BOTTOM, 0),
                            (tabs, ui.RIGHT, 0),
                        ])

                    child1 = cmds.rowColumnLayout(numberOfColumns=1)
                    with LayoutManager(child1):
                        [cmds.floatFieldGrp(controlName + name, label=label, nf=3) for name,label in zip(CompositionFieldsNames, CompositionFieldsLabels)]

                    child2 = cmds.rowColumnLayout(numberOfColumns=1)
                    with LayoutManager(child2):
                        [cmds.floatFieldGrp(controlName + mr, nf=4) for mr in MatrixRowNames]

                    cmds.tabLayout(tabs,
                        edit=True,
                        tabLabel=[
                            (child1, maya.stringTable[ 'y_maya_internal_common_ae_matrix_fields.kCompositionMatrix' ]),
                            (child2, maya.stringTable[ 'y_maya_internal_common_ae_matrix_fields.kMatrixView' ]),
                        ])
        
        cmds.setUITemplate(popTemplate=True)
    return controlName

def setAllFields(controlName, val):
    #set all fields values
    [cmds.floatFieldGrp(controlName + mr, edit=True, v=val[i*4:i*4+4]) for i,mr in enumerate(MatrixRowNames)]

    t = tuple([linearToUI(x) for x in cmds.matrixUtil(*val, q=True, t=True) ] + [0]) #to make it four long sot -valu flag can accept it!...
    r = tuple([rotationToUI(x) for x in cmds.matrixUtil(*val, q=True, r=True)] + [0])
    s = cmds.matrixUtil(*val, q=True, s=True) + (0,)
    shear = cmds.matrixUtil(*val, q=True, sh=True) + (0,)

    #set all composition fields
    [cmds.floatFieldGrp(controlName + field, e=True, v=value) for field, value in zip(CompositionFieldsNames, [t,r,s,shear])]

def getRowFieldValues(controlName):
    val = [cmds.floatFieldGrp(controlName + mr, q=True, value=True) for mr in MatrixRowNames]
    return  [item for sublist in val for item in sublist] # flatten

def getAttr(plugName):
    a = cmds.getAttr(plugName)
    return a if a is not None else IDENTITY

def getTranslation(controlName, plugName):
    t = (linearToUI(x) for x in cmds.floatFieldGrp(controlName + TranslateStr, q=True, value=True) )
    return cmds.matrixUtil(*getAttr(plugName), e=True, t=t)

def getRotation(controlName, plugName):
    r = (rotationFromUI(x) for x in cmds.floatFieldGrp(controlName + RotateStr, q=True, value=True) )
    return cmds.matrixUtil(*getAttr(plugName), e=True, r=r)

def getScale(controlName, plugName):
    s = cmds.floatFieldGrp(controlName + ScaleStr, q=True, value=True)
    return cmds.matrixUtil(*getAttr(plugName), e=True, s=s)

def getShear(controlName, plugName):
    sh = cmds.floatFieldGrp(controlName + ShearStr, q=True, value=True)
    return cmds.matrixUtil(*getAttr(plugName), e=True, sh=sh)

def setMatrixRowEditCallback(controlName, updateCmd):
    callback = lambda *_a: updateCmd(getRowFieldValues(controlName))
    [cmds.floatFieldGrp(controlName + mr, edit=True, cc=callback) for i,mr in enumerate(MatrixRowNames)]

def setCompositionFieldCallbacks(controlName, plugName, updateCmd):
    compT = lambda *_a: updateCmd(getTranslation(controlName, plugName))
    compR = lambda *_a: updateCmd(getRotation(controlName, plugName))
    compS = lambda *_a: updateCmd(getScale(controlName, plugName))
    compShear = lambda *_a: updateCmd(getShear(controlName, plugName))

    for field, callback in zip(CompositionFieldsNames, [compT, compR, compS, compShear]):
        cmds.floatFieldGrp(controlName + field, e=True, cc=callback)
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
