"""
interface -
    Module containing functions to interface with a specific node
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)


from builtins import object
import maya.cmds
import maya.internal.common.utils.message as msg_utils

# ------------------------------------------------------------------------------
class NodeInterfaceFactory(type):
    '''
    The NodeInterfaceFactory is a metaclass which is used to create
    NodeInterface objects.
    Its main use is to register all node interfaces based on the may node type
    they are applicable to and to create node interface instances given
    a particalur node and/or node type
    '''
    _ifcRegistery = {}

    def __init__(cls, clsname, bases, methods):
        super().__init__(clsname, bases, methods)
        cls._ifcRegistery[cls._mayaNodeType] = cls

    @classmethod
    def showRegistery(cls):
        print (cls._ifcRegistery)

    @classmethod
    def createFromType(cls, nodeType, nodeName=None):
        '''
        Create a node interface for a specific node type
        '''
        if nodeType is not None:
            myClass = cls._ifcRegistery.get(nodeType, None)
            if myClass:
                return myClass(nodeName)
        return None

    @classmethod
    def createFromNode(cls, nodeName, defaultNodeType=None):
        '''
        Create a node interface for the specified maya node.
        If the node type does not have a node interface defined
        then the optional specified default node type will be used.
        '''
        if maya.cmds.objExists(nodeName):
            nodeType = maya.cmds.objectType(nodeName)
            n = cls.createFromType(nodeType, nodeName)
            if n is None:
                n = cls.createFromType(defaultNodeType, nodeName)
            return n

        return None

# ------------------------------------------------------------------------------
class NodeInterface(metaclass=NodeInterfaceFactory):
    '''
    The base class for all node interfaces. Each class should reset the class
    variable "_mayaNodeType" so that it can automatically be registered and
    used as the interface to be used for that particualr node type.
    '''
    _mayaNodeType = None

    def __init__(self, nodeName):
        self.editNode = nodeName

    def isValid(self):
        if self.editNode is None:
            return False
        else:
            return maya.cmds.objExists(self.editNode) and maya.cmds.objectType(self.editNode, isAType=self.__class__._mayaNodeType)

    def isValidWithErrorMessage(self):
        if not self.isValid():
            msg_utils.showError(maya.stringTable['y_maya_internal_common_node_interface.kErrMsgNoValidNode' ].format(self.__class__._mayaNodeType))
            return False
        else:
            return True

    def getEditNode(self):
        return self.editNode
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
