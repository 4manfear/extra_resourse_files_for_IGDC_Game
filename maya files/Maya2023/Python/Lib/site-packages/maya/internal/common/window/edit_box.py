import maya
maya.utils.loadStringResourcesForModule(__name__)

import maya.cmds
import maya.internal.common.window.window_box as wnd

globalEditBox = None
selectModeOptionVarKey = 'editBox_selectMode'
addMode = 'add'
repMode = 'replace'
remMode = 'remove'
togMode = 'toggle'

def _selectAdd(self, *args):
    maya.cmds.optionVar(sv=(selectModeOptionVarKey, addMode))

def _selectReplace(self, *args):
    maya.cmds.optionVar(sv=(selectModeOptionVarKey, repMode))

def _selectRemove(self, *args):
    maya.cmds.optionVar(sv=(selectModeOptionVarKey, remMode))

def _selectToggle(self, *args):
    maya.cmds.optionVar(sv=(selectModeOptionVarKey, togMode))

# ------------------------------------------------------------------------------
#
#  EditBox
#
# ------------------------------------------------------------------------------

class EditBox(wnd.WindowBox):

    def __init__(self):
        super(EditBox, self).__init__()
        self.showApplyBtn = False
        self.showApplyAndCloseBtn = False
        self.selectModeAddItem = None
        self.selectModeReplaceItem = None
        self.selectModeRemoveItem = None
        self.selectModeToggleItem = None

    def createWindowMenus(self):
        '''Creates the editBox menus
        '''
        super(EditBox, self).createWindowMenus()
        self.createEditMenu()

    def appendToEditMenu(self):
        '''Creates the windowBox 'Select' menu.
        '''
        if self.editMenu is None:
            return

        maya.cmds.menuItem(divider=True)
        maya.cmds.menuItem( subMenu=True, label=maya.stringTable['y_maya_internal_common_window_edit_box.kLabelSelectMode' ], )
        maya.cmds.radioMenuItemCollection()
        self.selectModeAddItem = maya.cmds.menuItem(label=maya.stringTable['y_maya_internal_common_window_edit_box.kLabelOptAdd' ], radioButton=True, command=_selectAdd )
        self.selectModeReplaceItem = maya.cmds.menuItem(label=maya.stringTable['y_maya_internal_common_window_edit_box.kLabelOptReplace' ], radioButton=False, command=_selectReplace )
        self.selectModeRemoveItem = maya.cmds.menuItem(label=maya.stringTable['y_maya_internal_common_window_edit_box.kLabelOptRemove' ], radioButton=False, command=_selectRemove )
        self.selectModeToggleItem = maya.cmds.menuItem(label=maya.stringTable['y_maya_internal_common_window_edit_box.kLabelOptToggle' ], radioButton=False, command=_selectToggle )
        maya.cmds.setParent( '..', menu=True )

        if maya.cmds.optionVar(exists=selectModeOptionVarKey):
            d = { addMode : self.selectModeAddItem, repMode : self.selectModeReplaceItem, remMode : self.selectModeRemoveItem, togMode : self.selectModeToggleItem }
            item = d.get(maya.cmds.optionVar(q=selectModeOptionVarKey), None)
            if item:
               maya.cmds.menuItem(item, edit=True, radioButton=True)



# ------------------------------------------------------------------------------
#
# Global calls
#
# ------------------------------------------------------------------------------

#    import edit_box as box
#
#    w = box.getEditBox()
#
#    w.setWindowTitle("My New Window")
#    w.setHelpTag("MyTag")
#
#    # Change the label of the close button
#    maya.cmds.button(w.closeBtn, edit=True, label="Bye Bye")
#
#    maya.cmds.setParent(w.getLayout())
#
#    # add more widgets
#    cmds.columnLayout(adjustableColumn=True, rowSpacing=10)
#    cmds.button(label='Button A')
#
#    box.showEditBox()
#

# ------------------------------------------------------------------------------
def getEditBox():
    '''Get an initialized singular global EditBox.
    This will create it, if necessary.
    '''
    global globalEditBox

    if globalEditBox is None:
        globalEditBox = EditBox()

    globalEditBox.getOrCreateWindow()

    return globalEditBox

# ------------------------------------------------------------------------------
def showEditBox():
    '''Show the singular global editBox.
    '''
    global globalEditBox
    if globalEditBox is None:
        return

    globalEditBox.showWindow()

# ------------------------------------------------------------------------------
def hideEditBox(now=False):
    '''Hide the singular global editBox.
    '''
    global globalEditBox
    if globalEditBox is None:
        return

    globalEditBox.hideWindow(now)
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
