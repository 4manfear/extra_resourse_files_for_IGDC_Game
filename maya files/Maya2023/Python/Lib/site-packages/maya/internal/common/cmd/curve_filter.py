"""
Base class for curve filter commands.

It will fill the advanced tab of the OptionBox and use the parameters there
to issue the native deformer command.

Derived classes will need to implement the "command" method and override
the "addBasicCurveFilterDialogWidgets" method
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)



from builtins import object
import maya.cmds


import maya.internal.common.cmd.base as cmdbase
import maya.internal.common.utils.ui as ui_utils
from maya.common.ui import LayoutManager
from maya.common.ui import ParentManager

# ------------------------------------------------------------------------------
#
# Enum types
#
# ------------------------------------------------------------------------------

class eTimeRangeType(object):
    kAll = 1
    kSelection = 2
    kTimeRange = 3
    kTimeSlider = 4
    

# ------------------------------------------------------------------------------
# Comand
# ------------------------------------------------------------------------------
class Command(cmdbase.Command):
    def __init__(self):
        super(Command, self).__init__()

        self.commandName = 'filterCurve'
        self.commandTitle = maya.stringTable['y_maya_internal_common_cmd_curve_filter.kCurveFilterCommandTitle' ]
        self.timeRangeMode = eTimeRangeType.kSelection
        self.defaultWindowSize = [600, 350]
        self.optionVarCategory = 'Graph Editor.Curve Filter'
        self.optionVarPrefix = 'filterCurve_'
        self.optionVarDefaults.update(
            {
                'timeRange': eTimeRangeType.kSelection,
                'startTime': 0.0,
                'endTime': 10.0,
                'preview': True
            }
        )

        self.filterTypes = [
            # TODO: Fill in all the existing filter types.
        ]

        # Stroing the widge for preview setup
        self.timeModeWidget = None
        self.widthWidget = None
        self.sampleCountWidget = None
        self.useQuaternionWidget = None
        self.startTimeBox = None
        self.endTimeBox = None
        self.previewCheckboxWidget = None

        # Option for adding widgets.
        self.wantSelection = True
        self.wantPreview = True

    def getSelectedTimeRange(self):
        '''
        Returns a tuple (start, end) for the minimum
        and maximum times of the selected keyframes.

        If no keys are selected, this method returns
        the time slider range.
        '''
        # Set default range to time slider range
        start = maya.cmds.playbackOptions(q=True, min=True)
        end = maya.cmds.playbackOptions(q=True, max=True)

        sel_keys = maya.cmds.keyframe(q=True, sl=True)
        if sel_keys:
            sel_key_times = [float(i) for i in sel_keys]
            start = min(sel_key_times)
            end = max(sel_key_times)
        return (start, end)

    @staticmethod
    def getCurveFilterBasicCommandArgs(**kwargs):
        timeRange = kwargs.get('timeRange', None)
        startTime = kwargs.get('startTime', None)
        endTime = kwargs.get('endTime', None)

        kw = dict()

        playbackMin = maya.cmds.playbackOptions(query=True, minTime=True)
        playbackMax = maya.cmds.playbackOptions(query=True, maxTime=True)
        
        if timeRange == eTimeRangeType.kAll:
            kw.update( { 'startTime' : playbackMin } )
            kw.update( { 'endTime' : playbackMax } )
        elif timeRange == eTimeRangeType.kTimeRange:
            kw.update( { 'startTime' : kwargs.get('startTime') } )
            kw.update( { 'endTime' : kwargs.get('endTime') } )
        elif timeRange == eTimeRangeType.kSelection:
            kw.update( { 'selectedKeys' : True} )
        elif timeRange == eTimeRangeType.kTimeSlider:
            kw.update( { 'startTime' : playbackMin } )
            kw.update( { 'endTime' : playbackMax } )

        return kw

    @classmethod
    def command(cls, **kwargs):
        '''Base curve filter command
        '''
        return []

    def curveFilterDoSelectionChanged(self):
        # When selection changed, update the time start & end
        optionVarDict = self.getWidgetValues()
        
        selectedRangeFirst, selectedRangeLast = self.getSelectedTimeRange()

        if (selectedRangeFirst and selectedRangeLast) and optionVarDict.get('timeRange', None) == eTimeRangeType.kSelection:
            optionVarDict.update( { 'startTime' : selectedRangeFirst } )
            optionVarDict.update( { 'endTime' : selectedRangeLast } )
            self.setWidgetValues(optionVarDict)

    def addBasicCurveFilterDialogWidgets(self):
        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}

        with ui_utils.AttributeLayoutManager():

            if self.wantSelection:
                widget = ui_utils.radioButtonGrp(maya.stringTable['y_maya_internal_common_cmd_curve_filter.kCurveFilterTimeRangea' ],
                        numberOfRadioButtons = 4,
                        columnAlign4=['center', 'center', 'center', 'center'],
                        onCommand=self._onUpdateWidgets,
                        labelArray4=[maya.stringTable['y_maya_internal_common_cmd_curve_filter.kCurveFilterTimeRangeAlla' ],
                            maya.stringTable['y_maya_internal_common_cmd_curve_filter.kCurveFilterTimeRangeSelectiona' ],
                            maya.stringTable['y_maya_internal_common_cmd_curve_filter.kCurveFilterTimeRangeStartEnda' ],
                            maya.stringTable['y_maya_internal_common_cmd_curve_filter.kCurveFilterTimeRangeTimeSlidera' ]])

                maya.cmds.scriptJob(p=widget, event=["SelectionChanged", self.curveFilterDoSelectionChanged], protected=True)

            else:
                widget = ui_utils.radioButtonGrp(maya.stringTable['y_maya_internal_common_cmd_curve_filter.kCurveFilterTimeRangeb' ],
                        numberOfRadioButtons = 3,
                        columnAlign4=['center', 'center', 'center'],
                        onCommand=self._onUpdateWidgets,
                        labelArray4=[maya.stringTable['y_maya_internal_common_cmd_curve_filter.kCurveFilterTimeRangeAllb' ],
                            maya.stringTable['y_maya_internal_common_cmd_curve_filter.kCurveFilterTimeRangeStartEndb' ],
                            maya.stringTable['y_maya_internal_common_cmd_curve_filter.kCurveFilterTimeRangeTimeSliderb' ]])
            
            self.timeModeWidget = widget

            widgetDict['timeRange'] = (maya.cmds.radioButtonGrp, widget)

            widget = ui_utils.floatFieldGrp(maya.stringTable['y_maya_internal_common_cmd_curve_filter.kCurveFilterStartTime' ])
            widgetDict['startTime'] = (maya.cmds.floatFieldGrp, widget)
            self.startTimeBox = widget
            widget = ui_utils.floatFieldGrp(maya.stringTable['y_maya_internal_common_cmd_curve_filter.kCurveFilterEndTime' ])
            widgetDict['endTime'] = (maya.cmds.floatFieldGrp, widget)
            self.endTimeBox = widget


            if self.wantPreview:
                widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_common_cmd_curve_filter.kCurveFilterPreview' ],
                    onCommand1=self._onUpdateWidgets,
                    offCommand1=self._onUpdateWidgets)
                widgetDict['preview'] = (maya.cmds.checkBoxGrp, widget)
                self.previewCheckboxWidget = widget

        return widgetDict

    def addFilterSpecificSettingsDialogWidgets(self):
        raise NotImplementedError(maya.stringTable['y_maya_internal_common_cmd_curve_filter.kErrMsgAddFilterSpecificSettingsDialogWidgetsNotImplemented' ])

    def addOptionDialogWidgets(self):
        self.tab1 = maya.cmds.columnLayout(adjustableColumn=True)
        maya.cmds.setParent(self.tabLayout)

        widgetDict = {}

        with ParentManager(self.tab1):
            ui_utils.createCommandDescriptionLayout(self.commandDescription)
            with ParentManager(ui_utils.createTimeRangeLayout()):
                widgetDict.update(self.addBasicCurveFilterDialogWidgets())

            with ParentManager(ui_utils.createCommandSettingsLayout()):
                widgetDict.update(self.addFilterSpecificSettingsDialogWidgets())

        return widgetDict# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
