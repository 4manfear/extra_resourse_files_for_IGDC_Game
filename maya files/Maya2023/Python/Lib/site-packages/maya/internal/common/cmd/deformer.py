"""
Base class for deformer commands.

It will fill the advanced tab of the OptionBox and use the parameters there
to issue the native deformer command.

Derived classes will need to implement the "command" method and override
the "addBasicDeformerDialogWidgets" method
"""
import maya
maya.utils.loadStringResourcesForModule(__name__)



from builtins import object
import maya.cmds

import maya.internal.common.cmd.base as cmdbase
import maya.internal.common.utils.ui as ui_utils
from maya.common.ui import LayoutManager
from maya.common.ui import ParentManager

labelNewPartition = maya.stringTable['y_maya_internal_common_cmd_deformer.kNewPartition' ]

# ------------------------------------------------------------------------------
#
# Enum types
#
# ------------------------------------------------------------------------------

class ePositioning(object):
    kDefault = 0
    kBefore = 1
    kAfter = 2
    kSplit = 3
    kParallel = 4
    kFrontOfChain = 5

# ------------------------------------------------------------------------------
def getPartitions():
    partitions = maya.cmds.ls(type='partition')
    toRemove = [ 'renderPartition',  'characterPartition' ]
    return [item for item in partitions if item not in toRemove]

# ------------------------------------------------------------------------------
# Command
# ------------------------------------------------------------------------------

class Command(cmdbase.Command):
    def __init__(self):
        super(Command, self).__init__()

        self.commandName = 'Deform'
        self.commandHelpTag	= 'Deform'
        self.commandTitle = maya.stringTable['y_maya_internal_common_cmd_deformer.kDeformerCommandTitle' ]
        self.defaultWindowSize = [500, 350]
        self.optionVarCategory = 'Deform.Deformer'
        self.optionVarPrefix = 'deform_'
        self.optionVarDefaults = {
            'positioning': ePositioning.kDefault,
            'exclusive': False,
            'exclName': 'deformPartition'}

        self.partitionNameWidget = None
        self.partitionPicker = None
        self.wantTabs = True

    @classmethod
    def command(cls, **kwargs):
        '''Base deformer command
        '''
        return []

    @staticmethod
    def _createDeformerNode(mayacmd, deformerType=None, deformerGeom=None, **kwargs):

        if deformerType is None or deformerType == "":
            return None

        kw = Command.getDeformerCommandArgs(**kwargs)
        kw.update( { 'type' :  deformerType} )

        try:
            if deformerGeom:
                res = mayacmd(deformerGeom, **kw)
            else:
                res = mayacmd(**kw)

            return res

        except Exception:
            return None

    @staticmethod
    def createDeformer(deformerType=None, deformerGeom=None, **kwargs):
        return Command._createDeformerNode(maya.cmds.deformer, deformerType=deformerType, deformerGeom=deformerGeom, **kwargs)

    @staticmethod
    def createNonLinearDeformer(deformerType=None, deformerGeom=None, **kwargs):
        return Command._createDeformerNode(maya.cmds.nonLinear, deformerType=deformerType, deformerGeom=deformerGeom, **kwargs)

    @staticmethod
    def getDeformerCommandArgs(**kwargs):
        exclusive = kwargs.get('exclusive', None)
        exclName = kwargs.get('exclName', None)
        positioning = kwargs.get('positioning', None)
        kw = dict()

        if exclusive is not None and exclusive:
            if exclName:
                kw.update( { 'exclusive' : exclName })

        if positioning == ePositioning.kBefore:
            kw.update( { 'before' : True })
        elif positioning == ePositioning.kAfter:
            kw.update( { 'after' : True })
        elif positioning == ePositioning.kSplit:
            kw.update( { 'split' : True })
        elif positioning == ePositioning.kParallel:
            kw.update( { 'parallel' : True })
        elif positioning == ePositioning.kFrontOfChain:
            kw.update( { 'frontOfChain' : True })

        return kw

    def addAdvancedDeformerDialogWidgets(self):
        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}

        with ui_utils.AttributeLayoutManager():

            opts = [ (maya.stringTable['y_maya_internal_common_cmd_deformer.kLabelOptDefault' ], ePositioning.kDefault),
                    (maya.stringTable['y_maya_internal_common_cmd_deformer.kLabelOptFrontOfChain' ], ePositioning.kFrontOfChain),
                    (maya.stringTable['y_maya_internal_common_cmd_deformer.kLabelOptBefore' ], ePositioning.kBefore),
                    (maya.stringTable['y_maya_internal_common_cmd_deformer.kLabelOptAfter' ], ePositioning.kAfter),
                    (maya.stringTable['y_maya_internal_common_cmd_deformer.kLabelOptSplit' ], ePositioning.kSplit),
                    (maya.stringTable['y_maya_internal_common_cmd_deformer.kLabelOptParallel' ], ePositioning.kParallel) ]

            widget, lookup = ui_utils.createOptionMenu(maya.stringTable['y_maya_internal_common_cmd_deformer.kLabelPositioning' ],
                                                    options=opts,
                                                    annotation=maya.stringTable['y_maya_internal_common_cmd_deformer.kAnnotPositioning' ])
            self.optionMenuGrp_labelToEnum['positioning'] = lookup
            widgetDict['positioning'] = (maya.cmds.optionMenuGrp, widget)

            ui_utils.addSeparatorLine()

            # Exclusive
            widget = ui_utils.checkBoxGrp(maya.stringTable['y_maya_internal_common_cmd_deformer.kLabelExclusive' ],
                                        annotation=maya.stringTable['y_maya_internal_common_cmd_deformer.kAnnotExclusive' ],
                                        onCommand1=self._onUpdatePartitionWidgets, offCommand1=self._onUpdatePartitionWidgets)
            widgetDict['exclusive'] = (maya.cmds.checkBoxGrp, widget)

            # Partition picker
            self.partitionPicker = ui_utils.DynamicOptionMenu(label=maya.stringTable['y_maya_internal_common_cmd_deformer.kLabelSelectPartition' ],
                                                    candidateFn=self._getPartitionMenuNames,
                                                    pickedFn=self._pickedPartition,
                                                    asGrp=True)
            maya.cmds.control(self.partitionPicker.control, edit=True, annotation=maya.stringTable['y_maya_internal_common_cmd_deformer.kAnnotSelectPartition' ])

            # Partition name
            widget = ui_utils.textFieldGrp(label=maya.stringTable['y_maya_internal_common_cmd_deformer.kLabelPartitionName' ],
                                            annotation=maya.stringTable['y_maya_internal_common_cmd_deformer.kAnnotPartitionName' ],
                                            enable=False,
                                            textChangedCommand=self._partitionNameEdit)
            widgetDict['exclName'] = (maya.cmds.textFieldGrp, widget)
            self.partitionNameWidget = widget


        return widgetDict

    def addBasicDeformerDialogWidgets(self):
        raise NotImplementedError(maya.stringTable['y_maya_internal_common_cmd_deformer.kErrMsgAddBasicDeformerDialogWidgetsNotImplemented' ])
        # widgetDict = {}
        # return widgetDict

    def addOptionDialogWidgets(self):
        self.tab1 = maya.cmds.columnLayout(adjustableColumn=True)
        maya.cmds.setParent(self.tabLayout)
        self.tab2 = maya.cmds.columnLayout(adjustableColumn=True)
        maya.cmds.tabLayout(self.tabLayout, edit=True, tabLabel=((self.tab1,maya.stringTable['y_maya_internal_common_cmd_deformer.kLabelTabBasic' ]), (self.tab2, maya.stringTable['y_maya_internal_common_cmd_deformer.kLabelTabAdvanced' ])) )

        widgetDict = {} # {optionVarDictKey, (widgetClass, widget)}

        # Tab 1 (Basic)
        with ParentManager(self.tab1):
            ui_utils.createCommandDescriptionLayout(self.commandDescription)
            with ParentManager(ui_utils.createCommandSettingsLayout()):
                widgetDict.update(self.addBasicDeformerDialogWidgets())

        # Tab 2 (Advanced)
        with ParentManager(self.tab2):
            with ParentManager(ui_utils.createCommandSettingsLayout()):
                widgetDict.update(self.addAdvancedDeformerDialogWidgets())

        return widgetDict

    def _partitionNameEdit(self, *args):
        self._updatePartitionPicker(args[0].strip())

    def _updatePartitionPicker(self, partitionName):
        parts = getPartitions()

        if partitionName and partitionName in parts:
            newValue = partitionName
        else:
            newValue = labelNewPartition

        if self.partitionPicker.getValue() != newValue:
            self.partitionPicker.setValue(newValue)

    def _onUpdatePartitionWidgets(self, *args):
        self.updatePartitionWidgets()

    def _getPartitionMenuNames(self):
        parts = getPartitions()
        names = [ labelNewPartition ]
        names.extend(parts)
        return names

    def _pickedPartition(self, partitionName):
        if partitionName == labelNewPartition:
            parts = getPartitions()
            baseName = maya.cmds.textFieldGrp(self.partitionNameWidget, query=True, text=True)
            baseName = baseName.strip()
            if not baseName or baseName in parts:
                baseName = 'deformPartition'
            partitionName = baseName
            i = 1
            while partitionName in parts:
                partitionName = u'{0}{1}'.format(baseName,i)
                i+=1

        maya.cmds.textFieldGrp(self.partitionNameWidget, edit=True, text=partitionName)

    def updatePartitionWidgets(self):
        (controlCmd, widget) = self.optionVarToWidgetDict['exclusive']

        if maya.cmds.control(widget, exists=True):
            # Enable / disable partition widgets based on 'exclusive' toggle
            excl = controlCmd(widget, query=True, value1=True)
            maya.cmds.control(self.partitionNameWidget, edit=True, enable=excl)
            maya.cmds.control(self.partitionPicker.control, edit=True, enable=excl)
            if excl:
                # Update the partition picker
                partitionName = maya.cmds.textFieldGrp(self.partitionNameWidget, query=True, text=True)
                self._updatePartitionPicker(partitionName.strip())

    def updateWindow(self):
        self.updatePartitionWidgets()

    def customApplyAndCloseButtonLabel(self):
        return maya.stringTable[ 'y_maya_internal_common_cmd_deformer.kGetApplyAndClose' ]
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
