import maya
maya.utils.loadStringResourcesForModule(__name__)

from builtins import object
from builtins import range
TOP =  "top"
BOTTOM = "bottom"
RIGHT = "right"
LEFT = "left"

labelNoHelp = maya.stringTable['y_maya_internal_common_window_window_box.kCreateNoHelpCurrentlyAvailable' ]

import maya.cmds
from maya.common.ui import callback_tool

# ------------------------------------------------------------------------------
#
#
# ------------------------------------------------------------------------------
def _callback_saveWindowSize(tool):
    try:
        tool.saveWindowSize()
    except Exception:
        return

def _storeWindowDimensions(tag, width, height):
    # For windows and linux,
    # If there is dpi scaling, querying the width and height will be multiplied
    # by dpi scaling value. So we need to divide the width and height by dpi
    # scaling value to get the right size for creating new window.
    # IMPORTANT: In the future, if the behavior changes (if querying
    # width and height returns non-scaled value), then this script has
    # to be updated accordingly.
    if not maya.cmds.about(mac=True):
        scaling = 1.0 if not hasattr(maya.cmds, "mayaDpiSetting") else maya.cmds.mayaDpiSetting(query=True, realScaleValue=True)
        width = int(width / scaling)
        height = int(height / scaling)

    key = u'windowBoxDimensions{0}'.format(tag)
    maya.cmds.optionVar(iv=(key, width))
    maya.cmds.optionVar(iva=(key, height))

def _restoreWindowDimensions(tag, defaultSize=None):
    if tag is not None and tag != "":
        key = u'windowBoxDimensions{0}'.format(tag)
        if maya.cmds.optionVar(exists=key):
            return maya.cmds.optionVar(q=key)

    return defaultSize if defaultSize is not None else [546, 350]

# ------------------------------------------------------------------------------
#
#  WindowBox
#
# ------------------------------------------------------------------------------

class WindowBox(object):
    '''
    The WindowBox class presents a window that can be shared (one at a time)
    by different "clients". Each client can take over the window and replace
    the contents of the UI while the window stays up.

    It uses a swap buffer to change contents. Internally there are two contents:
    one contains the widgets that are currently shown to the user, while the
    other (invisible) one can be filled with new content. At the end the
    visibility of the 2 buffers is swapped and the old buffers contents is
    cleared.

    Each client has a tag which is used manage its size. When the content of a
    certain client is shown again the window can resize to its last used size.
    '''

    def __init__(self):

        self.window = None

        self.mainLayout = None
        self.contentLayout = None
        self.buttonLayout = None

        self.applyAndCloseBtn = None
        self.applyBtn = None
        self.closeBtn = None

        self.helpTag = None
        self.windowTag = None

        self.editMenu = None
        self.editMenuResetItem = None
        self.editMenuSaveItem = None
        self.helpMenuHelpItem = None

        self.showToolAndAction = False
        self.showApplyBtn = True
        self.showApplyAndCloseBtn = True

        self.useSwapTab = False

    def _createContentLayout(self):
        '''Creates the basis for the custom contents. It creates 2 layout
        buffers of which only one will be visible at a time.
        '''

        if self.useSwapTab:
            self.contentLayout = maya.cmds.tabLayout(tabsVisible=False)
        else:
            self.contentLayout = maya.cmds.formLayout('content')

        # Make the minimum height of the layout as small as possible
        # so that when the window is scaled down, the common windowBox
        # buttons do not overlap the contents of the windowBox.
        maya.cmds.layout(self.contentLayout, edit=True, height=1)


        self.contentBuf = [ None, None]
        # Create two children for the content layout.`
        self.contentBuf[0] = maya.cmds.formLayout('buf0')
        maya.cmds.setParent('..')
        self.contentBuf[1] = maya.cmds.formLayout('buf1')
        maya.cmds.setParent('..')
        self.visibleContentIndex = 0

        if not self.useSwapTab:
            maya.cmds.formLayout(self.contentBuf[0], edit=True, visible=True)
            maya.cmds.formLayout(self.contentBuf[1], edit=True, visible=False)

    def _createButtonLayout(self):
        '''Creates 3 buttons at the bottom of the form
        '''
        # Force the buttons to have a common width, this will not only
        # look better but also allow the buttons to be centred in the
        # window.

        maya.cmds.setParent(self.mainLayout)
        self.buttonLayout = maya.cmds.formLayout()

        buttonHeight = 26
        b1 = maya.cmds.button(recomputeSize=False, height=buttonHeight, label='Button 1')
        b2 = maya.cmds.button(recomputeSize=False, height=buttonHeight, label='Button 2')
        b3 = maya.cmds.button(recomputeSize=False, height=buttonHeight, label='Button 3')
        hmargin = 5
        vmargin = 5
        space = 4
        maya.cmds.formLayout(self.buttonLayout,
                edit=True,
                numberOfDivisions=100,
                attachForm = [
                        (b1, TOP, vmargin),
                        (b1, LEFT, hmargin),
                        (b1, BOTTOM, vmargin),
                        (b2, TOP, vmargin),
                        (b2, BOTTOM, vmargin),
                        (b3, TOP, vmargin),
                        (b3, BOTTOM, vmargin),
                        (b3, RIGHT, hmargin)],
                attachPosition=[
                        (b1, RIGHT, int(space/2), 33),
                        (b2, LEFT, int(space/2), 33),
                        (b2, RIGHT, int(space/2), 67),
                        (b3, LEFT, int(space/2), 67)]
                )

        self.applyAndCloseBtn = b1
        self.applyBtn = b2
        self.closeBtn = b3

    def _onCloseCommand(self, *args):
        if maya.cmds.thumbnailCaptureComponent(query=True, fileDialogProcessing=True) == 0:
            maya.cmds.thumbnailCaptureComponent(closeCurrentSession=True)
        self.saveWindowSize()

    def _onCloseButton(self, *args):
        self.hideWindow()

    def _doNothing(self, *args):
        pass

    def _deleteUI(self):
        if self.windowExists():
            maya.cmds.deleteUI(self.window, window=True)
            self.window = None

    def _getCurrentContentIndex(self):
        if self.useSwapTab:
            index = maya.cmds.tabLayout(self.contentLayout, query=True, selectTabIndex=True)
            # For some obscure reasoning tabs start indexing at 1...
            self.visibleContentIndex = (index-1)

        return self.visibleContentIndex

    def _getAlternateContentIndex(self):
        index = self._getCurrentContentIndex()
        swapIndex = 0 if index == 1 else 1
        return swapIndex

    def _getCurrentContent(self):
        return self.contentBuf[self._getCurrentContentIndex()]

    def _getAlternateContent(self):
        return self.contentBuf[self._getAlternateContentIndex()]

    def _swapContent(self):
        previous = self._getCurrentContent()
        alternate = self._getAlternateContent()

        contents = maya.cmds.formLayout(alternate, query=True, childArray=True)
        if contents and len(contents) > 0:
                maya.cmds.formLayout(alternate, edit=True,
                attachForm = [
                    (contents[0], TOP, 0),
                    (contents[0], LEFT, 0),
                    (contents[0], BOTTOM, 0),
                    (contents[0], RIGHT, 0)]
            )

        if self.useSwapTab:
            maya.cmds.tabLayout(self.contentLayout, edit=True, selectTab=alternate)
        else:
            hmargin = 5
            maya.cmds.formLayout(previous, edit=True, visible=False)
            maya.cmds.formLayout(alternate, edit=True, visible=True)
            maya.cmds.formLayout(self.contentLayout, edit=True,
                attachForm = [
                    (alternate, TOP, 0),
                    (alternate, LEFT, hmargin),
                    (alternate, BOTTOM, 0),
                    (alternate, RIGHT, hmargin)]
            )
            self.visibleContentIndex = self._getAlternateContentIndex()

        # Now delete the contents, if any, of the previous content...
        contents = maya.cmds.formLayout(previous, query=True, childArray=True)
        if contents and len(contents) > 0:
            count = len(contents)
            for index in range(0, count):
                maya.cmds.deleteUI(u'{0}|{1}'.format(previous, contents[index]))

    def _resetState(self):
        # Reset the default state of the buttons and remove any dim conditions
        # set on these buttons.

        if self.closeBtn:
            maya.cmds.dimWhen(self.closeBtn, clear=True)
            maya.cmds.button(self.closeBtn,
                             edit=True, enable=True, visible=True,
                             label=maya.stringTable[ 'y_maya_internal_common_window_window_box.kGetClose' ],
                             command=self._onCloseButton)

        if self.applyBtn:
            maya.cmds.dimWhen(self.applyBtn, clear=True)
            maya.cmds.button(self.applyBtn,
                             edit=True, enable=True, visible=self.showApplyBtn,
                             label=maya.stringTable[ 'y_maya_internal_common_window_window_box.kGetApply' ])

        if self.applyAndCloseBtn:
            maya.cmds.dimWhen(self.applyAndCloseBtn, clear=True)
            maya.cmds.button(self.applyAndCloseBtn,
                             edit=True, enable=True, visible=self.showApplyAndCloseBtn,
                             label=maya.stringTable[ 'y_maya_internal_common_window_window_box.kGetApplyAndClose' ])


        # Reset the default state of the menuItems.
        if self.editMenuResetItem:
            maya.cmds.menuItem(self.editMenuResetItem, edit=True, command=self._doNothing)
        if self.editMenuSaveItem:
            maya.cmds.menuItem(self.editMenuSaveItem, edit=True, command=self._doNothing)

        # Reset the help tag
        self.helpTag = None

        # Reset the help tag
        self.windowTag = None

    def _createWindow(self):
        '''Creates the common UI elements for the windowBox window
        '''
        # If we had some UI, get rid of it since want to start from scratch
        self._deleteUI()

        self.window = maya.cmds.window(menuBar=True,
                                      iconName=maya.stringTable['y_maya_internal_common_window_window_box.kCreateOptions' ],
                                      widthHeight=(546,350),
                                      closeCommand=self._onCloseCommand)

        # Create a script job, so every time window is closed, we save its size
        maya.cmds.scriptJob( uiDeleted=(self.window, callback_tool(self, _callback_saveWindowSize)) )

        # Create the menu bar.
        self.createWindowMenus()

        # Create the common UI elements.
        self.mainLayout = maya.cmds.formLayout('main')

        # Create the custom contents holder
        self._createContentLayout()

        # Create the buttons at the bottom
        self._createButtonLayout()

        #
        # Put the content form and the button form together in the main form
        #
        space = 5  # Space between tabs, separator and button layout.
        maya.cmds.formLayout(self.mainLayout, edit=True,
                attachForm = [
                        (self.contentLayout, TOP, 0),
                        (self.contentLayout, LEFT, 0),
                        (self.contentLayout, RIGHT, 0),
                        (self.buttonLayout, LEFT, space),
                        (self.buttonLayout, BOTTOM, space),
                        (self.buttonLayout, RIGHT, space)],
                attachControl = [
                        (self.contentLayout, BOTTOM, space, self.buttonLayout) ],
                attachNone = [
                        (self.buttonLayout, TOP) ]
        )

        self._resetState()
        self.updateWindow()

    # --------------------------------------------------------------------------
    #
    # Public methods
    #
    # --------------------------------------------------------------------------
    def windowExists(self, showError=False):
        if self.window is not None and maya.cmds.window(self.window, exists=True):
            return True
        else:
            if showError:
                maya.cmds.error(maya.stringTable['y_maya_internal_common_window_window_box.kErrMsgWindowDoesNotExist'  ])
            return False

    def setWindowTitle(self, title):
        if self.windowExists():
            maya.cmds.window(self.window, edit=True, title=title)

    def setWindowTag(self, windowTag):
        '''Sets the window tag that is used for caching window size'''
        self.windowTag = windowTag

    def setHelpTag(self, helpTag):
        '''Set the help tag to use to look up the correct documentation
        page for this windowBox. The text string in the help menu
        will be the window title.
        '''
        if self.helpMenuHelpItem is None or not self.windowExists(True):
            return

        self.helpTag = helpTag
        if self.helpTag and self.helpTag != "":
            # Get the title of the windowBox window to use for help.
            title = maya.cmds.window(self.window, query=True, title=True)
            msg = maya.stringTable['y_maya_internal_common_window_window_box.kHelpOn' ]
            maya.cmds.menuItem(self.helpMenuHelpItem, edit=True,
                               label=u'{0} {1}'.format(msg, title),
                               command=self.showHelp)
        else:
            maya.cmds.menuItem(self.helpMenuHelpItem, edit=True,
                               label=labelNoHelp,
                               command=self._doNothing)

    def setCommandName(self, commandName):
        '''Set the command name of the windowBox window.  The command name
        is required to set up some common windowBox behaviour, for
            example the label of the help menu item.

        Note:
            If setHelpTag() is used then this method has
            no effect.
        '''
        msg = maya.stringTable['y_maya_internal_common_window_window_box.kSetHelpWith' ]
        self.commandName = commandName
        if self.helpMenuHelpItem:
            maya.cmds.menuItem(self.helpMenuHelpItem, edit=True,
                                label=u'{0} {1}'.format(msg, commandName),
                                command=self.showHelpDoc)

    def showHelp(self, miscBool=None):
        if self.helpTag:
            maya.cmds.showHelp(self.helpTag)

    def showHelpDoc(self):
        if self.commandName:
            maya.cmds.help(doc=self.commandName)

    def getOrCreateWindow(self):
        if self.windowExists():
            self.saveWindowSize()
            self.updateWindow()
            self._resetState() # Reset the default state of buttons/menus/...
        else:
            self._createWindow()

    def updateEditMenu(self):
        '''Update the windowBox's Edit menu.
        This situation arises when the windowBox is already created and
        the user selects another command's or tool's windowBox menu item.

        Take this opportunity to update the enable state of the Edit menu
        items.
        '''
        pass

    def appendToEditMenu(self):
        '''Append to the windowBox's Edit menu.
        '''
        pass

    def updateWindow(self):
        '''Update the windowBox content (controls, menus, etc...) to reflect
        the new command/tool.

        This situation arises when the windowBox is already created and
        the user selects another command's or tool's windowBox menu item.

        Take this opportunity to update (for example enable/disable controls
        or menu items).
        '''
        self.updateEditMenu()

    def createEditMenu(self):
        '''Creates the windowBox 'Edit' menu.
        '''
        maya.cmds.setParent(self.window)

        self.editMenu = maya.cmds.menu(label=maya.stringTable[ 'y_maya_internal_common_window_window_box.kCreateEditMenu'  ])
        self.editMenuSaveItem = maya.cmds.menuItem(label=maya.stringTable[ 'y_maya_internal_common_window_window_box.kCreateSaveSettings'  ])
        self.editMenuResetItem = maya.cmds.menuItem(label=maya.stringTable[ 'y_maya_internal_common_window_window_box.kCreateResetSettings' ])

        # noToolAndAction
        if self.showToolAndAction:
            maya.cmds.menuItem(divider=True)
            maya.cmds.radioMenuItemCollection()
            self.editMenuToolItem = maya.cmds.menuItem(label=maya.stringTable['y_maya_internal_common_window_window_box.kCreateAsTool' ], radioButton=True )
            self.editMenuActionItem = maya.cmds.menuItem(label=maya.stringTable['y_maya_internal_common_window_window_box.kCreateAsAction' ], radioButton=True )
        else:
            self.editMenuToolItem = None
            self.editMenuActionItem = None

        self.appendToEditMenu()

        self.updateEditMenu()

    def createHelpMenu(self):
        '''Creates the windowBox 'Help' menu.
        '''
        maya.cmds.setParent(self.window)

        # Be sure to indicate that this is the 'Help' menu so that
        # it appears right justified in the menu bar.
        maya.cmds.menu(label=maya.stringTable[ 'y_maya_internal_common_window_window_box.kCreateHelpMenu'  ], helpMenu=True)

        # Create the 'Help' menu items.
        self.helpMenuHelpItem = maya.cmds.menuItem(label=labelNoHelp,
                                                   enableCommandRepeat=False)

    def createWindowMenus(self):
        '''Creates the windowBox menus
        '''
        pass

    def saveWindowSize(self):
        if self.windowTag is None or self.windowTag == '':
            return

        if self.windowExists():
            # This is the case when windowBox switches "on the fly"
            #  - new windowBox selected without closing window for previous one.
            width = maya.cmds.window(self.window, query=True, width=True)
            height = maya.cmds.window(self.window, query=True, height=True)
            _storeWindowDimensions(self.windowTag, width, height)
        else:
            # This is the case when we called from script job, meaning window is gone,
            # so get it's size from window preferences.
            # check whether the windowPref exists
            if maya.cmds.windowPref(self.window, exists=True):
                width = maya.cmds.window(self.window, query=True, width=True)
                height = maya.cmds.window(self.window, query=True, height=True)
                _storeWindowDimensions(self.windowTag, width, height)

    def restoreWindowSize(self):
        '''Sets current windowBox width and height to saved values.
        If values are not saved, then use the default ones.
        '''
        if self.windowExists():
            dim = _restoreWindowDimensions(self.windowTag, defaultSize=[546, 350])
            maya.cmds.window(self.window, edit=True, widthHeight=(dim[0], dim[1]))

    def getLayout(self):
        '''Return the layout that is invisible at the moment and is will
        be used to fill new new content'''
        return self._getAlternateContent()

    def showWindow(self):
        if not self.windowExists(showError=True):
            return

        self._swapContent()

        self.restoreWindowSize()
        maya.cmds.showWindow(self.window)

    def hideWindow(self, now=False):
        if self.windowExists():
            if now:
                self._deleteUI()
            else:
                maya.cmds.evalDeferred(self._deleteUI)

# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
