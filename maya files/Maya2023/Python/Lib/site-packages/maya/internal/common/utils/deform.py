"""
General node utilities.
Contains methods to manage deformer nodes...
"""

import maya.cmds
import maya.internal.common.utils.connections as con_utils
import maya.internal.common.utils.componenttag as ctag_utils

# ------------------------------------------------------------------------------
def _checkIsZero(v, tol=1e-05):
    return (abs(v) <= tol)

# ------------------------------------------------------------------------------
def _isZeroPoint(p):
    for j in range(0,3):
        if not _checkIsZero(p[j]):
            return False
    return True

# ------------------------------------------------------------------------------
def _hasPoints(listAttr, pointAttr):
    indices = maya.cmds.getAttr(listAttr, multiIndices=True)
    if indices is None or len(indices) == 0:
        return False

    for i in indices:
        attr = '{0}[{1}].{2}'.format(listAttr, i, pointAttr)
        pnt_indices = maya.cmds.getAttr(attr, multiIndices=True)
        if pnt_indices is not None:
            for j in pnt_indices:
                p = maya.cmds.getAttr('{0}[{1}]'.format(attr,j))[0]
                if not _isZeroPoint(p):
                    return True

    return False

# ------------------------------------------------------------------------------
def _isActiveTweak(twk):
    '''
    Check if the tweak node is active. This means it contains points and
    those points cause a displacement
    '''
    if _hasPoints('{0}.vlist'.format(twk), 'vertex'):
        return True

    if _hasPoints('{0}.plist'.format(twk), 'controlPoints'):
        return True
    return False

#-------------------------------------------------------------------------------
def getGeometryNode(deformerNode, multiIndex):
    '''
    Given the multi index on the deformerNode, return the geometry object
    that is being deformed
    '''

    geomIndices = maya.cmds.deformer(deformerNode, q=True, gi=True) or []
    try:
        idx = geomIndices.index(multiIndex)
    except:
        return None

    geoms = maya.cmds.deformer(deformerNode, q=True, geometry=True) or []
    return geoms[idx] if idx < len(geoms) else None

#-------------------------------------------------------------------------------
def getGroupPartsNode(deformerNode, multiIndex):
    '''
    Return the groupParts node (if any) that is used by the groupId
    connected to the deformer at the specified multiIndex
    '''

    inputPlug = u'{}.input[{}].groupId'.format(deformerNode, multiIndex)

    # Find the incoming groupId node
    groupIdPlug = con_utils.getSourcePlug(inputPlug)
    if groupIdPlug is None:
        return None

    # Find the groupPart node we are connected to
    cons = maya.cmds.listConnections(groupIdPlug, source=False, destination=True, type='groupParts') or []
    return cons[0] if len(cons) > 0 else None

#-------------------------------------------------------------------------------
def disconnectFromObjectSetNode(deformerNode, deleteWhenPossible=True):
    '''
    This will disconnect the deformerNode from the associated objectSet nodes
    and optionally, when the objectSet node is no longer useful to others, they
    will be deleted.
    '''
    # Find the objectSet node we are connected to
    cons = maya.cmds.listConnections(u'{0}.message'.format(deformerNode), plugs=True, source=False, destination=True, type='objectSet')
    if cons is None:
        return

    for plug in cons:
        dsmPlug = plug.replace('.usedBy[', '.dagSetMembers[', 1)
        if dsmPlug != plug:
            src = con_utils.getSourcePlug(dsmPlug)
            if src:
                maya.cmds.disconnectAttr(src, dsmPlug)
                if deleteWhenPossible:
                    node = plug.split('.')[0]
                    indices = maya.cmds.getAttr(u'{0}.dagSetMembers'.format(node), multiIndices=True)
                    if indices is None or len(indices) == 0:
                        # Since nothing is left, delete the objectSet
                        maya.cmds.delete(node)

# ------------------------------------------------------------------------------
def _createTagFromGroupId(deformerNode, index):
    base = u'{0}.input[{1}]'.format(deformerNode, index)

    # Find the groupId
    gid = maya.cmds.getAttr(u'{0}.groupId'.format(base))
    if gid == 0:
        return False

    # Find the groupPart node we are connected to
    groupPartsNode = getGroupPartsNode(deformerNode, index)
    if groupPartsNode is None:
        return False

    # Find the geometry we are deforming
    shape = getGeometryNode(deformerNode, index)
    if shape is None:
        return

    # What components are we deforming?
    plg = u'{0}.inputGeometry'.format(base)
    sbs = maya.cmds.geometryAttrInfo(plg, gid=gid, sbs=True)
    if sbs == -1:
        maya.cmds.warning('Invalid subset specification on {0}'.format(plg))
        return False

    if sbs == 2:
        tagName = '*'
    elif sbs == 0:
        tagName = ''
    else:
        # Partial deformation, so we need a componentTag made from the components
        validGeom = maya.cmds.objectType(shape, isAType='mesh') or \
                    maya.cmds.objectType(shape, isAType='nurbsSurface') or \
                    maya.cmds.objectType(shape, isAType='nurbsCurve') or \
                    maya.cmds.objectType(shape, isAType='lattice')
        if not validGeom:
            return False

        cmp = maya.cmds.geometryAttrInfo(u'{0}.inputGeometry'.format(base), gid=gid, cmp=True)

        # Create a tag on the geometry
        injectionNode = ctag_utils.getOrCreateUpstreamInjectionNode(shape)
        tagSfx = '' if index == 0 else '_{}_'.format(index)
        tagName = u'{}{}Tag'.format(deformerNode.replace(':', '_'), tagSfx).strip('_')

        ctag_utils.createTag(injectionNode, tagName, cmp)
        #print u'{} : tag = \"{}\", cmp = {}'.format(deformerNode, tagName, cmp)

    # Unhook us from the objectSet and delete it if possible
    disconnectFromObjectSetNode(deformerNode)

    if maya.cmds.objExists(groupPartsNode):
        # Delete the groupParts node. That should also delete the groupId node
        maya.cmds.delete(groupPartsNode)

    # Set the tagName we want to use
    maya.cmds.setAttr(u'{}.componentTagExpression'.format(base), tagName, type='string')
    return True

# ------------------------------------------------------------------------------
def replaceGroupParts(deformerNode, onlyIndices=None):
    '''
    Change subsetting using groupIds/groupParts on the deformer node with componentTags
    '''
    if not maya.cmds.objExists(deformerNode):
        return False

    if maya.cmds.referenceQuery(deformerNode, isNodeReferenced=True):
        return 0

    # Get all valid multiIndices of the deformer
    indices = maya.cmds.getAttr(u'{0}.input'.format(deformerNode), multiIndices=True)
    # If we provided a filter, limit the indices to the ones specified in onlyIndices
    if onlyIndices and indices:
        indices = [i for i in onlyIndices if i in indices]

    num = 0
    if indices is not None and len(indices) > 0:
        for i in indices:
            base = u'{0}.input[{1}]'.format(deformerNode, i)
            gid = maya.cmds.getAttr(u'{0}.groupId'.format(base))
            if gid > 0:
                if _createTagFromGroupId(deformerNode, i):
                    num+=1
    return num

# ------------------------------------------------------------------------------
def removeObsoleteTweak(tweakNode):
    '''
    Remove the tweak node if it has no effect on the scene
    '''
    if not maya.cmds.objExists(tweakNode):
        return False

    if maya.cmds.referenceQuery(tweakNode, isNodeReferenced=True):
        return False

    if _isActiveTweak(tweakNode):
        # A tweak that has any points with a delta should not be moved
        return False

    # Delete any groupPart nodes that might connect to the tweak node
    indices = maya.cmds.getAttr(u'{0}.input'.format(tweakNode), multiIndices=True)
    if indices is not None and len(indices) > 0:
        for index in indices:
            # Find the incoming groupParts node
            groupPartsNode = getGroupPartsNode(tweakNode, index)
            if groupPartsNode is not None:
                maya.cmds.delete(groupPartsNode)

    # Unhook us from the objectSet and delete it if possible
    disconnectFromObjectSetNode(tweakNode)

    # Delete the tweak node
    maya.cmds.delete(tweakNode)
    return True
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
