import maya
maya.utils.loadStringResourcesForModule(__name__)

from PySide2 import QtWidgets, QtCore
from PySide2.QtGui import *
from PySide2.QtCore import *
from PySide2.QtWidgets import *

from maya.OpenMayaUI import MQtUtil

import maya.cmds as cmds
import maya.internal.common.ae.template as aetemplate

from maya.internal.common.ae.matrix_fields import *

try:
    from shiboken2 import getCppPointer, wrapInstance
    useShiboken2 = True
except ImportError:
    useShiboken2 = False

class ExpandHeader(QtWidgets.QWidget):
    def __init__(self, expanded, text):
        super(ExpandHeader, self).__init__()

        self.content = None
        self.setContextMenuPolicy(Qt.CustomContextMenu)

        self.collapseButton = QtWidgets.QToolButton()
        self.collapseButton.setToolButtonStyle(Qt.ToolButtonIconOnly)
        
        # Ignore mouse events to let parent handle it.
        self.collapseButton.setAttribute(Qt.WA_TransparentForMouseEvents)
        self.collapseButton.clicked.connect(self.toggleCollapsed)

        self.title = QtWidgets.QLabel(text)

        self.connected = QtWidgets.QLineEdit()
        self.connected.setContextMenuPolicy(Qt.NoContextMenu)
        self.connected.setReadOnly(True)

        self.mainLayout = QtWidgets.QHBoxLayout()
        self.mainLayout.setContentsMargins(0, 0, 0, 0)
        self.mainLayout.addWidget(self.collapseButton)
        self.mainLayout.addWidget(self.title)
        self.mainLayout.addWidget(self.connected)

        self.setLayout(self.mainLayout)
        self.setExpanded(expanded)

    # Qt Signal
    toggleCollapsed = QtCore.Signal()

    def setExpanded(self, expanded):
        self.collapseButton.setArrowType(Qt.DownArrow if expanded else Qt.RightArrow)

    def setContent(self, content):
        self.content = content
        self.update()

    def setText(self, text):
        self.title.setText(text)

    def setConnectedPlugName(self, name):
        self.connected.setText(name if name is not None else '')

    def mouseReleaseEvent(self, mouseEvent):
        if mouseEvent.button() == Qt.LeftButton:
            self.toggleCollapsed.emit()

    def sizeHint(self):
        headerHint = QWidget.sizeHint(self)

        if self.content is None: 
            return headerHint

        return QtCore.QSize(self.content.sizeHint().width(), headerHint.height())

class MatrixWidget(QtWidgets.QFrame):
    NAME_SUFFIX = 0

    def __init__(self, uiParent=None):
        super(MatrixWidget, self).__init__()

        # Get unique name for connection.
        MatrixWidget.NAME_SUFFIX += 1
        objectName = 'matrixAttributeWidget{}'.format(MatrixWidget.NAME_SUFFIX)

        baseName = (uiParent + '|') if uiParent is not None else ''

        self.fullName = baseName + objectName
        self.setObjectName(objectName)
        self.setFrameStyle(QFrame.StyledPanel | QFrame.Plain)

        self.plugName = None
        self.nodeName = None
        self.controlName = None
        self.header = None
        self.expanded = False

        if useShiboken2:
            cursorPtr = MQtUtil.createCursor('rmbMenu.png,11,9,17,14,22,18')
            cursor = wrapInstance(int(cursorPtr), QCursor)
            self.setCursor(cursor)

    def changeNode(self, nodeName, plugName):
        self.plugName = plugName
        self.nodeName = nodeName

        # Create wiget if it does not exist.
        if self.controlName is None:
            self.contentLayout = QtWidgets.QVBoxLayout()
            self.contentLayout.setObjectName('matrixAttributeWidgetContentLayout')
            self.contentLayout.setContentsMargins(0, 0, 0, 0)
            
            self.content = QtWidgets.QWidget()
            self.content.setObjectName('matrixAttributeWidgetContent')
            self.content.setLayout(self.contentLayout)

            self.mainLayout = QtWidgets.QVBoxLayout()
            self.mainLayout.setObjectName('matrixAttributeWidgetMainLayout')
            self.mainLayout.setContentsMargins(0, 0, 0, 0)
            
            self.header = ExpandHeader(self.expanded, self.plugName)
            self.header.customContextMenuRequested.connect(self._showHeaderContextMenu)
            self.header.toggleCollapsed.connect(self.toggleCollapsed)
            self.header.setContent(self.content)

            self.mainLayout.addWidget(self.header)
            self.mainLayout.addWidget(self.content)

            self.setLayout(self.mainLayout)
            self.controlName = createMatrixControl(self.contentLayout.objectName(), self.plugName)

            self.setExpanded(self.expanded)

        # Set attribute name label.
        attrName = cmds.attributeName(self.plugName, nice=True)

        # Set header title
        if self.header:
            self.header.setText(attrName)

        # Set callbacks when editing fields.
        setMatrixRowEditCallback(self.controlName, self._sendNewValue)
        setCompositionFieldCallbacks(self.controlName, self.plugName, self._sendNewValue)

        # Setup popup menu.
        self.menuName = self.controlName + "popup"

        if cmds.popupMenu(self.menuName, q=True, exists=True):
            cmds.popupMenu(self.menuName, e=True, dai=True, pmc=self._onPopupMenuPost)
        else:
            cmds.popupMenu(self.menuName, parent=self.controlName, pmc=self._onPopupMenuPost)

        # Connect control to attribute to send and receive value
        cmds.connectControl(self.fullName, plugName, includeChildren=True)

    @QtCore.Slot(bool)
    def setEnabled(self, enabled):
        super(MatrixWidget, self).setEnabled(enabled)

    @QtCore.Slot(bool)
    def setReadOnly(self, readOnly):
        pass

    @QtCore.Slot('QVariant')
    def newValueFromConnection(self, value):
        if self.controlName is not None:
            setAllFields(self.controlName, value)

    @QtCore.Slot()
    def toggleCollapsed(self):
        self.setExpanded(not self.expanded)

    @QtCore.Slot(QColor, QColor)
    def setAppearance(self, textColor, backgroundColor):
        if self.header:
            self.header.setConnectedPlugName(self._getConnectedSource())

            p = self.header.palette()

            # Set base color to affect the QLineEdit background color
            p.setColor(QPalette.Active, QPalette.Base, backgroundColor)
            p.setColor(QPalette.Active, QPalette.Text, textColor)
            p.setColor(QPalette.Inactive, QPalette.Base, backgroundColor)
            p.setColor(QPalette.Inactive, QPalette.Text, textColor)

            self.header.setPalette(p)

    def setExpanded(self, expand):
        self.header.setExpanded(expand)

        if (expand):
            self.content.show()
        else:
            self.content.hide()

        self.expanded = expand

    newValueForConnections = QtCore.Signal('QVariant', bool)

    def _sendNewValue(self, value):
        self.newValueForConnections.emit(value, False)

    def _setIdentity(self):
        identity = [1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1]
        self.newValueForConnections.emit(identity, False)

    def _setInverse(self):
        inverse = cmds.matrixUtil(*cmds.getAttr(self.plugName), e=True, iv=True)
        self.newValueForConnections.emit(inverse, False)

    def _getConnectedSource(self):
        connections = None
        
        if cmds.objExists(self.nodeName):
            connections = cmds.listConnections(self.plugName, plugs=True, destination=False, source=True)

        if connections is not None and len(connections) > 0:
            return connections[0]

        return None

    def _breakConnection(self):
        connection = self._getConnectedSource()
        if connection is not None:
            cmds.disconnectAttr(connection, self.plugName)

    def _isConnected(self):
        return self._getConnectedSource() is not None

    def _setAttributeLocked(self, locked):
        cmds.setAttr(self.plugName, lock=locked)

    def _isAttributeLocked(self):
        return cmds.getAttr(self.plugName, lock = True)

    def _isAttributeSettable(self):
        compoundParent = aetemplate.plugMultiAttr(self.plugName)
        return cmds.attributeQuery(compoundParent, node=self.nodeName, writable=True)

    def _gotoConnection(self, connectedPlug):
        melCmd = r'showEditor "{}"'.format(aetemplate.plugNode(connectedPlug))
        deferredPyCmd = 'maya.mel.eval(\'{}\')'.format(melCmd)
        cmds.evalDeferred(deferredPyCmd)

    LOCK_ACTION =               (maya.stringTable['y_maya_internal_common_ae_matrix_widget.kLockAttribute' ],             _setAttributeLocked, [True])
    UNLOCK_ACTION =             (maya.stringTable['y_maya_internal_common_ae_matrix_widget.kUnlockAttribute' ],         _setAttributeLocked, [False])
    BREAK_CONNECTION_ACTION =   (maya.stringTable['y_maya_internal_common_ae_matrix_widget.kBreakConnection' ],         _breakConnection, [])
    SET_IDENTITY_ACTION =       (maya.stringTable['y_maya_internal_common_ae_matrix_widget.kMatrixIdentity' ],   _setIdentity, [])
    INVERSE_ACTION =            (maya.stringTable['y_maya_internal_common_ae_matrix_widget.kMatrixInverse' ],            _setInverse, [])
    GOTO_CONN_ACTION_TEMPLATE = (None, _gotoConnection, None)

    LOCKED_MENU = [
        UNLOCK_ACTION
    ]

    CONNECTED_MENU = [
        BREAK_CONNECTION_ACTION,
        LOCK_ACTION
    ]

    GENERAL_MENU = [
        SET_IDENTITY_ACTION,
        INVERSE_ACTION,
        LOCK_ACTION
    ]

    def _getGotoConnectionAction(self):
        label, command, args = self.GOTO_CONN_ACTION_TEMPLATE

        connectedPlug = self._getConnectedSource()
        if connectedPlug is not None:
            label = connectedPlug + '...'
            args = [connectedPlug]

        return (label, command, args)

    def _addMenuItem(self, label, command, args):
        if label is not None:
            cmds.menuItem(label=label, p=self.menuName, c=lambda *_a: command(self, *args))

    def _addQMenuAction(self, label, command, args):
        if label is not None:
            self.menu.addAction(label).triggered.connect(lambda *_a: command(self, *args))

    def _buildFromActions(self, actions, addItemCmd):
        [addItemCmd(label, command, args) for label, command, args in actions]

    def _buildMenu(self, addItemCmd):
        if self._isAttributeLocked():
            self._buildFromActions(self.LOCKED_MENU, addItemCmd)
        elif self._isConnected():
            addItemCmd(*self._getGotoConnectionAction())
            self._buildFromActions(self.CONNECTED_MENU, addItemCmd)
        elif self._isAttributeSettable():
            self._buildFromActions(self.GENERAL_MENU, addItemCmd)

    def _onPopupMenuPost(self, *args):
        cmds.popupMenu(self.menuName, e=True, dai=True)
        self._buildMenu(self._addMenuItem)

    def _showHeaderContextMenu(self, pos):
        self.menu = QMenu(self)
        self._buildMenu(self._addQMenuAction)
        self.menu.exec_(self.mapToGlobal(pos))



# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
