from PySide2.QtGui import *
from PySide2.QtCore import *

#-------------------------------------------------------------------------------


class MayaQclocaleDoubleValidator(QDoubleValidator):

    """
    Maya version of the QDoubleValidator

    Maya does does not like localised numbers, it expect the point, not a comma or any other character,
    to be used as a decimal separator. Qt default number validator however relies on current locales to 
    process user numerical inputs.
    The current class does subclass the Qt validator and forces it in C locales. Because in some locales 
    the point is not intuitively used to input values (some setup will even force a comma instead of a point 
    on the numerical keyboard) the validator will during the input replace any local decimal separator with 
    the point separator.
    Because the same set of symbols are also used as thousands separators, Maya disable the current local thousands separator 
    at start up. Anyway Maya does not handle thousands separator very well either  
    
    This validator should be used everywere you would instantiate a QDoubleValidator
    
    Example:
    from maya.internal.common.qt.doubleValidator import MayaQclocaleDoubleValidator

    lineEdit = QLineEdit()
    lineEdit.setValidator( MayaQclocaleDoubleValidator() )
    # or
    lineEdit.setValidator( MayaQclocaleDoubleValidator( bottom, top, decimals ) )

    """
    __cachedClocale = QLocale.c() #QLocale.c() being a bit slow but constant we cache it

    def __init__(self, *args, **kwargs ):
        ''' Constructor, accepts the same parameters as QDoubleValidator '''
        QDoubleValidator.__init__(self, *args, **kwargs )
        self.__originalLocale = self.locale()
        QDoubleValidator.setLocale( self, MayaQclocaleDoubleValidator.__cachedClocale )


    def validate( self, input, pos):
        # realtime point serarator substitution
        input = input.replace( self.__originalLocale.decimalPoint(), MayaQclocaleDoubleValidator.__cachedClocale.decimalPoint() )
        # normal C local QDoublevalidator can be invoked
        return QDoubleValidator.validate( self, input, pos )

    def setLocale( self, newLocale ):
        # __init__ sets the superclass validator locale to C and expects it to remain
        # overriding setLocale prevents from tampering with the superclass locale
        # while still allowing post construction changes to the original local
        # 
        self.__originalLocale = newLocale

    
# ===========================================================================
# Copyright 2022 Autodesk, Inc. All rights reserved.
#
# Use of this software is subject to the terms of the Autodesk license
# agreement provided at the time of installation or download, or which
# otherwise accompanies this software in either electronic or hard copy form.
# ===========================================================================
