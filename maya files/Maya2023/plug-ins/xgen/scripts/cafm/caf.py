# Copyright 2015 Autodesk, Inc. All rights reserved. 
#
# Use of this software is subject to the terms of the Autodesk 
# license agreement provided at the time of installation or download, 
# or which otherwise accompanies this software in either electronic 
# or hard copy form.

# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.12
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.




"""

CAF LIBRARY PYTHON PACKAGE

Auto generated by SWIG from the C++ libcaf.
CAF C++ uses standard library template which are instanced in this interface

C++ Templates are instanced this package as follows:

PYTHON              C++
vectorChar          std::vector<char>;
vectorString        std::vector<std::string>;
vectorFloat         std::vector<float>;
vectorDouble        std::vector<double>;
vectorInt32         std::vector<int32_t>;
vectorInt64         std::vector<int64_t>;
vectorCafChunk      std::vector<Caf::CafChunk *>;
vectorDOBJChunk     std::vector<Caf::CafDOBJChunk *>;
CafLeafChunkString  Caf::CafLeafChunk<std::string>;
CafLeafChunkFloat   Caf::CafLeafChunk<float>;
CafLeafChunkDouble  Caf::CafLeafChunk<double>;
CafLeafChunkInt32   Caf::CafLeafChunk<int32_t>;
CafLeafChunkInt64   Caf::CafLeafChunk<int64_t>;

"""


from builtins import object
from builtins import range
import importlib

_caf = importlib.import_module('_caf')

try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object(object) : pass
    _newclass = 0


class SwigPyIterator(_object):
    """Proxy of C++ swig::SwigPyIterator class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, SwigPyIterator, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, SwigPyIterator, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _caf.delete_SwigPyIterator
    __del__ = lambda self : None;
    def value(self):
        """value(SwigPyIterator self) -> PyObject *"""
        return _caf.SwigPyIterator_value(self)

    def incr(self, n=1):
        """
        incr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        incr(SwigPyIterator self) -> SwigPyIterator
        """
        return _caf.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        """
        decr(SwigPyIterator self, size_t n=1) -> SwigPyIterator
        decr(SwigPyIterator self) -> SwigPyIterator
        """
        return _caf.SwigPyIterator_decr(self, n)

    def distance(self, *args):
        """distance(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t"""
        return _caf.SwigPyIterator_distance(self, *args)

    def equal(self, *args):
        """equal(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _caf.SwigPyIterator_equal(self, *args)

    def copy(self):
        """copy(SwigPyIterator self) -> SwigPyIterator"""
        return _caf.SwigPyIterator_copy(self)

    def next(self):
        """next(SwigPyIterator self) -> PyObject *"""
        return _caf.SwigPyIterator_next(self)

    def __next__(self):
        """__next__(SwigPyIterator self) -> PyObject *"""
        return _caf.SwigPyIterator___next__(self)

    def previous(self):
        """previous(SwigPyIterator self) -> PyObject *"""
        return _caf.SwigPyIterator_previous(self)

    def advance(self, *args):
        """advance(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _caf.SwigPyIterator_advance(self, *args)

    def __eq__(self, *args):
        """__eq__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _caf.SwigPyIterator___eq__(self, *args)

    def __ne__(self, *args):
        """__ne__(SwigPyIterator self, SwigPyIterator x) -> bool"""
        return _caf.SwigPyIterator___ne__(self, *args)

    def __iadd__(self, *args):
        """__iadd__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _caf.SwigPyIterator___iadd__(self, *args)

    def __isub__(self, *args):
        """__isub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _caf.SwigPyIterator___isub__(self, *args)

    def __add__(self, *args):
        """__add__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator"""
        return _caf.SwigPyIterator___add__(self, *args)

    def __sub__(self, *args):
        """
        __sub__(SwigPyIterator self, ptrdiff_t n) -> SwigPyIterator
        __sub__(SwigPyIterator self, SwigPyIterator x) -> ptrdiff_t
        """
        return _caf.SwigPyIterator___sub__(self, *args)

    def __iter__(self): return self
SwigPyIterator_swigregister = _caf.SwigPyIterator_swigregister
SwigPyIterator_swigregister(SwigPyIterator)

class setString(_object):
    """Proxy of C++ std::set<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, setString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, setString, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(setString self) -> SwigPyIterator"""
        return _caf.setString_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(setString self) -> bool"""
        return _caf.setString___nonzero__(self)

    def __bool__(self):
        """__bool__(setString self) -> bool"""
        return _caf.setString___bool__(self)

    def __len__(self):
        """__len__(setString self) -> std::set< std::string >::size_type"""
        return _caf.setString___len__(self)

    def append(self, *args):
        """append(setString self, std::set< std::string >::value_type x)"""
        return _caf.setString_append(self, *args)

    def __contains__(self, *args):
        """__contains__(setString self, std::set< std::string >::value_type x) -> bool"""
        return _caf.setString___contains__(self, *args)

    def __getitem__(self, *args):
        """__getitem__(setString self, std::set< std::string >::difference_type i) -> std::set< std::string >::value_type"""
        return _caf.setString___getitem__(self, *args)

    def add(self, *args):
        """add(setString self, std::set< std::string >::value_type x)"""
        return _caf.setString_add(self, *args)

    def discard(self, *args):
        """discard(setString self, std::set< std::string >::value_type x)"""
        return _caf.setString_discard(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::set<(std::string)> self, std::less< std::string > const & arg2) -> setString
        __init__(std::set<(std::string)> self) -> setString
        __init__(std::set<(std::string)> self, setString arg2) -> setString
        """
        this = _caf.new_setString(*args)
        try: self.this.append(this)
        except: self.this = this
    def empty(self):
        """empty(setString self) -> bool"""
        return _caf.setString_empty(self)

    def size(self):
        """size(setString self) -> std::set< std::string >::size_type"""
        return _caf.setString_size(self)

    def clear(self):
        """clear(setString self)"""
        return _caf.setString_clear(self)

    def swap(self, *args):
        """swap(setString self, setString v)"""
        return _caf.setString_swap(self, *args)

    def count(self, *args):
        """count(setString self, std::set< std::string >::key_type const & x) -> std::set< std::string >::size_type"""
        return _caf.setString_count(self, *args)

    def begin(self):
        """begin(setString self) -> std::set< std::string >::iterator"""
        return _caf.setString_begin(self)

    def end(self):
        """end(setString self) -> std::set< std::string >::iterator"""
        return _caf.setString_end(self)

    def rbegin(self):
        """rbegin(setString self) -> std::set< std::string >::reverse_iterator"""
        return _caf.setString_rbegin(self)

    def rend(self):
        """rend(setString self) -> std::set< std::string >::reverse_iterator"""
        return _caf.setString_rend(self)

    def erase(self, *args):
        """
        erase(setString self, std::set< std::string >::key_type const & x) -> std::set< std::string >::size_type
        erase(setString self, std::set< std::string >::iterator pos)
        erase(setString self, std::set< std::string >::iterator first, std::set< std::string >::iterator last)
        """
        return _caf.setString_erase(self, *args)

    def find(self, *args):
        """find(setString self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _caf.setString_find(self, *args)

    def lower_bound(self, *args):
        """lower_bound(setString self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _caf.setString_lower_bound(self, *args)

    def upper_bound(self, *args):
        """upper_bound(setString self, std::set< std::string >::key_type const & x) -> std::set< std::string >::iterator"""
        return _caf.setString_upper_bound(self, *args)

    def equal_range(self, *args):
        """equal_range(setString self, std::set< std::string >::key_type const & x) -> std::pair< std::set< std::string >::iterator,std::set< std::string >::iterator >"""
        return _caf.setString_equal_range(self, *args)

    def insert(self, *args):
        """insert(setString self, std::set< std::string >::value_type const & __x) -> std::pair< std::set< std::string >::iterator,bool >"""
        return _caf.setString_insert(self, *args)

    __swig_destroy__ = _caf.delete_setString
    __del__ = lambda self : None;
setString_swigregister = _caf.setString_swigregister
setString_swigregister(setString)

class vectorChar(_object):
    """Proxy of C++ std::vector<(char)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorChar, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorChar, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorChar self) -> SwigPyIterator"""
        return _caf.vectorChar_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(vectorChar self) -> bool"""
        return _caf.vectorChar___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorChar self) -> bool"""
        return _caf.vectorChar___bool__(self)

    def __len__(self):
        """__len__(vectorChar self) -> std::vector< char >::size_type"""
        return _caf.vectorChar___len__(self)

    def pop(self):
        """pop(vectorChar self) -> std::vector< char >::value_type"""
        return _caf.vectorChar_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorChar self, std::vector< char >::difference_type i, std::vector< char >::difference_type j) -> vectorChar"""
        return _caf.vectorChar___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorChar self, std::vector< char >::difference_type i, std::vector< char >::difference_type j, vectorChar v=std::vector< char,std::allocator< char > >())
        __setslice__(vectorChar self, std::vector< char >::difference_type i, std::vector< char >::difference_type j)
        """
        return _caf.vectorChar___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorChar self, std::vector< char >::difference_type i, std::vector< char >::difference_type j)"""
        return _caf.vectorChar___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorChar self, std::vector< char >::difference_type i)
        __delitem__(vectorChar self, PySliceObject * slice)
        """
        return _caf.vectorChar___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorChar self, PySliceObject * slice) -> vectorChar
        __getitem__(vectorChar self, std::vector< char >::difference_type i) -> std::vector< char >::value_type const &
        """
        return _caf.vectorChar___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorChar self, PySliceObject * slice, vectorChar v)
        __setitem__(vectorChar self, PySliceObject * slice)
        __setitem__(vectorChar self, std::vector< char >::difference_type i, std::vector< char >::value_type const & x)
        """
        return _caf.vectorChar___setitem__(self, *args)

    def append(self, *args):
        """append(vectorChar self, std::vector< char >::value_type const & x)"""
        return _caf.vectorChar_append(self, *args)

    def empty(self):
        """empty(vectorChar self) -> bool"""
        return _caf.vectorChar_empty(self)

    def size(self):
        """size(vectorChar self) -> std::vector< char >::size_type"""
        return _caf.vectorChar_size(self)

    def clear(self):
        """clear(vectorChar self)"""
        return _caf.vectorChar_clear(self)

    def swap(self, *args):
        """swap(vectorChar self, vectorChar v)"""
        return _caf.vectorChar_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorChar self) -> std::vector< char >::allocator_type"""
        return _caf.vectorChar_get_allocator(self)

    def begin(self):
        """begin(vectorChar self) -> std::vector< char >::iterator"""
        return _caf.vectorChar_begin(self)

    def end(self):
        """end(vectorChar self) -> std::vector< char >::iterator"""
        return _caf.vectorChar_end(self)

    def rbegin(self):
        """rbegin(vectorChar self) -> std::vector< char >::reverse_iterator"""
        return _caf.vectorChar_rbegin(self)

    def rend(self):
        """rend(vectorChar self) -> std::vector< char >::reverse_iterator"""
        return _caf.vectorChar_rend(self)

    def pop_back(self):
        """pop_back(vectorChar self)"""
        return _caf.vectorChar_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorChar self, std::vector< char >::iterator pos) -> std::vector< char >::iterator
        erase(vectorChar self, std::vector< char >::iterator first, std::vector< char >::iterator last) -> std::vector< char >::iterator
        """
        return _caf.vectorChar_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(char)> self) -> vectorChar
        __init__(std::vector<(char)> self, vectorChar arg2) -> vectorChar
        __init__(std::vector<(char)> self, std::vector< char >::size_type size) -> vectorChar
        __init__(std::vector<(char)> self, std::vector< char >::size_type size, std::vector< char >::value_type const & value) -> vectorChar
        """
        this = _caf.new_vectorChar(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorChar self, std::vector< char >::value_type const & x)"""
        return _caf.vectorChar_push_back(self, *args)

    def front(self):
        """front(vectorChar self) -> std::vector< char >::value_type const &"""
        return _caf.vectorChar_front(self)

    def back(self):
        """back(vectorChar self) -> std::vector< char >::value_type const &"""
        return _caf.vectorChar_back(self)

    def assign(self, *args):
        """assign(vectorChar self, std::vector< char >::size_type n, std::vector< char >::value_type const & x)"""
        return _caf.vectorChar_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorChar self, std::vector< char >::size_type new_size)
        resize(vectorChar self, std::vector< char >::size_type new_size, std::vector< char >::value_type const & x)
        """
        return _caf.vectorChar_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorChar self, std::vector< char >::iterator pos, std::vector< char >::value_type const & x) -> std::vector< char >::iterator
        insert(vectorChar self, std::vector< char >::iterator pos, std::vector< char >::size_type n, std::vector< char >::value_type const & x)
        """
        return _caf.vectorChar_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorChar self, std::vector< char >::size_type n)"""
        return _caf.vectorChar_reserve(self, *args)

    def capacity(self):
        """capacity(vectorChar self) -> std::vector< char >::size_type"""
        return _caf.vectorChar_capacity(self)

    __swig_destroy__ = _caf.delete_vectorChar
    __del__ = lambda self : None;
vectorChar_swigregister = _caf.vectorChar_swigregister
vectorChar_swigregister(vectorChar)

class vectorString(_object):
    """Proxy of C++ std::vector<(std::string)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorString, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorString self) -> SwigPyIterator"""
        return _caf.vectorString_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(vectorString self) -> bool"""
        return _caf.vectorString___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorString self) -> bool"""
        return _caf.vectorString___bool__(self)

    def __len__(self):
        """__len__(vectorString self) -> std::vector< std::string >::size_type"""
        return _caf.vectorString___len__(self)

    def pop(self):
        """pop(vectorString self) -> std::vector< std::string >::value_type"""
        return _caf.vectorString_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j) -> vectorString"""
        return _caf.vectorString___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j, 
            vectorString v=std::vector< std::string,std::allocator< std::string > >())
        __setslice__(vectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)
        """
        return _caf.vectorString___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::difference_type j)"""
        return _caf.vectorString___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorString self, std::vector< std::string >::difference_type i)
        __delitem__(vectorString self, PySliceObject * slice)
        """
        return _caf.vectorString___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorString self, PySliceObject * slice) -> vectorString
        __getitem__(vectorString self, std::vector< std::string >::difference_type i) -> std::vector< std::string >::value_type const &
        """
        return _caf.vectorString___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorString self, PySliceObject * slice, vectorString v)
        __setitem__(vectorString self, PySliceObject * slice)
        __setitem__(vectorString self, std::vector< std::string >::difference_type i, std::vector< std::string >::value_type const & x)
        """
        return _caf.vectorString___setitem__(self, *args)

    def append(self, *args):
        """append(vectorString self, std::vector< std::string >::value_type const & x)"""
        return _caf.vectorString_append(self, *args)

    def empty(self):
        """empty(vectorString self) -> bool"""
        return _caf.vectorString_empty(self)

    def size(self):
        """size(vectorString self) -> std::vector< std::string >::size_type"""
        return _caf.vectorString_size(self)

    def clear(self):
        """clear(vectorString self)"""
        return _caf.vectorString_clear(self)

    def swap(self, *args):
        """swap(vectorString self, vectorString v)"""
        return _caf.vectorString_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorString self) -> std::vector< std::string >::allocator_type"""
        return _caf.vectorString_get_allocator(self)

    def begin(self):
        """begin(vectorString self) -> std::vector< std::string >::iterator"""
        return _caf.vectorString_begin(self)

    def end(self):
        """end(vectorString self) -> std::vector< std::string >::iterator"""
        return _caf.vectorString_end(self)

    def rbegin(self):
        """rbegin(vectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _caf.vectorString_rbegin(self)

    def rend(self):
        """rend(vectorString self) -> std::vector< std::string >::reverse_iterator"""
        return _caf.vectorString_rend(self)

    def pop_back(self):
        """pop_back(vectorString self)"""
        return _caf.vectorString_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorString self, std::vector< std::string >::iterator pos) -> std::vector< std::string >::iterator
        erase(vectorString self, std::vector< std::string >::iterator first, std::vector< std::string >::iterator last) -> std::vector< std::string >::iterator
        """
        return _caf.vectorString_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(std::string)> self) -> vectorString
        __init__(std::vector<(std::string)> self, vectorString arg2) -> vectorString
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size) -> vectorString
        __init__(std::vector<(std::string)> self, std::vector< std::string >::size_type size, std::vector< std::string >::value_type const & value) -> vectorString
        """
        this = _caf.new_vectorString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorString self, std::vector< std::string >::value_type const & x)"""
        return _caf.vectorString_push_back(self, *args)

    def front(self):
        """front(vectorString self) -> std::vector< std::string >::value_type const &"""
        return _caf.vectorString_front(self)

    def back(self):
        """back(vectorString self) -> std::vector< std::string >::value_type const &"""
        return _caf.vectorString_back(self)

    def assign(self, *args):
        """assign(vectorString self, std::vector< std::string >::size_type n, std::vector< std::string >::value_type const & x)"""
        return _caf.vectorString_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorString self, std::vector< std::string >::size_type new_size)
        resize(vectorString self, std::vector< std::string >::size_type new_size, std::vector< std::string >::value_type const & x)
        """
        return _caf.vectorString_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::value_type const & x) -> std::vector< std::string >::iterator
        insert(vectorString self, std::vector< std::string >::iterator pos, std::vector< std::string >::size_type n, 
            std::vector< std::string >::value_type const & x)
        """
        return _caf.vectorString_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorString self, std::vector< std::string >::size_type n)"""
        return _caf.vectorString_reserve(self, *args)

    def capacity(self):
        """capacity(vectorString self) -> std::vector< std::string >::size_type"""
        return _caf.vectorString_capacity(self)

    __swig_destroy__ = _caf.delete_vectorString
    __del__ = lambda self : None;
vectorString_swigregister = _caf.vectorString_swigregister
vectorString_swigregister(vectorString)

class vectorFloat(_object):
    """Proxy of C++ std::vector<(float)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorFloat, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorFloat self) -> SwigPyIterator"""
        return _caf.vectorFloat_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(vectorFloat self) -> bool"""
        return _caf.vectorFloat___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorFloat self) -> bool"""
        return _caf.vectorFloat___bool__(self)

    def __len__(self):
        """__len__(vectorFloat self) -> std::vector< float >::size_type"""
        return _caf.vectorFloat___len__(self)

    def pop(self):
        """pop(vectorFloat self) -> std::vector< float >::value_type"""
        return _caf.vectorFloat_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorFloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j) -> vectorFloat"""
        return _caf.vectorFloat___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorFloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j, 
            vectorFloat v=std::vector< float,std::allocator< float > >())
        __setslice__(vectorFloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)
        """
        return _caf.vectorFloat___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorFloat self, std::vector< float >::difference_type i, std::vector< float >::difference_type j)"""
        return _caf.vectorFloat___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorFloat self, std::vector< float >::difference_type i)
        __delitem__(vectorFloat self, PySliceObject * slice)
        """
        return _caf.vectorFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorFloat self, PySliceObject * slice) -> vectorFloat
        __getitem__(vectorFloat self, std::vector< float >::difference_type i) -> std::vector< float >::value_type const &
        """
        return _caf.vectorFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorFloat self, PySliceObject * slice, vectorFloat v)
        __setitem__(vectorFloat self, PySliceObject * slice)
        __setitem__(vectorFloat self, std::vector< float >::difference_type i, std::vector< float >::value_type const & x)
        """
        return _caf.vectorFloat___setitem__(self, *args)

    def append(self, *args):
        """append(vectorFloat self, std::vector< float >::value_type const & x)"""
        return _caf.vectorFloat_append(self, *args)

    def empty(self):
        """empty(vectorFloat self) -> bool"""
        return _caf.vectorFloat_empty(self)

    def size(self):
        """size(vectorFloat self) -> std::vector< float >::size_type"""
        return _caf.vectorFloat_size(self)

    def clear(self):
        """clear(vectorFloat self)"""
        return _caf.vectorFloat_clear(self)

    def swap(self, *args):
        """swap(vectorFloat self, vectorFloat v)"""
        return _caf.vectorFloat_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorFloat self) -> std::vector< float >::allocator_type"""
        return _caf.vectorFloat_get_allocator(self)

    def begin(self):
        """begin(vectorFloat self) -> std::vector< float >::iterator"""
        return _caf.vectorFloat_begin(self)

    def end(self):
        """end(vectorFloat self) -> std::vector< float >::iterator"""
        return _caf.vectorFloat_end(self)

    def rbegin(self):
        """rbegin(vectorFloat self) -> std::vector< float >::reverse_iterator"""
        return _caf.vectorFloat_rbegin(self)

    def rend(self):
        """rend(vectorFloat self) -> std::vector< float >::reverse_iterator"""
        return _caf.vectorFloat_rend(self)

    def pop_back(self):
        """pop_back(vectorFloat self)"""
        return _caf.vectorFloat_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorFloat self, std::vector< float >::iterator pos) -> std::vector< float >::iterator
        erase(vectorFloat self, std::vector< float >::iterator first, std::vector< float >::iterator last) -> std::vector< float >::iterator
        """
        return _caf.vectorFloat_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(float)> self) -> vectorFloat
        __init__(std::vector<(float)> self, vectorFloat arg2) -> vectorFloat
        __init__(std::vector<(float)> self, std::vector< float >::size_type size) -> vectorFloat
        __init__(std::vector<(float)> self, std::vector< float >::size_type size, std::vector< float >::value_type const & value) -> vectorFloat
        """
        this = _caf.new_vectorFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorFloat self, std::vector< float >::value_type const & x)"""
        return _caf.vectorFloat_push_back(self, *args)

    def front(self):
        """front(vectorFloat self) -> std::vector< float >::value_type const &"""
        return _caf.vectorFloat_front(self)

    def back(self):
        """back(vectorFloat self) -> std::vector< float >::value_type const &"""
        return _caf.vectorFloat_back(self)

    def assign(self, *args):
        """assign(vectorFloat self, std::vector< float >::size_type n, std::vector< float >::value_type const & x)"""
        return _caf.vectorFloat_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorFloat self, std::vector< float >::size_type new_size)
        resize(vectorFloat self, std::vector< float >::size_type new_size, std::vector< float >::value_type const & x)
        """
        return _caf.vectorFloat_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorFloat self, std::vector< float >::iterator pos, std::vector< float >::value_type const & x) -> std::vector< float >::iterator
        insert(vectorFloat self, std::vector< float >::iterator pos, std::vector< float >::size_type n, std::vector< float >::value_type const & x)
        """
        return _caf.vectorFloat_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorFloat self, std::vector< float >::size_type n)"""
        return _caf.vectorFloat_reserve(self, *args)

    def capacity(self):
        """capacity(vectorFloat self) -> std::vector< float >::size_type"""
        return _caf.vectorFloat_capacity(self)

    __swig_destroy__ = _caf.delete_vectorFloat
    __del__ = lambda self : None;
vectorFloat_swigregister = _caf.vectorFloat_swigregister
vectorFloat_swigregister(vectorFloat)

class vectorDouble(_object):
    """Proxy of C++ std::vector<(double)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorDouble, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorDouble self) -> SwigPyIterator"""
        return _caf.vectorDouble_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(vectorDouble self) -> bool"""
        return _caf.vectorDouble___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorDouble self) -> bool"""
        return _caf.vectorDouble___bool__(self)

    def __len__(self):
        """__len__(vectorDouble self) -> std::vector< double >::size_type"""
        return _caf.vectorDouble___len__(self)

    def pop(self):
        """pop(vectorDouble self) -> std::vector< double >::value_type"""
        return _caf.vectorDouble_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j) -> vectorDouble"""
        return _caf.vectorDouble___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j, 
            vectorDouble v=std::vector< double,std::allocator< double > >())
        __setslice__(vectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)
        """
        return _caf.vectorDouble___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorDouble self, std::vector< double >::difference_type i, std::vector< double >::difference_type j)"""
        return _caf.vectorDouble___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorDouble self, std::vector< double >::difference_type i)
        __delitem__(vectorDouble self, PySliceObject * slice)
        """
        return _caf.vectorDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorDouble self, PySliceObject * slice) -> vectorDouble
        __getitem__(vectorDouble self, std::vector< double >::difference_type i) -> std::vector< double >::value_type const &
        """
        return _caf.vectorDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorDouble self, PySliceObject * slice, vectorDouble v)
        __setitem__(vectorDouble self, PySliceObject * slice)
        __setitem__(vectorDouble self, std::vector< double >::difference_type i, std::vector< double >::value_type const & x)
        """
        return _caf.vectorDouble___setitem__(self, *args)

    def append(self, *args):
        """append(vectorDouble self, std::vector< double >::value_type const & x)"""
        return _caf.vectorDouble_append(self, *args)

    def empty(self):
        """empty(vectorDouble self) -> bool"""
        return _caf.vectorDouble_empty(self)

    def size(self):
        """size(vectorDouble self) -> std::vector< double >::size_type"""
        return _caf.vectorDouble_size(self)

    def clear(self):
        """clear(vectorDouble self)"""
        return _caf.vectorDouble_clear(self)

    def swap(self, *args):
        """swap(vectorDouble self, vectorDouble v)"""
        return _caf.vectorDouble_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorDouble self) -> std::vector< double >::allocator_type"""
        return _caf.vectorDouble_get_allocator(self)

    def begin(self):
        """begin(vectorDouble self) -> std::vector< double >::iterator"""
        return _caf.vectorDouble_begin(self)

    def end(self):
        """end(vectorDouble self) -> std::vector< double >::iterator"""
        return _caf.vectorDouble_end(self)

    def rbegin(self):
        """rbegin(vectorDouble self) -> std::vector< double >::reverse_iterator"""
        return _caf.vectorDouble_rbegin(self)

    def rend(self):
        """rend(vectorDouble self) -> std::vector< double >::reverse_iterator"""
        return _caf.vectorDouble_rend(self)

    def pop_back(self):
        """pop_back(vectorDouble self)"""
        return _caf.vectorDouble_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorDouble self, std::vector< double >::iterator pos) -> std::vector< double >::iterator
        erase(vectorDouble self, std::vector< double >::iterator first, std::vector< double >::iterator last) -> std::vector< double >::iterator
        """
        return _caf.vectorDouble_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(double)> self) -> vectorDouble
        __init__(std::vector<(double)> self, vectorDouble arg2) -> vectorDouble
        __init__(std::vector<(double)> self, std::vector< double >::size_type size) -> vectorDouble
        __init__(std::vector<(double)> self, std::vector< double >::size_type size, std::vector< double >::value_type const & value) -> vectorDouble
        """
        this = _caf.new_vectorDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorDouble self, std::vector< double >::value_type const & x)"""
        return _caf.vectorDouble_push_back(self, *args)

    def front(self):
        """front(vectorDouble self) -> std::vector< double >::value_type const &"""
        return _caf.vectorDouble_front(self)

    def back(self):
        """back(vectorDouble self) -> std::vector< double >::value_type const &"""
        return _caf.vectorDouble_back(self)

    def assign(self, *args):
        """assign(vectorDouble self, std::vector< double >::size_type n, std::vector< double >::value_type const & x)"""
        return _caf.vectorDouble_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorDouble self, std::vector< double >::size_type new_size)
        resize(vectorDouble self, std::vector< double >::size_type new_size, std::vector< double >::value_type const & x)
        """
        return _caf.vectorDouble_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorDouble self, std::vector< double >::iterator pos, std::vector< double >::value_type const & x) -> std::vector< double >::iterator
        insert(vectorDouble self, std::vector< double >::iterator pos, std::vector< double >::size_type n, std::vector< double >::value_type const & x)
        """
        return _caf.vectorDouble_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorDouble self, std::vector< double >::size_type n)"""
        return _caf.vectorDouble_reserve(self, *args)

    def capacity(self):
        """capacity(vectorDouble self) -> std::vector< double >::size_type"""
        return _caf.vectorDouble_capacity(self)

    __swig_destroy__ = _caf.delete_vectorDouble
    __del__ = lambda self : None;
vectorDouble_swigregister = _caf.vectorDouble_swigregister
vectorDouble_swigregister(vectorDouble)

class vectorInt32(_object):
    """Proxy of C++ std::vector<(int32_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorInt32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorInt32, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorInt32 self) -> SwigPyIterator"""
        return _caf.vectorInt32_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(vectorInt32 self) -> bool"""
        return _caf.vectorInt32___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorInt32 self) -> bool"""
        return _caf.vectorInt32___bool__(self)

    def __len__(self):
        """__len__(vectorInt32 self) -> std::vector< int >::size_type"""
        return _caf.vectorInt32___len__(self)

    def pop(self):
        """pop(vectorInt32 self) -> std::vector< int >::value_type"""
        return _caf.vectorInt32_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorInt32 self, std::vector< int >::difference_type i, std::vector< int >::difference_type j) -> vectorInt32"""
        return _caf.vectorInt32___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorInt32 self, std::vector< int >::difference_type i, std::vector< int >::difference_type j, vectorInt32 v=std::vector< int,std::allocator< int > >())
        __setslice__(vectorInt32 self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)
        """
        return _caf.vectorInt32___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorInt32 self, std::vector< int >::difference_type i, std::vector< int >::difference_type j)"""
        return _caf.vectorInt32___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorInt32 self, std::vector< int >::difference_type i)
        __delitem__(vectorInt32 self, PySliceObject * slice)
        """
        return _caf.vectorInt32___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorInt32 self, PySliceObject * slice) -> vectorInt32
        __getitem__(vectorInt32 self, std::vector< int >::difference_type i) -> std::vector< int >::value_type const &
        """
        return _caf.vectorInt32___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorInt32 self, PySliceObject * slice, vectorInt32 v)
        __setitem__(vectorInt32 self, PySliceObject * slice)
        __setitem__(vectorInt32 self, std::vector< int >::difference_type i, std::vector< int >::value_type const & x)
        """
        return _caf.vectorInt32___setitem__(self, *args)

    def append(self, *args):
        """append(vectorInt32 self, std::vector< int >::value_type const & x)"""
        return _caf.vectorInt32_append(self, *args)

    def empty(self):
        """empty(vectorInt32 self) -> bool"""
        return _caf.vectorInt32_empty(self)

    def size(self):
        """size(vectorInt32 self) -> std::vector< int >::size_type"""
        return _caf.vectorInt32_size(self)

    def clear(self):
        """clear(vectorInt32 self)"""
        return _caf.vectorInt32_clear(self)

    def swap(self, *args):
        """swap(vectorInt32 self, vectorInt32 v)"""
        return _caf.vectorInt32_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorInt32 self) -> std::vector< int >::allocator_type"""
        return _caf.vectorInt32_get_allocator(self)

    def begin(self):
        """begin(vectorInt32 self) -> std::vector< int >::iterator"""
        return _caf.vectorInt32_begin(self)

    def end(self):
        """end(vectorInt32 self) -> std::vector< int >::iterator"""
        return _caf.vectorInt32_end(self)

    def rbegin(self):
        """rbegin(vectorInt32 self) -> std::vector< int >::reverse_iterator"""
        return _caf.vectorInt32_rbegin(self)

    def rend(self):
        """rend(vectorInt32 self) -> std::vector< int >::reverse_iterator"""
        return _caf.vectorInt32_rend(self)

    def pop_back(self):
        """pop_back(vectorInt32 self)"""
        return _caf.vectorInt32_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorInt32 self, std::vector< int >::iterator pos) -> std::vector< int >::iterator
        erase(vectorInt32 self, std::vector< int >::iterator first, std::vector< int >::iterator last) -> std::vector< int >::iterator
        """
        return _caf.vectorInt32_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(int32_t)> self) -> vectorInt32
        __init__(std::vector<(int32_t)> self, vectorInt32 arg2) -> vectorInt32
        __init__(std::vector<(int32_t)> self, std::vector< int >::size_type size) -> vectorInt32
        __init__(std::vector<(int32_t)> self, std::vector< int >::size_type size, std::vector< int >::value_type const & value) -> vectorInt32
        """
        this = _caf.new_vectorInt32(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorInt32 self, std::vector< int >::value_type const & x)"""
        return _caf.vectorInt32_push_back(self, *args)

    def front(self):
        """front(vectorInt32 self) -> std::vector< int >::value_type const &"""
        return _caf.vectorInt32_front(self)

    def back(self):
        """back(vectorInt32 self) -> std::vector< int >::value_type const &"""
        return _caf.vectorInt32_back(self)

    def assign(self, *args):
        """assign(vectorInt32 self, std::vector< int >::size_type n, std::vector< int >::value_type const & x)"""
        return _caf.vectorInt32_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorInt32 self, std::vector< int >::size_type new_size)
        resize(vectorInt32 self, std::vector< int >::size_type new_size, std::vector< int >::value_type const & x)
        """
        return _caf.vectorInt32_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorInt32 self, std::vector< int >::iterator pos, std::vector< int >::value_type const & x) -> std::vector< int >::iterator
        insert(vectorInt32 self, std::vector< int >::iterator pos, std::vector< int >::size_type n, std::vector< int >::value_type const & x)
        """
        return _caf.vectorInt32_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorInt32 self, std::vector< int >::size_type n)"""
        return _caf.vectorInt32_reserve(self, *args)

    def capacity(self):
        """capacity(vectorInt32 self) -> std::vector< int >::size_type"""
        return _caf.vectorInt32_capacity(self)

    __swig_destroy__ = _caf.delete_vectorInt32
    __del__ = lambda self : None;
vectorInt32_swigregister = _caf.vectorInt32_swigregister
vectorInt32_swigregister(vectorInt32)

class vectorInt64(_object):
    """Proxy of C++ std::vector<(int64_t)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorInt64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorInt64, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorInt64 self) -> SwigPyIterator"""
        return _caf.vectorInt64_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(vectorInt64 self) -> bool"""
        return _caf.vectorInt64___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorInt64 self) -> bool"""
        return _caf.vectorInt64___bool__(self)

    def __len__(self):
        """__len__(vectorInt64 self) -> std::vector< long long >::size_type"""
        return _caf.vectorInt64___len__(self)

    def pop(self):
        """pop(vectorInt64 self) -> std::vector< long long >::value_type"""
        return _caf.vectorInt64_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorInt64 self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j) -> vectorInt64"""
        return _caf.vectorInt64___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorInt64 self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j, 
            vectorInt64 v=std::vector< long long,std::allocator< long long > >())
        __setslice__(vectorInt64 self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j)
        """
        return _caf.vectorInt64___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorInt64 self, std::vector< long long >::difference_type i, std::vector< long long >::difference_type j)"""
        return _caf.vectorInt64___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorInt64 self, std::vector< long long >::difference_type i)
        __delitem__(vectorInt64 self, PySliceObject * slice)
        """
        return _caf.vectorInt64___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorInt64 self, PySliceObject * slice) -> vectorInt64
        __getitem__(vectorInt64 self, std::vector< long long >::difference_type i) -> std::vector< long long >::value_type const &
        """
        return _caf.vectorInt64___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorInt64 self, PySliceObject * slice, vectorInt64 v)
        __setitem__(vectorInt64 self, PySliceObject * slice)
        __setitem__(vectorInt64 self, std::vector< long long >::difference_type i, std::vector< long long >::value_type const & x)
        """
        return _caf.vectorInt64___setitem__(self, *args)

    def append(self, *args):
        """append(vectorInt64 self, std::vector< long long >::value_type const & x)"""
        return _caf.vectorInt64_append(self, *args)

    def empty(self):
        """empty(vectorInt64 self) -> bool"""
        return _caf.vectorInt64_empty(self)

    def size(self):
        """size(vectorInt64 self) -> std::vector< long long >::size_type"""
        return _caf.vectorInt64_size(self)

    def clear(self):
        """clear(vectorInt64 self)"""
        return _caf.vectorInt64_clear(self)

    def swap(self, *args):
        """swap(vectorInt64 self, vectorInt64 v)"""
        return _caf.vectorInt64_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorInt64 self) -> std::vector< long long >::allocator_type"""
        return _caf.vectorInt64_get_allocator(self)

    def begin(self):
        """begin(vectorInt64 self) -> std::vector< long long >::iterator"""
        return _caf.vectorInt64_begin(self)

    def end(self):
        """end(vectorInt64 self) -> std::vector< long long >::iterator"""
        return _caf.vectorInt64_end(self)

    def rbegin(self):
        """rbegin(vectorInt64 self) -> std::vector< long long >::reverse_iterator"""
        return _caf.vectorInt64_rbegin(self)

    def rend(self):
        """rend(vectorInt64 self) -> std::vector< long long >::reverse_iterator"""
        return _caf.vectorInt64_rend(self)

    def pop_back(self):
        """pop_back(vectorInt64 self)"""
        return _caf.vectorInt64_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorInt64 self, std::vector< long long >::iterator pos) -> std::vector< long long >::iterator
        erase(vectorInt64 self, std::vector< long long >::iterator first, std::vector< long long >::iterator last) -> std::vector< long long >::iterator
        """
        return _caf.vectorInt64_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(int64_t)> self) -> vectorInt64
        __init__(std::vector<(int64_t)> self, vectorInt64 arg2) -> vectorInt64
        __init__(std::vector<(int64_t)> self, std::vector< long long >::size_type size) -> vectorInt64
        __init__(std::vector<(int64_t)> self, std::vector< long long >::size_type size, std::vector< long long >::value_type const & value) -> vectorInt64
        """
        this = _caf.new_vectorInt64(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorInt64 self, std::vector< long long >::value_type const & x)"""
        return _caf.vectorInt64_push_back(self, *args)

    def front(self):
        """front(vectorInt64 self) -> std::vector< long long >::value_type const &"""
        return _caf.vectorInt64_front(self)

    def back(self):
        """back(vectorInt64 self) -> std::vector< long long >::value_type const &"""
        return _caf.vectorInt64_back(self)

    def assign(self, *args):
        """assign(vectorInt64 self, std::vector< long long >::size_type n, std::vector< long long >::value_type const & x)"""
        return _caf.vectorInt64_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorInt64 self, std::vector< long long >::size_type new_size)
        resize(vectorInt64 self, std::vector< long long >::size_type new_size, std::vector< long long >::value_type const & x)
        """
        return _caf.vectorInt64_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorInt64 self, std::vector< long long >::iterator pos, std::vector< long long >::value_type const & x) -> std::vector< long long >::iterator
        insert(vectorInt64 self, std::vector< long long >::iterator pos, std::vector< long long >::size_type n, std::vector< long long >::value_type const & x)
        """
        return _caf.vectorInt64_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorInt64 self, std::vector< long long >::size_type n)"""
        return _caf.vectorInt64_reserve(self, *args)

    def capacity(self):
        """capacity(vectorInt64 self) -> std::vector< long long >::size_type"""
        return _caf.vectorInt64_capacity(self)

    __swig_destroy__ = _caf.delete_vectorInt64
    __del__ = lambda self : None;
vectorInt64_swigregister = _caf.vectorInt64_swigregister
vectorInt64_swigregister(vectorInt64)

class CafPtr(_object):
    """Proxy of C++ CafPtr class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafPtr, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CafPtr, name)
    kUnknown = _caf.CafPtr_kUnknown
    kInt = _caf.CafPtr_kInt
    kUInt = _caf.CafPtr_kUInt
    kShort = _caf.CafPtr_kShort
    kUShort = _caf.CafPtr_kUShort
    kLong = _caf.CafPtr_kLong
    kULong = _caf.CafPtr_kULong
    kBool = _caf.CafPtr_kBool
    kChar = _caf.CafPtr_kChar
    kUChar = _caf.CafPtr_kUChar
    kFloat = _caf.CafPtr_kFloat
    kDouble = _caf.CafPtr_kDouble
    def __init__(self): 
        """__init__(CafPtr self) -> CafPtr"""
        this = _caf.new_CafPtr()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafPtr
    __del__ = lambda self : None;
    def type(self):
        """type(CafPtr self) -> CafPtr::Type"""
        return _caf.CafPtr_type(self)

    def clear(self):
        """clear(CafPtr self)"""
        return _caf.CafPtr_clear(self)

    def length(self):
        """length(CafPtr self) -> unsigned int"""
        return _caf.CafPtr_length(self)

    def asFloatPtr(self):
        """asFloatPtr(CafPtr self) -> float *"""
        return _caf.CafPtr_asFloatPtr(self)

    def asIntPtr(self):
        """asIntPtr(CafPtr self) -> int *"""
        return _caf.CafPtr_asIntPtr(self)

    def asUIntPtr(self):
        """asUIntPtr(CafPtr self) -> unsigned int *"""
        return _caf.CafPtr_asUIntPtr(self)

    def asShortPtr(self):
        """asShortPtr(CafPtr self) -> short *"""
        return _caf.CafPtr_asShortPtr(self)

    def asUShortPtr(self):
        """asUShortPtr(CafPtr self) -> unsigned short *"""
        return _caf.CafPtr_asUShortPtr(self)

    def asDoublePtr(self):
        """asDoublePtr(CafPtr self) -> double *"""
        return _caf.CafPtr_asDoublePtr(self)

    def asBoolPtr(self):
        """asBoolPtr(CafPtr self) -> bool *"""
        return _caf.CafPtr_asBoolPtr(self)

    def asCharPtr(self):
        """asCharPtr(CafPtr self) -> char *"""
        return _caf.CafPtr_asCharPtr(self)

    def asUCharPtr(self):
        """asUCharPtr(CafPtr self) -> unsigned char *"""
        return _caf.CafPtr_asUCharPtr(self)

    def asLongPtr(self):
        """asLongPtr(CafPtr self) -> long *"""
        return _caf.CafPtr_asLongPtr(self)

    def asULongPtr(self):
        """asULongPtr(CafPtr self) -> unsigned long *"""
        return _caf.CafPtr_asULongPtr(self)

    def asFloatRef(self):
        """asFloatRef(CafPtr self) -> float &"""
        return _caf.CafPtr_asFloatRef(self)

    def asIntRef(self):
        """asIntRef(CafPtr self) -> int &"""
        return _caf.CafPtr_asIntRef(self)

    def asUIntRef(self):
        """asUIntRef(CafPtr self) -> unsigned int &"""
        return _caf.CafPtr_asUIntRef(self)

    def asShortRef(self):
        """asShortRef(CafPtr self) -> short &"""
        return _caf.CafPtr_asShortRef(self)

    def asUShortRef(self):
        """asUShortRef(CafPtr self) -> unsigned short &"""
        return _caf.CafPtr_asUShortRef(self)

    def asDoubleRef(self):
        """asDoubleRef(CafPtr self) -> double &"""
        return _caf.CafPtr_asDoubleRef(self)

    def asBoolRef(self):
        """asBoolRef(CafPtr self) -> bool &"""
        return _caf.CafPtr_asBoolRef(self)

    def asCharRef(self):
        """asCharRef(CafPtr self) -> char &"""
        return _caf.CafPtr_asCharRef(self)

    def asUCharRef(self):
        """asUCharRef(CafPtr self) -> unsigned char &"""
        return _caf.CafPtr_asUCharRef(self)

    def asLongRef(self):
        """asLongRef(CafPtr self) -> long &"""
        return _caf.CafPtr_asLongRef(self)

    def asULongRef(self):
        """asULongRef(CafPtr self) -> unsigned long &"""
        return _caf.CafPtr_asULongRef(self)

    def asFloat(self, i=0):
        """
        asFloat(CafPtr self, unsigned int i=0) -> float
        asFloat(CafPtr self) -> float
        """
        return _caf.CafPtr_asFloat(self, i)

    def asInt(self, i=0):
        """
        asInt(CafPtr self, unsigned int i=0) -> int
        asInt(CafPtr self) -> int
        """
        return _caf.CafPtr_asInt(self, i)

    def asUInt(self, i=0):
        """
        asUInt(CafPtr self, unsigned int i=0) -> unsigned int
        asUInt(CafPtr self) -> unsigned int
        """
        return _caf.CafPtr_asUInt(self, i)

    def asShort(self, i=0):
        """
        asShort(CafPtr self, unsigned int i=0) -> short
        asShort(CafPtr self) -> short
        """
        return _caf.CafPtr_asShort(self, i)

    def asUShort(self, i=0):
        """
        asUShort(CafPtr self, unsigned int i=0) -> unsigned short
        asUShort(CafPtr self) -> unsigned short
        """
        return _caf.CafPtr_asUShort(self, i)

    def asDouble(self, i=0):
        """
        asDouble(CafPtr self, unsigned int i=0) -> double
        asDouble(CafPtr self) -> double
        """
        return _caf.CafPtr_asDouble(self, i)

    def asBool(self, i=0):
        """
        asBool(CafPtr self, unsigned int i=0) -> bool
        asBool(CafPtr self) -> bool
        """
        return _caf.CafPtr_asBool(self, i)

    def asChar(self, i=0):
        """
        asChar(CafPtr self, unsigned int i=0) -> char
        asChar(CafPtr self) -> char
        """
        return _caf.CafPtr_asChar(self, i)

    def asUChar(self, i=0):
        """
        asUChar(CafPtr self, unsigned int i=0) -> unsigned char
        asUChar(CafPtr self) -> unsigned char
        """
        return _caf.CafPtr_asUChar(self, i)

    def asLong(self, i=0):
        """
        asLong(CafPtr self, unsigned int i=0) -> long
        asLong(CafPtr self) -> long
        """
        return _caf.CafPtr_asLong(self, i)

    def asULong(self, i=0):
        """
        asULong(CafPtr self, unsigned int i=0) -> unsigned long
        asULong(CafPtr self) -> unsigned long
        """
        return _caf.CafPtr_asULong(self, i)

    def resize(self, *args):
        """resize(CafPtr self, unsigned int len)"""
        return _caf.CafPtr_resize(self, *args)

    def setFloat(self, *args):
        """
        setFloat(CafPtr self, float v, unsigned int i=0)
        setFloat(CafPtr self, float v)
        """
        return _caf.CafPtr_setFloat(self, *args)

    def setInt(self, *args):
        """
        setInt(CafPtr self, int v, unsigned int i=0)
        setInt(CafPtr self, int v)
        """
        return _caf.CafPtr_setInt(self, *args)

    def setUInt(self, *args):
        """
        setUInt(CafPtr self, unsigned int v, unsigned int i=0)
        setUInt(CafPtr self, unsigned int v)
        """
        return _caf.CafPtr_setUInt(self, *args)

    def setShort(self, *args):
        """
        setShort(CafPtr self, short v, unsigned int i=0)
        setShort(CafPtr self, short v)
        """
        return _caf.CafPtr_setShort(self, *args)

    def setUShort(self, *args):
        """
        setUShort(CafPtr self, unsigned short v, unsigned int i=0)
        setUShort(CafPtr self, unsigned short v)
        """
        return _caf.CafPtr_setUShort(self, *args)

    def setDouble(self, *args):
        """
        setDouble(CafPtr self, double v, unsigned int i=0)
        setDouble(CafPtr self, double v)
        """
        return _caf.CafPtr_setDouble(self, *args)

    def setBool(self, *args):
        """
        setBool(CafPtr self, bool v, unsigned int i=0)
        setBool(CafPtr self, bool v)
        """
        return _caf.CafPtr_setBool(self, *args)

    def setChar(self, *args):
        """
        setChar(CafPtr self, char v, unsigned int i=0)
        setChar(CafPtr self, char v)
        """
        return _caf.CafPtr_setChar(self, *args)

    def setUChar(self, *args):
        """
        setUChar(CafPtr self, unsigned char v, unsigned int i=0)
        setUChar(CafPtr self, unsigned char v)
        """
        return _caf.CafPtr_setUChar(self, *args)

    def setLong(self, *args):
        """
        setLong(CafPtr self, long v, unsigned int i=0)
        setLong(CafPtr self, long v)
        """
        return _caf.CafPtr_setLong(self, *args)

    def setULong(self, *args):
        """
        setULong(CafPtr self, unsigned long v, unsigned int i=0)
        setULong(CafPtr self, unsigned long v)
        """
        return _caf.CafPtr_setULong(self, *args)

    def value(self):
        """value(CafPtr self) -> PyObject *"""
        return _caf.CafPtr_value(self)

    def __str__(self):
        """__str__(CafPtr self) -> PyObject *"""
        return _caf.CafPtr___str__(self)

    def __repr__(self):
        """__repr__(CafPtr self) -> PyObject *"""
        return _caf.CafPtr___repr__(self)

    def __getitem__(self, *args):
        """__getitem__(CafPtr self, int index) -> PyObject *"""
        return _caf.CafPtr___getitem__(self, *args)

    def __len__(self):
        """__len__(CafPtr self) -> int"""
        return _caf.CafPtr___len__(self)

CafPtr_swigregister = _caf.CafPtr_swigregister
CafPtr_swigregister(CafPtr)


def CafTag(*args):
  """CafTag(char a, char b, char c, char d) -> uint32_t"""
  return _caf.CafTag(*args)

def dataLength(*args):
  """dataLength(char const * data) -> int64_t"""
  return _caf.dataLength(*args)
class CafHeader(_object):
    """Proxy of C++ Caf::CafHeader class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafHeader, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CafHeader, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafHeader self) -> CafHeader
        __init__(Caf::CafHeader self, uint32_t tag, unsigned char type, int64_t length, unsigned char compound=cafUndef, 
            unsigned char dimension=cafUndef) -> CafHeader
        __init__(Caf::CafHeader self, uint32_t tag, unsigned char type, int64_t length, unsigned char compound=cafUndef) -> CafHeader
        __init__(Caf::CafHeader self, uint32_t tag, unsigned char type, int64_t length) -> CafHeader
        __init__(Caf::CafHeader self, CafHeader h) -> CafHeader
        """
        this = _caf.new_CafHeader(*args)
        try: self.this.append(this)
        except: self.this = this
    def set(self, *args):
        """
        set(CafHeader self, uint32_t tag, unsigned char type, int64_t length, unsigned char compound=cafUndef, 
            unsigned char dimension=cafUndef)
        set(CafHeader self, uint32_t tag, unsigned char type, int64_t length, unsigned char compound=cafUndef)
        set(CafHeader self, uint32_t tag, unsigned char type, int64_t length)
        """
        return _caf.CafHeader_set(self, *args)

    def tagStr(self):
        """tagStr(CafHeader self) -> std::string"""
        return _caf.CafHeader_tagStr(self)

    def typeStr(self):
        """typeStr(CafHeader self) -> std::string"""
        return _caf.CafHeader_typeStr(self)

    def compoundStr(self):
        """compoundStr(CafHeader self) -> std::string"""
        return _caf.CafHeader_compoundStr(self)

    def dimensionStr(self):
        """dimensionStr(CafHeader self) -> std::string"""
        return _caf.CafHeader_dimensionStr(self)

    __swig_setmethods__["tag_"] = _caf.CafHeader_tag__set
    __swig_getmethods__["tag_"] = _caf.CafHeader_tag__get
    if _newclass:tag_ = _swig_property(_caf.CafHeader_tag__get, _caf.CafHeader_tag__set)
    __swig_setmethods__["type_"] = _caf.CafHeader_type__set
    __swig_getmethods__["type_"] = _caf.CafHeader_type__get
    if _newclass:type_ = _swig_property(_caf.CafHeader_type__get, _caf.CafHeader_type__set)
    __swig_setmethods__["compound_"] = _caf.CafHeader_compound__set
    __swig_getmethods__["compound_"] = _caf.CafHeader_compound__get
    if _newclass:compound_ = _swig_property(_caf.CafHeader_compound__get, _caf.CafHeader_compound__set)
    __swig_setmethods__["dimension_"] = _caf.CafHeader_dimension__set
    __swig_getmethods__["dimension_"] = _caf.CafHeader_dimension__get
    if _newclass:dimension_ = _swig_property(_caf.CafHeader_dimension__get, _caf.CafHeader_dimension__set)
    __swig_setmethods__["res_"] = _caf.CafHeader_res__set
    __swig_getmethods__["res_"] = _caf.CafHeader_res__get
    if _newclass:res_ = _swig_property(_caf.CafHeader_res__get, _caf.CafHeader_res__set)
    __swig_setmethods__["length_"] = _caf.CafHeader_length__set
    __swig_getmethods__["length_"] = _caf.CafHeader_length__get
    if _newclass:length_ = _swig_property(_caf.CafHeader_length__get, _caf.CafHeader_length__set)
    def __str__(self, *args):
        """__str__(CafHeader self) -> char *"""
        return _caf.CafHeader___str__(self, *args)

    def tag(self):
        """tag(CafHeader self) -> uint32_t"""
        return _caf.CafHeader_tag(self)

    def type(self):
        """type(CafHeader self) -> unsigned char"""
        return _caf.CafHeader_type(self)

    def compound(self):
        """compound(CafHeader self) -> unsigned char"""
        return _caf.CafHeader_compound(self)

    def dimension(self):
        """dimension(CafHeader self) -> unsigned char"""
        return _caf.CafHeader_dimension(self)

    def length(self):
        """length(CafHeader self) -> int64_t"""
        return _caf.CafHeader_length(self)

    __swig_destroy__ = _caf.delete_CafHeader
    __del__ = lambda self : None;
CafHeader_swigregister = _caf.CafHeader_swigregister
CafHeader_swigregister(CafHeader)
cvar = _caf.cvar
cafUndef = cvar.cafUndef
cafGroup = cvar.cafGroup
cafCstr = cvar.cafCstr
cafInt32 = cvar.cafInt32
cafFloat = cvar.cafFloat
cafInt64 = cvar.cafInt64
cafDouble = cvar.cafDouble
cafLastType = cvar.cafLastType
cafTypeNames = cvar.cafTypeNames
cafPoint = cvar.cafPoint
cafVector = cvar.cafVector
cafNormal = cvar.cafNormal
cafTransform = cvar.cafTransform
cafColor = cvar.cafColor
cafCompound = cvar.cafCompound
cafLastCompound = cvar.cafLastCompound
cafCompoundNames = cvar.cafCompoundNames
cafScalar = cvar.cafScalar
caf2d = cvar.caf2d
caf3d = cvar.caf3d
caf4d = cvar.caf4d
caf3x3 = cvar.caf3x3
caf4x4 = cvar.caf4x4
cafLastDimension = cvar.cafLastDimension
cafDimensionNames = cvar.cafDimensionNames
META = cvar.META
DOBJ = cvar.DOBJ
SAMS = cvar.SAMS
SAMP = cvar.SAMP
SOBJ = cvar.SOBJ
MESH = cvar.MESH
NRBC = cvar.NRBC
NRBS = cvar.NRBS
XFRM = cvar.XFRM
DATR = cvar.DATR
SATR = cvar.SATR
AATR = cvar.AATR
ATRS = cvar.ATRS
DCAF = cvar.DCAF
NOBJ = cvar.NOBJ
NSAM = cvar.NSAM
FTIM = cvar.FTIM
LTIM = cvar.LTIM
RATE = cvar.RATE
SPAC = cvar.SPAC
WAPP = cvar.WAPP
SFIL = cvar.SFIL
DATE = cvar.DATE
NAME = cvar.NAME
NVTX = cvar.NVTX
TIMS = cvar.TIMS
JSAM = cvar.JSAM
JOBJ = cvar.JOBJ
POSI = cvar.POSI
VELO = cvar.VELO
FREE = cvar.FREE
PCNT = cvar.PCNT
PIDS = cvar.PIDS
MTAG = cvar.MTAG
MSPT = cvar.MSPT
NCNT = cvar.NCNT
NIDS = cvar.NIDS
VPNO = cvar.VPNO
PONO = cvar.PONO
VENO = cvar.VENO
DEGR = cvar.DEGR
FORM = cvar.FORM
KNTU = cvar.KNTU
KNTV = cvar.KNTV
ELOC = cvar.ELOC
LXCS = cvar.LXCS
BBOX = cvar.BBOX
MTRX = cvar.MTRX
MTRN = cvar.MTRN
MTRO = cvar.MTRO
MTTO = cvar.MTTO
INHT = cvar.INHT
TYPE = cvar.TYPE
ATTR = cvar.ATTR

_FILE_OFFSET_BITS = _caf._FILE_OFFSET_BITS
class CafFile(_object):
    """Proxy of C++ Caf::CafFile class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafFile, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CafFile, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafFile self) -> CafFile
        __init__(Caf::CafFile self, char const * filename, char const * mode, bool * succeeded=None) -> CafFile
        __init__(Caf::CafFile self, char const * filename, char const * mode) -> CafFile
        """
        this = _caf.new_CafFile(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafFile
    __del__ = lambda self : None;
    def open(self, *args):
        """open(CafFile self, char const * filename, char const * mode) -> bool"""
        return _caf.CafFile_open(self, *args)

    def close(self):
        """close(CafFile self) -> bool"""
        return _caf.CafFile_close(self)

    def rewind(self):
        """rewind(CafFile self) -> bool"""
        return _caf.CafFile_rewind(self)

    def tell(self, succeeded=None):
        """
        tell(CafFile self, bool * succeeded=None) -> FilePos
        tell(CafFile self) -> FilePos
        """
        return _caf.CafFile_tell(self, succeeded)

    def seek(self, *args):
        """
        seek(CafFile self, FilePos offset, int whence, bool clearOffsets=True) -> bool
        seek(CafFile self, FilePos offset, int whence) -> bool
        """
        return _caf.CafFile_seek(self, *args)

    def isOpen(self):
        """isOpen(CafFile self) -> bool"""
        return _caf.CafFile_isOpen(self)

    def readHeader(self, *args):
        """readHeader(CafFile self, CafHeader header) -> bool"""
        return _caf.CafFile_readHeader(self, *args)

    def skipData(self, *args):
        """skipData(CafFile self, CafHeader header) -> bool"""
        return _caf.CafFile_skipData(self, *args)

    def startGroup(self, *args):
        """startGroup(CafFile self, CafHeader header) -> bool"""
        return _caf.CafFile_startGroup(self, *args)

    def endGroup(self):
        """endGroup(CafFile self) -> bool"""
        return _caf.CafFile_endGroup(self)

    def getLevel(self):
        """getLevel(CafFile self) -> size_t"""
        return _caf.CafFile_getLevel(self)

    def exists(*args):
        """exists(char const * filename) -> bool"""
        return _caf.CafFile_exists(*args)

    if _newclass:exists = staticmethod(exists)
    __swig_getmethods__["exists"] = lambda x: exists
    def isReadable(*args):
        """isReadable(char const * filename) -> bool"""
        return _caf.CafFile_isReadable(*args)

    if _newclass:isReadable = staticmethod(isReadable)
    __swig_getmethods__["isReadable"] = lambda x: isReadable
    def isWritable(*args):
        """isWritable(char const * filename) -> bool"""
        return _caf.CafFile_isWritable(*args)

    if _newclass:isWritable = staticmethod(isWritable)
    __swig_getmethods__["isWritable"] = lambda x: isWritable
    def isCafFile(*args):
        """isCafFile(char const * filename) -> bool"""
        return _caf.CafFile_isCafFile(*args)

    if _newclass:isCafFile = staticmethod(isCafFile)
    __swig_getmethods__["isCafFile"] = lambda x: isCafFile
    def readData(self, *args):
        """
        readData(CafFile self, CafHeader header, void * data) -> bool
        readData(CafFile self, CafHeader header, vectorString data) -> bool
        readData(CafFile self, CafHeader header, std::string & data) -> bool
        readData(CafFile self, CafHeader header, vectorFloat data) -> bool
        readData(CafFile self, CafHeader header, vectorDouble data) -> bool
        readData(CafFile self, CafHeader header, vectorInt32 data) -> bool
        readData(CafFile self, CafHeader header, vectorInt64 data) -> bool
        """
        return _caf.CafFile_readData(self, *args)

    def writeChunk(self, *args):
        """
        writeChunk(CafFile self, CafHeader header, void const * data, FilePos offset=-1) -> bool
        writeChunk(CafFile self, CafHeader header, void const * data) -> bool
        writeChunk(CafFile self, uint32_t tag, vectorString data, FilePos offset=-1, unsigned char compound=cafUndef, 
            unsigned char dimension=cafUndef) -> bool
        writeChunk(CafFile self, uint32_t tag, vectorString data, FilePos offset=-1, unsigned char compound=cafUndef) -> bool
        writeChunk(CafFile self, uint32_t tag, vectorString data, FilePos offset=-1) -> bool
        writeChunk(CafFile self, uint32_t tag, vectorString data) -> bool
        writeChunk(CafFile self, uint32_t tag, std::string const & data, FilePos offset=-1, unsigned char compound=cafUndef, 
            unsigned char dimension=cafUndef) -> bool
        writeChunk(CafFile self, uint32_t tag, std::string const & data, FilePos offset=-1, unsigned char compound=cafUndef) -> bool
        writeChunk(CafFile self, uint32_t tag, std::string const & data, FilePos offset=-1) -> bool
        writeChunk(CafFile self, uint32_t tag, std::string const & data) -> bool
        writeChunk(CafFile self, uint32_t tag, char const * data) -> bool
        writeChunk(CafFile self, uint32_t tag, std::string const & data, off64_t offset=-1) -> bool
        writeChunk(CafFile self, uint32_t tag, vectorString data, off64_t offset=-1) -> bool
        """
        return _caf.CafFile_writeChunk(self, *args)

    def writeChunkFloat(self, *args):
        """
        writeChunkFloat(CafFile self, uint32_t tag, vectorFloat data, off64_t offset=-1) -> bool
        writeChunkFloat(CafFile self, uint32_t tag, vectorFloat data) -> bool
        """
        return _caf.CafFile_writeChunkFloat(self, *args)

    def writeChunkDouble(self, *args):
        """
        writeChunkDouble(CafFile self, uint32_t tag, vectorDouble data, off64_t offset=-1) -> bool
        writeChunkDouble(CafFile self, uint32_t tag, vectorDouble data) -> bool
        """
        return _caf.CafFile_writeChunkDouble(self, *args)

    def writeChunkInt32(self, *args):
        """
        writeChunkInt32(CafFile self, uint32_t tag, vectorInt32 data, off64_t offset=-1) -> bool
        writeChunkInt32(CafFile self, uint32_t tag, vectorInt32 data) -> bool
        """
        return _caf.CafFile_writeChunkInt32(self, *args)

    def writeChunkInt64(self, *args):
        """
        writeChunkInt64(CafFile self, uint32_t tag, vectorInt64 data, off64_t offset=-1) -> bool
        writeChunkInt64(CafFile self, uint32_t tag, vectorInt64 data) -> bool
        """
        return _caf.CafFile_writeChunkInt64(self, *args)

CafFile_swigregister = _caf.CafFile_swigregister
CafFile_swigregister(CafFile)

def CafFile_exists(*args):
  """CafFile_exists(char const * filename) -> bool"""
  return _caf.CafFile_exists(*args)

def CafFile_isReadable(*args):
  """CafFile_isReadable(char const * filename) -> bool"""
  return _caf.CafFile_isReadable(*args)

def CafFile_isWritable(*args):
  """CafFile_isWritable(char const * filename) -> bool"""
  return _caf.CafFile_isWritable(*args)

def CafFile_isCafFile(*args):
  """CafFile_isCafFile(char const * filename) -> bool"""
  return _caf.CafFile_isCafFile(*args)

class CafChunk(_object):
    """Proxy of C++ Caf::CafChunk class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CafChunk, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafChunk self) -> CafChunk
        __init__(Caf::CafChunk self, CafHeader header) -> CafChunk
        """
        this = _caf.new_CafChunk(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafChunk
    __del__ = lambda self : None;
    def create(*args):
        """create(uint32_t tag, unsigned char type) -> CafChunk"""
        return _caf.CafChunk_create(*args)

    if _newclass:create = staticmethod(create)
    __swig_getmethods__["create"] = lambda x: create
    def copy(*args):
        """copy(CafChunk chunk) -> CafChunk"""
        return _caf.CafChunk_copy(*args)

    if _newclass:copy = staticmethod(copy)
    __swig_getmethods__["copy"] = lambda x: copy
    def reset(self):
        """reset(CafChunk self)"""
        return _caf.CafChunk_reset(self)

    def getTag(self):
        """getTag(CafChunk self) -> uint32_t"""
        return _caf.CafChunk_getTag(self)

    def getType(self):
        """getType(CafChunk self) -> unsigned char"""
        return _caf.CafChunk_getType(self)

    def getCompound(self):
        """getCompound(CafChunk self) -> unsigned char"""
        return _caf.CafChunk_getCompound(self)

    def getDimension(self):
        """getDimension(CafChunk self) -> unsigned char"""
        return _caf.CafChunk_getDimension(self)

    def free(self):
        """free(CafChunk self)"""
        return _caf.CafChunk_free(self)

    def getHeader(self):
        """getHeader(CafChunk self) -> CafHeader"""
        return _caf.CafChunk_getHeader(self)

    def getLength(self):
        """getLength(CafChunk self) -> int64_t"""
        return _caf.CafChunk_getLength(self)

    def read(self, *args):
        """read(CafChunk self, CafHeader header, CafFile file) -> bool"""
        return _caf.CafChunk_read(self, *args)

    def write(self, *args):
        """write(CafChunk self, CafFile file) -> bool"""
        return _caf.CafChunk_write(self, *args)

    def __str__(self, *args):
        """__str__(CafChunk self) -> char *"""
        return _caf.CafChunk___str__(self, *args)

    def toCafGroupChunk(self):
        """toCafGroupChunk(CafChunk self) -> CafGroupChunk"""
        return _caf.CafChunk_toCafGroupChunk(self)

    def toCafLeafChunkString(self):
        """toCafLeafChunkString(CafChunk self) -> CafLeafChunkString"""
        return _caf.CafChunk_toCafLeafChunkString(self)

    def toCafLeafChunkFloat(self):
        """toCafLeafChunkFloat(CafChunk self) -> CafLeafChunkFloat"""
        return _caf.CafChunk_toCafLeafChunkFloat(self)

    def toCafLeafChunkDouble(self):
        """toCafLeafChunkDouble(CafChunk self) -> CafLeafChunkDouble"""
        return _caf.CafChunk_toCafLeafChunkDouble(self)

    def toCafLeafChunkInt32(self):
        """toCafLeafChunkInt32(CafChunk self) -> CafLeafChunkInt32"""
        return _caf.CafChunk_toCafLeafChunkInt32(self)

    def toCafLeafChunkInt64(self):
        """toCafLeafChunkInt64(CafChunk self) -> CafLeafChunkInt64"""
        return _caf.CafChunk_toCafLeafChunkInt64(self)

CafChunk_swigregister = _caf.CafChunk_swigregister
CafChunk_swigregister(CafChunk)

def CafChunk_create(*args):
  """CafChunk_create(uint32_t tag, unsigned char type) -> CafChunk"""
  return _caf.CafChunk_create(*args)

def CafChunk_copy(*args):
  """CafChunk_copy(CafChunk chunk) -> CafChunk"""
  return _caf.CafChunk_copy(*args)


def __lshift__(*args):
  """
    __lshift__(std::ostream & os, CafHeader h) -> std::ostream
    __lshift__(std::ostream & os, CafChunk c) -> std::ostream &
    """
  return _caf.__lshift__(*args)
class CafGroupChunk(CafChunk):
    """Proxy of C++ Caf::CafGroupChunk class"""
    __swig_setmethods__ = {}
    for _s in [CafChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafGroupChunk, name, value)
    __swig_getmethods__ = {}
    for _s in [CafChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafGroupChunk, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafGroupChunk self) -> CafGroupChunk
        __init__(Caf::CafGroupChunk self, uint32_t tag) -> CafGroupChunk
        """
        this = _caf.new_CafGroupChunk(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafGroupChunk
    __del__ = lambda self : None;
    def reset(self):
        """reset(CafGroupChunk self)"""
        return _caf.CafGroupChunk_reset(self)

    def addChild(self, *args):
        """addChild(CafGroupChunk self, CafChunk child)"""
        args[1].thisown = 0


        return _caf.CafGroupChunk_addChild(self, *args)

    def numChildren(self):
        """numChildren(CafGroupChunk self) -> Caf::CafGroupChunk::size_type"""
        return _caf.CafGroupChunk_numChildren(self)

    def removeChild(self, *args):
        """removeChild(CafGroupChunk self, Caf::CafGroupChunk::size_type i)"""
        return _caf.CafGroupChunk_removeChild(self, *args)

    def removeChildren(self, *args):
        """removeChildren(CafGroupChunk self, Caf::CafGroupChunk::size_type s, Caf::CafGroupChunk::size_type e)"""
        return _caf.CafGroupChunk_removeChildren(self, *args)

    def removeAllChildren(self):
        """removeAllChildren(CafGroupChunk self)"""
        return _caf.CafGroupChunk_removeAllChildren(self)

    def getChild(self, *args):
        """
        getChild(CafGroupChunk self, Caf::CafGroupChunk::size_type i) -> CafChunk
        getChild(CafGroupChunk self, Caf::CafGroupChunk::size_type i) -> CafChunk
        """
        return _caf.CafGroupChunk_getChild(self, *args)

    def findChild(self, *args):
        """
        findChild(CafGroupChunk self, uint32_t tag, Caf::CafGroupChunk::size_type pos=0) -> Caf::CafGroupChunk::size_type
        findChild(CafGroupChunk self, uint32_t tag) -> Caf::CafGroupChunk::size_type
        """
        return _caf.CafGroupChunk_findChild(self, *args)

    def read(self, *args):
        """read(CafGroupChunk self, CafHeader header, CafFile file) -> bool"""
        return _caf.CafGroupChunk_read(self, *args)

    def write(self, *args):
        """write(CafGroupChunk self, CafFile file) -> bool"""
        return _caf.CafGroupChunk_write(self, *args)

CafGroupChunk_swigregister = _caf.CafGroupChunk_swigregister
CafGroupChunk_swigregister(CafGroupChunk)

class CafDCAFChunk(CafChunk):
    """Proxy of C++ Caf::CafDCAFChunk class"""
    __swig_setmethods__ = {}
    for _s in [CafChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafDCAFChunk, name, value)
    __swig_getmethods__ = {}
    for _s in [CafChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafDCAFChunk, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafDCAFChunk self) -> CafDCAFChunk
        __init__(Caf::CafDCAFChunk self, int64_t version) -> CafDCAFChunk
        """
        this = _caf.new_CafDCAFChunk(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafDCAFChunk
    __del__ = lambda self : None;
    def reset(self):
        """reset(CafDCAFChunk self)"""
        return _caf.CafDCAFChunk_reset(self)

    def read(self, *args):
        """read(CafDCAFChunk self, CafHeader header, CafFile file) -> bool"""
        return _caf.CafDCAFChunk_read(self, *args)

    def write(self, *args):
        """write(CafDCAFChunk self, CafFile file) -> bool"""
        return _caf.CafDCAFChunk_write(self, *args)

    __swig_setmethods__["version_"] = _caf.CafDCAFChunk_version__set
    __swig_getmethods__["version_"] = _caf.CafDCAFChunk_version__get
    if _newclass:version_ = _swig_property(_caf.CafDCAFChunk_version__get, _caf.CafDCAFChunk_version__set)
CafDCAFChunk_swigregister = _caf.CafDCAFChunk_swigregister
CafDCAFChunk_swigregister(CafDCAFChunk)

class CafSATRChunk(CafGroupChunk):
    """Proxy of C++ Caf::CafSATRChunk class"""
    __swig_setmethods__ = {}
    for _s in [CafGroupChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafSATRChunk, name, value)
    __swig_getmethods__ = {}
    for _s in [CafGroupChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafSATRChunk, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
CafSATRChunk_swigregister = _caf.CafSATRChunk_swigregister
CafSATRChunk_swigregister(CafSATRChunk)

class CafAATRChunk(CafGroupChunk):
    """Proxy of C++ Caf::CafAATRChunk class"""
    __swig_setmethods__ = {}
    for _s in [CafGroupChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafAATRChunk, name, value)
    __swig_getmethods__ = {}
    for _s in [CafGroupChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafAATRChunk, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
CafAATRChunk_swigregister = _caf.CafAATRChunk_swigregister
CafAATRChunk_swigregister(CafAATRChunk)

class CafATRSChunk(CafGroupChunk):
    """Proxy of C++ Caf::CafATRSChunk class"""
    __swig_setmethods__ = {}
    for _s in [CafGroupChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafATRSChunk, name, value)
    __swig_getmethods__ = {}
    for _s in [CafGroupChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafATRSChunk, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
CafATRSChunk_swigregister = _caf.CafATRSChunk_swigregister
CafATRSChunk_swigregister(CafATRSChunk)

class CafDATRChunk(CafGroupChunk):
    """Proxy of C++ Caf::CafDATRChunk class"""
    __swig_setmethods__ = {}
    for _s in [CafGroupChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafDATRChunk, name, value)
    __swig_getmethods__ = {}
    for _s in [CafGroupChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafDATRChunk, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def addAnimatedAttribute(self, *args):
        """
        addAnimatedAttribute(CafDATRChunk self, std::string const & name, std::string const & appType="")
        addAnimatedAttribute(CafDATRChunk self, std::string const & name)
        """
        return _caf.CafDATRChunk_addAnimatedAttribute(self, *args)

    def addAttr(self, *args):
        """
        addAttr(CafDATRChunk self, bool const & animated, std::string const & name, std::string const & appType, unsigned char dataType=cafUndef, 
            unsigned char cafCompound=cafUndef, unsigned char cafDimen=cafUndef) -> int
        addAttr(CafDATRChunk self, bool const & animated, std::string const & name, std::string const & appType, unsigned char dataType=cafUndef, 
            unsigned char cafCompound=cafUndef) -> int
        addAttr(CafDATRChunk self, bool const & animated, std::string const & name, std::string const & appType, unsigned char dataType=cafUndef) -> int
        addAttr(CafDATRChunk self, bool const & animated, std::string const & name, std::string const & appType) -> int
        """
        return _caf.CafDATRChunk_addAttr(self, *args)

    def getStaticData(self, *args):
        """getStaticData(CafDATRChunk self, int index) -> CafChunk"""
        return _caf.CafDATRChunk_getStaticData(self, *args)

    def removeStaticAttrs(self, *args):
        """removeStaticAttrs(CafDATRChunk self, int index, int num) -> bool"""
        return _caf.CafDATRChunk_removeStaticAttrs(self, *args)

    def mergeStaticAttributes(self, *args):
        """mergeStaticAttributes(CafDATRChunk self, CafDATRChunk fromDATR)"""
        return _caf.CafDATRChunk_mergeStaticAttributes(self, *args)

    def getAnimatedDataIndex(self, *args):
        """getAnimatedDataIndex(CafDATRChunk self, int index) -> int"""
        return _caf.CafDATRChunk_getAnimatedDataIndex(self, *args)

    def removeAnimatedAttrs(self, *args):
        """removeAnimatedAttrs(CafDATRChunk self, int index, int num) -> int"""
        return _caf.CafDATRChunk_removeAnimatedAttrs(self, *args)

    def getNumAttrs(self):
        """getNumAttrs(CafDATRChunk self) -> int"""
        return _caf.CafDATRChunk_getNumAttrs(self)

    def getNumStaticAttrs(self):
        """getNumStaticAttrs(CafDATRChunk self) -> int"""
        return _caf.CafDATRChunk_getNumStaticAttrs(self)

    def getNumAnimatedAttrs(self):
        """getNumAnimatedAttrs(CafDATRChunk self) -> int"""
        return _caf.CafDATRChunk_getNumAnimatedAttrs(self)

    def isAnimated(self, *args):
        """isAnimated(CafDATRChunk self, int index) -> bool"""
        return _caf.CafDATRChunk_isAnimated(self, *args)

    def getAttrName(self, *args):
        """getAttrName(CafDATRChunk self, int const index) -> std::string const &"""
        return _caf.CafDATRChunk_getAttrName(self, *args)

    def setAttrName(self, *args):
        """setAttrName(CafDATRChunk self, int const index, std::string const & name) -> bool"""
        return _caf.CafDATRChunk_setAttrName(self, *args)

    def getAttrType(self, *args):
        """getAttrType(CafDATRChunk self, int const index) -> std::string const &"""
        return _caf.CafDATRChunk_getAttrType(self, *args)

    def setAttrType(self, *args):
        """setAttrType(CafDATRChunk self, int const index, std::string const & type) -> bool"""
        return _caf.CafDATRChunk_setAttrType(self, *args)

    def findAttr(self, *args):
        """findAttr(CafDATRChunk self, std::string const & name) -> int"""
        return _caf.CafDATRChunk_findAttr(self, *args)

    def addStaticAttributeString(self, *args):
        """
        addStaticAttributeString(CafDATRChunk self, std::string const & theName, vectorString data, std::string const & appType="", unsigned char cafCompound=cafUndef, 
            unsigned char cafDimen=cafUndef) -> CafLeafChunkString
        addStaticAttributeString(CafDATRChunk self, std::string const & theName, vectorString data, std::string const & appType="", unsigned char cafCompound=cafUndef) -> CafLeafChunkString
        addStaticAttributeString(CafDATRChunk self, std::string const & theName, vectorString data, std::string const & appType="") -> CafLeafChunkString
        addStaticAttributeString(CafDATRChunk self, std::string const & theName, vectorString data) -> CafLeafChunkString
        """
        return _caf.CafDATRChunk_addStaticAttributeString(self, *args)

    def addStaticAttributeFloat(self, *args):
        """
        addStaticAttributeFloat(CafDATRChunk self, std::string const & theName, vectorFloat data, std::string const & appType="", unsigned char cafCompound=cafUndef, 
            unsigned char cafDimen=cafUndef) -> CafLeafChunkFloat
        addStaticAttributeFloat(CafDATRChunk self, std::string const & theName, vectorFloat data, std::string const & appType="", unsigned char cafCompound=cafUndef) -> CafLeafChunkFloat
        addStaticAttributeFloat(CafDATRChunk self, std::string const & theName, vectorFloat data, std::string const & appType="") -> CafLeafChunkFloat
        addStaticAttributeFloat(CafDATRChunk self, std::string const & theName, vectorFloat data) -> CafLeafChunkFloat
        """
        return _caf.CafDATRChunk_addStaticAttributeFloat(self, *args)

    def addStaticAttributeDouble(self, *args):
        """
        addStaticAttributeDouble(CafDATRChunk self, std::string const & theName, vectorDouble data, std::string const & appType="", unsigned char cafCompound=cafUndef, 
            unsigned char cafDimen=cafUndef) -> CafLeafChunkDouble
        addStaticAttributeDouble(CafDATRChunk self, std::string const & theName, vectorDouble data, std::string const & appType="", unsigned char cafCompound=cafUndef) -> CafLeafChunkDouble
        addStaticAttributeDouble(CafDATRChunk self, std::string const & theName, vectorDouble data, std::string const & appType="") -> CafLeafChunkDouble
        addStaticAttributeDouble(CafDATRChunk self, std::string const & theName, vectorDouble data) -> CafLeafChunkDouble
        """
        return _caf.CafDATRChunk_addStaticAttributeDouble(self, *args)

    def addStaticAttributeInt32(self, *args):
        """
        addStaticAttributeInt32(CafDATRChunk self, std::string const & theName, vectorInt32 data, std::string const & appType="", unsigned char cafCompound=cafUndef, 
            unsigned char cafDimen=cafUndef) -> CafLeafChunkInt32
        addStaticAttributeInt32(CafDATRChunk self, std::string const & theName, vectorInt32 data, std::string const & appType="", unsigned char cafCompound=cafUndef) -> CafLeafChunkInt32
        addStaticAttributeInt32(CafDATRChunk self, std::string const & theName, vectorInt32 data, std::string const & appType="") -> CafLeafChunkInt32
        addStaticAttributeInt32(CafDATRChunk self, std::string const & theName, vectorInt32 data) -> CafLeafChunkInt32
        """
        return _caf.CafDATRChunk_addStaticAttributeInt32(self, *args)

    def addStaticAttributeInt64(self, *args):
        """
        addStaticAttributeInt64(CafDATRChunk self, std::string const & theName, vectorInt64 data, std::string const & appType="", unsigned char cafCompound=cafUndef, 
            unsigned char cafDimen=cafUndef) -> CafLeafChunkInt64
        addStaticAttributeInt64(CafDATRChunk self, std::string const & theName, vectorInt64 data, std::string const & appType="", unsigned char cafCompound=cafUndef) -> CafLeafChunkInt64
        addStaticAttributeInt64(CafDATRChunk self, std::string const & theName, vectorInt64 data, std::string const & appType="") -> CafLeafChunkInt64
        addStaticAttributeInt64(CafDATRChunk self, std::string const & theName, vectorInt64 data) -> CafLeafChunkInt64
        """
        return _caf.CafDATRChunk_addStaticAttributeInt64(self, *args)

CafDATRChunk_swigregister = _caf.CafDATRChunk_swigregister
CafDATRChunk_swigregister(CafDATRChunk)

class CafDOBJChunk(CafGroupChunk):
    """Proxy of C++ Caf::CafDOBJChunk class"""
    __swig_setmethods__ = {}
    for _s in [CafGroupChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafDOBJChunk, name, value)
    __swig_getmethods__ = {}
    for _s in [CafGroupChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafDOBJChunk, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafDOBJChunk self) -> CafDOBJChunk
        __init__(Caf::CafDOBJChunk self, char const * name) -> CafDOBJChunk
        """
        this = _caf.new_CafDOBJChunk(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafDOBJChunk
    __del__ = lambda self : None;
    def reset(self):
        """reset(CafDOBJChunk self)"""
        return _caf.CafDOBJChunk_reset(self)

    def getName(self):
        """getName(CafDOBJChunk self) -> std::string"""
        return _caf.CafDOBJChunk_getName(self)

    def getDATR(self):
        """getDATR(CafDOBJChunk self) -> CafDATRChunk"""
        return _caf.CafDOBJChunk_getDATR(self)

    def addDATR(self):
        """addDATR(CafDOBJChunk self) -> CafDATRChunk"""
        return _caf.CafDOBJChunk_addDATR(self)

    def addAttr(self, *args):
        """
        addAttr(CafDOBJChunk self, bool const & animated, std::string const & name, std::string const & type, unsigned char dataType=cafUndef, 
            unsigned char cafCompound=cafUndef, unsigned char cafDimen=cafUndef) -> int
        addAttr(CafDOBJChunk self, bool const & animated, std::string const & name, std::string const & type, unsigned char dataType=cafUndef, 
            unsigned char cafCompound=cafUndef) -> int
        addAttr(CafDOBJChunk self, bool const & animated, std::string const & name, std::string const & type, unsigned char dataType=cafUndef) -> int
        addAttr(CafDOBJChunk self, bool const & animated, std::string const & name, std::string const & type) -> int
        """
        return _caf.CafDOBJChunk_addAttr(self, *args)

    def getNumAttrs(self):
        """getNumAttrs(CafDOBJChunk self) -> int"""
        return _caf.CafDOBJChunk_getNumAttrs(self)

    def isAttrAnimated(self, *args):
        """isAttrAnimated(CafDOBJChunk self, int attrIndex) -> bool"""
        return _caf.CafDOBJChunk_isAttrAnimated(self, *args)

    def findAttr(self, *args):
        """findAttr(CafDOBJChunk self, std::string const & name) -> int"""
        return _caf.CafDOBJChunk_findAttr(self, *args)

    def getAttrName(self, *args):
        """getAttrName(CafDOBJChunk self, int const attrIndex) -> std::string const"""
        return _caf.CafDOBJChunk_getAttrName(self, *args)

    def setAttrName(self, *args):
        """setAttrName(CafDOBJChunk self, int const attrIndex, std::string const & name) -> bool"""
        return _caf.CafDOBJChunk_setAttrName(self, *args)

    def getAttrType(self, *args):
        """getAttrType(CafDOBJChunk self, int const attrIndex) -> std::string const"""
        return _caf.CafDOBJChunk_getAttrType(self, *args)

    def setAttrType(self, *args):
        """setAttrType(CafDOBJChunk self, int const attrIndex, std::string const & type) -> bool"""
        return _caf.CafDOBJChunk_setAttrType(self, *args)

    def removeAllChildren(self):
        """removeAllChildren(CafDOBJChunk self)"""
        return _caf.CafDOBJChunk_removeAllChildren(self)

    def removeDATR(self):
        """removeDATR(CafDOBJChunk self)"""
        return _caf.CafDOBJChunk_removeDATR(self)

    def getLength(self):
        """getLength(CafDOBJChunk self) -> int64_t"""
        return _caf.CafDOBJChunk_getLength(self)

    __swig_setmethods__["name_"] = _caf.CafDOBJChunk_name__set
    __swig_getmethods__["name_"] = _caf.CafDOBJChunk_name__get
    if _newclass:name_ = _swig_property(_caf.CafDOBJChunk_name__get, _caf.CafDOBJChunk_name__set)
    __swig_setmethods__["datr_"] = _caf.CafDOBJChunk_datr__set
    __swig_getmethods__["datr_"] = _caf.CafDOBJChunk_datr__get
    if _newclass:datr_ = _swig_property(_caf.CafDOBJChunk_datr__get, _caf.CafDOBJChunk_datr__set)
CafDOBJChunk_swigregister = _caf.CafDOBJChunk_swigregister
CafDOBJChunk_swigregister(CafDOBJChunk)

class CafMETAChunk(CafGroupChunk):
    """Proxy of C++ Caf::CafMETAChunk class"""
    __swig_setmethods__ = {}
    for _s in [CafGroupChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafMETAChunk, name, value)
    __swig_getmethods__ = {}
    for _s in [CafGroupChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafMETAChunk, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Caf::CafMETAChunk self) -> CafMETAChunk"""
        this = _caf.new_CafMETAChunk()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafMETAChunk
    __del__ = lambda self : None;
    def reset(self):
        """reset(CafMETAChunk self)"""
        return _caf.CafMETAChunk_reset(self)

    def addDOBJ(self, *args):
        """addDOBJ(CafMETAChunk self, char const * name) -> CafDOBJChunk"""
        return _caf.CafMETAChunk_addDOBJ(self, *args)

    def removeAllChildren(self):
        """removeAllChildren(CafMETAChunk self)"""
        return _caf.CafMETAChunk_removeAllChildren(self)

    def removeAllDOBJs(self):
        """removeAllDOBJs(CafMETAChunk self)"""
        return _caf.CafMETAChunk_removeAllDOBJs(self)

    def getNumObjects(self):
        """getNumObjects(CafMETAChunk self) -> int64_t"""
        return _caf.CafMETAChunk_getNumObjects(self)

    def getLength(self):
        """getLength(CafMETAChunk self) -> int64_t"""
        return _caf.CafMETAChunk_getLength(self)

    __swig_setmethods__["numSamples_"] = _caf.CafMETAChunk_numSamples__set
    __swig_getmethods__["numSamples_"] = _caf.CafMETAChunk_numSamples__get
    if _newclass:numSamples_ = _swig_property(_caf.CafMETAChunk_numSamples__get, _caf.CafMETAChunk_numSamples__set)
    __swig_setmethods__["firstTime_"] = _caf.CafMETAChunk_firstTime__set
    __swig_getmethods__["firstTime_"] = _caf.CafMETAChunk_firstTime__get
    if _newclass:firstTime_ = _swig_property(_caf.CafMETAChunk_firstTime__get, _caf.CafMETAChunk_firstTime__set)
    __swig_setmethods__["lastTime_"] = _caf.CafMETAChunk_lastTime__set
    __swig_getmethods__["lastTime_"] = _caf.CafMETAChunk_lastTime__get
    if _newclass:lastTime_ = _swig_property(_caf.CafMETAChunk_lastTime__get, _caf.CafMETAChunk_lastTime__set)
    __swig_setmethods__["rate_"] = _caf.CafMETAChunk_rate__set
    __swig_getmethods__["rate_"] = _caf.CafMETAChunk_rate__get
    if _newclass:rate_ = _swig_property(_caf.CafMETAChunk_rate__get, _caf.CafMETAChunk_rate__set)
    __swig_setmethods__["space_"] = _caf.CafMETAChunk_space__set
    __swig_getmethods__["space_"] = _caf.CafMETAChunk_space__get
    if _newclass:space_ = _swig_property(_caf.CafMETAChunk_space__get, _caf.CafMETAChunk_space__set)
    __swig_setmethods__["objDefs_"] = _caf.CafMETAChunk_objDefs__set
    __swig_getmethods__["objDefs_"] = _caf.CafMETAChunk_objDefs__get
    if _newclass:objDefs_ = _swig_property(_caf.CafMETAChunk_objDefs__get, _caf.CafMETAChunk_objDefs__set)
    __swig_setmethods__["application_"] = _caf.CafMETAChunk_application__set
    __swig_getmethods__["application_"] = _caf.CafMETAChunk_application__get
    if _newclass:application_ = _swig_property(_caf.CafMETAChunk_application__get, _caf.CafMETAChunk_application__set)
    __swig_setmethods__["sourceFile_"] = _caf.CafMETAChunk_sourceFile__set
    __swig_getmethods__["sourceFile_"] = _caf.CafMETAChunk_sourceFile__get
    if _newclass:sourceFile_ = _swig_property(_caf.CafMETAChunk_sourceFile__get, _caf.CafMETAChunk_sourceFile__set)
    __swig_setmethods__["dateStamp_"] = _caf.CafMETAChunk_dateStamp__set
    __swig_getmethods__["dateStamp_"] = _caf.CafMETAChunk_dateStamp__get
    if _newclass:dateStamp_ = _swig_property(_caf.CafMETAChunk_dateStamp__get, _caf.CafMETAChunk_dateStamp__set)
    def numSamples(self):
        """numSamples(CafMETAChunk self) -> int64_t &"""
        return _caf.CafMETAChunk_numSamples(self)

    def space(self):
        """space(CafMETAChunk self) -> int64_t &"""
        return _caf.CafMETAChunk_space(self)

    def dateStamp(self):
        """dateStamp(CafMETAChunk self) -> int64_t &"""
        return _caf.CafMETAChunk_dateStamp(self)

    def rate(self):
        """rate(CafMETAChunk self) -> float &"""
        return _caf.CafMETAChunk_rate(self)

    def firstTime(self):
        """firstTime(CafMETAChunk self) -> float &"""
        return _caf.CafMETAChunk_firstTime(self)

    def lastTime(self):
        """lastTime(CafMETAChunk self) -> float &"""
        return _caf.CafMETAChunk_lastTime(self)

    def appication(self):
        """appication(CafMETAChunk self) -> std::string &"""
        return _caf.CafMETAChunk_appication(self)

    def sourceFile(self):
        """sourceFile(CafMETAChunk self) -> std::string &"""
        return _caf.CafMETAChunk_sourceFile(self)

    def objDefs(self):
        """objDefs(CafMETAChunk self) -> vectorDOBJChunk"""
        return _caf.CafMETAChunk_objDefs(self)

CafMETAChunk_swigregister = _caf.CafMETAChunk_swigregister
CafMETAChunk_swigregister(CafMETAChunk)
cafWorld = cvar.cafWorld
cafObject = cvar.cafObject

class CafSAMSChunk(CafGroupChunk):
    """Proxy of C++ Caf::CafSAMSChunk class"""
    __swig_setmethods__ = {}
    for _s in [CafGroupChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafSAMSChunk, name, value)
    __swig_getmethods__ = {}
    for _s in [CafGroupChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafSAMSChunk, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Caf::CafSAMSChunk self) -> CafSAMSChunk"""
        this = _caf.new_CafSAMSChunk()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafSAMSChunk
    __del__ = lambda self : None;
    def reset(self):
        """reset(CafSAMSChunk self)"""
        return _caf.CafSAMSChunk_reset(self)

    def read(self, *args):
        """read(CafSAMSChunk self, CafHeader header, CafFile file) -> bool"""
        return _caf.CafSAMSChunk_read(self, *args)

    def write(self, *args):
        """write(CafSAMSChunk self, CafFile file) -> bool"""
        return _caf.CafSAMSChunk_write(self, *args)

    def writeStart(self, *args):
        """writeStart(CafSAMSChunk self, CafFile file, int64_t numSamples, int64_t numReservedSamples, bool nonUniformSamples) -> bool"""
        return _caf.CafSAMSChunk_writeStart(self, *args)

    def appendStart(self, *args):
        """appendStart(CafSAMSChunk self, CafFile file, int64_t numSamplesToAppend) -> bool"""
        return _caf.CafSAMSChunk_appendStart(self, *args)

    def writeEnd(self, *args):
        """writeEnd(CafSAMSChunk self, CafFile file) -> bool"""
        return _caf.CafSAMSChunk_writeEnd(self, *args)

    def writeStartSAMPChunk(self, *args):
        """
        writeStartSAMPChunk(CafSAMSChunk self, CafFile file, int64_t numObjects, float * time=None) -> bool
        writeStartSAMPChunk(CafSAMSChunk self, CafFile file, int64_t numObjects) -> bool
        """
        return _caf.CafSAMSChunk_writeStartSAMPChunk(self, *args)

    def writeEndSAMPChunk(self, *args):
        """writeEndSAMPChunk(CafSAMSChunk self, CafFile file) -> bool"""
        return _caf.CafSAMSChunk_writeEndSAMPChunk(self, *args)

    def writeStartSOBJChunk(self, *args):
        """writeStartSOBJChunk(CafSAMSChunk self, CafFile file) -> bool"""
        return _caf.CafSAMSChunk_writeStartSOBJChunk(self, *args)

    def writeSOBJChunk(self, *args):
        """writeSOBJChunk(CafSAMSChunk self, CafFile file, CafGroupChunk sobjChunk) -> bool"""
        return _caf.CafSAMSChunk_writeSOBJChunk(self, *args)

    def writeEndSOBJChunk(self, *args):
        """writeEndSOBJChunk(CafSAMSChunk self, CafFile file) -> bool"""
        return _caf.CafSAMSChunk_writeEndSOBJChunk(self, *args)

CafSAMSChunk_swigregister = _caf.CafSAMSChunk_swigregister
CafSAMSChunk_swigregister(CafSAMSChunk)

class CafCache(_object):
    """Proxy of C++ Caf::CafCache class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafCache, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CafCache, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafCache self) -> CafCache
        __init__(Caf::CafCache self, char const * filename, bool keepOpen, bool * succeeded=None) -> CafCache
        __init__(Caf::CafCache self, char const * filename, bool keepOpen) -> CafCache
        """
        this = _caf.new_CafCache(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafCache
    __del__ = lambda self : None;
    def reset(self):
        """reset(CafCache self)"""
        return _caf.CafCache_reset(self)

    def load(self, *args):
        """load(CafCache self, char const * filename, bool keepOpen) -> bool"""
        return _caf.CafCache_load(self, *args)

    def getFilename(self):
        """getFilename(CafCache self) -> std::string const &"""
        return _caf.CafCache_getFilename(self)

    def close(self):
        """close(CafCache self) -> bool"""
        return _caf.CafCache_close(self)

    def setKeepOpen(self, *args):
        """setKeepOpen(CafCache self, bool keepOpen) -> bool"""
        return _caf.CafCache_setKeepOpen(self, *args)

    def getKeepOpen(self):
        """getKeepOpen(CafCache self) -> bool"""
        return _caf.CafCache_getKeepOpen(self)

    def getVersion(self):
        """getVersion(CafCache self) -> int"""
        return _caf.CafCache_getVersion(self)

    def getNumObjects(self):
        """getNumObjects(CafCache self) -> int"""
        return _caf.CafCache_getNumObjects(self)

    def getNumSamples(self):
        """getNumSamples(CafCache self) -> int"""
        return _caf.CafCache_getNumSamples(self)

    def getFirstTime(self):
        """getFirstTime(CafCache self) -> float"""
        return _caf.CafCache_getFirstTime(self)

    def getLastTime(self):
        """getLastTime(CafCache self) -> float"""
        return _caf.CafCache_getLastTime(self)

    def getRate(self):
        """getRate(CafCache self) -> float"""
        return _caf.CafCache_getRate(self)

    def isNonUniform(self):
        """isNonUniform(CafCache self) -> bool"""
        return _caf.CafCache_isNonUniform(self)

    def getSpace(self):
        """getSpace(CafCache self) -> int"""
        return _caf.CafCache_getSpace(self)

    def getApplication(self):
        """getApplication(CafCache self) -> std::string const &"""
        return _caf.CafCache_getApplication(self)

    def getSourceFile(self):
        """getSourceFile(CafCache self) -> std::string const &"""
        return _caf.CafCache_getSourceFile(self)

    def getDateStamp(self):
        """getDateStamp(CafCache self) -> int64_t const &"""
        return _caf.CafCache_getDateStamp(self)

    def getDCAFChunk(self):
        """getDCAFChunk(CafCache self) -> CafDCAFChunk"""
        return _caf.CafCache_getDCAFChunk(self)

    def getMETAChunk(self):
        """getMETAChunk(CafCache self) -> CafMETAChunk"""
        return _caf.CafCache_getMETAChunk(self)

    def isAnimated(self):
        """isAnimated(CafCache self) -> bool"""
        return _caf.CafCache_isAnimated(self)

    def getName(self, *args):
        """getName(CafCache self, int objectIndex) -> std::string const &"""
        return _caf.CafCache_getName(self, *args)

    def getObjDef(self, *args):
        """getObjDef(CafCache self, int objectIndex) -> CafDOBJChunk"""
        return _caf.CafCache_getObjDef(self, *args)

    def isObjectAnimated(self, *args):
        """
        isObjectAnimated(CafCache self, int objectIndex, uint32_t tag=FREE) -> bool
        isObjectAnimated(CafCache self, int objectIndex) -> bool
        """
        return _caf.CafCache_isObjectAnimated(self, *args)

    def objectHas(self, *args):
        """objectHas(CafCache self, int objectIndex, uint32_t tag) -> bool"""
        return _caf.CafCache_objectHas(self, *args)

    def getNumAttrs(self, *args):
        """getNumAttrs(CafCache self, int objectIndex) -> int"""
        return _caf.CafCache_getNumAttrs(self, *args)

    def isAttrAnimated(self, *args):
        """isAttrAnimated(CafCache self, int objectIndex, int attrIndex) -> bool"""
        return _caf.CafCache_isAttrAnimated(self, *args)

    def getAttrName(self, *args):
        """getAttrName(CafCache self, int objectIndex, int attrIndex) -> std::string const"""
        return _caf.CafCache_getAttrName(self, *args)

    def getAttrType(self, *args):
        """getAttrType(CafCache self, int objectIndex, int attrIndex) -> std::string const"""
        return _caf.CafCache_getAttrType(self, *args)

    def findAttr(self, *args):
        """findAttr(CafCache self, int const objectIndex, std::string const & name) -> int"""
        return _caf.CafCache_findAttr(self, *args)

    def findObjectIndex(self, *args):
        """findObjectIndex(CafCache self, std::string const & name, int initialGuess) -> int"""
        return _caf.CafCache_findObjectIndex(self, *args)

    def getSampleIndex(self, *args):
        """getSampleIndex(CafCache self, float time) -> int"""
        return _caf.CafCache_getSampleIndex(self, *args)

    def getMaxSampleIndexNotGreaterThan(self, *args):
        """getMaxSampleIndexNotGreaterThan(CafCache self, float maxTime) -> int"""
        return _caf.CafCache_getMaxSampleIndexNotGreaterThan(self, *args)

    def getMinSampleIndexNotLessThan(self, *args):
        """getMinSampleIndexNotLessThan(CafCache self, float minTime) -> int"""
        return _caf.CafCache_getMinSampleIndexNotLessThan(self, *args)

    def getSampleTime(self, *args):
        """getSampleTime(CafCache self, int sampleIndex) -> float"""
        return _caf.CafCache_getSampleTime(self, *args)

    def shortName(*args):
        """shortName(std::string const & name) -> std::string"""
        return _caf.CafCache_shortName(*args)

    if _newclass:shortName = staticmethod(shortName)
    __swig_getmethods__["shortName"] = lambda x: shortName
CafCache_swigregister = _caf.CafCache_swigregister
CafCache_swigregister(CafCache)

def CafCache_shortName(*args):
  """CafCache_shortName(std::string const & name) -> std::string"""
  return _caf.CafCache_shortName(*args)

class CafRoMemCache(CafCache):
    """Proxy of C++ Caf::CafRoMemCache class"""
    __swig_setmethods__ = {}
    for _s in [CafCache]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafRoMemCache, name, value)
    __swig_getmethods__ = {}
    for _s in [CafCache]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafRoMemCache, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafRoMemCache self) -> CafRoMemCache
        __init__(Caf::CafRoMemCache self, char const * filename, bool keepOpen, bool * succeeded=None) -> CafRoMemCache
        __init__(Caf::CafRoMemCache self, char const * filename, bool keepOpen) -> CafRoMemCache
        __init__(Caf::CafRoMemCache self, char const * filename, bool keepOpen, int maxSamples, bool * succeeded=None) -> CafRoMemCache
        __init__(Caf::CafRoMemCache self, char const * filename, bool keepOpen, int maxSamples) -> CafRoMemCache
        """
        this = _caf.new_CafRoMemCache(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafRoMemCache
    __del__ = lambda self : None;
    def reset(self):
        """reset(CafRoMemCache self)"""
        return _caf.CafRoMemCache_reset(self)

    def load(self, *args):
        """
        load(CafRoMemCache self, char const * filename, bool keepOpen, int maxSamples) -> bool
        load(CafRoMemCache self, char const * filename, bool keepOpen) -> bool
        """
        return _caf.CafRoMemCache_load(self, *args)

    def getSample(self, *args):
        """
        getSample(CafRoMemCache self, int sampleIndex, int objectIndex) -> CafGroupChunk
        getSample(CafRoMemCache self, int sampleIndex, int objectIndex, uint32_t tag, int * tagIndex=None) -> CafChunk
        getSample(CafRoMemCache self, int sampleIndex, int objectIndex, uint32_t tag) -> CafChunk
        """
        return _caf.CafRoMemCache_getSample(self, *args)

    def getObjectData(self, *args):
        """
        getObjectData(CafRoMemCache self, int sampleIndex, int objectIndex, uint32_t tag, bool * animated=None) -> CafChunk
        getObjectData(CafRoMemCache self, int sampleIndex, int objectIndex, uint32_t tag) -> CafChunk
        """
        return _caf.CafRoMemCache_getObjectData(self, *args)

    def getNumVertices(self, *args):
        """getNumVertices(CafRoMemCache self, int sampleIndex, int objectIndex) -> int"""
        return _caf.CafRoMemCache_getNumVertices(self, *args)

    def getAttrData(self, *args):
        """getAttrData(CafRoMemCache self, int sampleIndex, int objectIndex, int attrIndex) -> CafChunk"""
        return _caf.CafRoMemCache_getAttrData(self, *args)

    def getMaxSamples(self):
        """getMaxSamples(CafRoMemCache self) -> int"""
        return _caf.CafRoMemCache_getMaxSamples(self)

    def setMaxSamples(self, *args):
        """setMaxSamples(CafRoMemCache self, int maxSamples)"""
        return _caf.CafRoMemCache_setMaxSamples(self, *args)

CafRoMemCache_swigregister = _caf.CafRoMemCache_swigregister
CafRoMemCache_swigregister(CafRoMemCache)

class CafRwMemCache(CafRoMemCache):
    """Proxy of C++ Caf::CafRwMemCache class"""
    __swig_setmethods__ = {}
    for _s in [CafRoMemCache]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafRwMemCache, name, value)
    __swig_getmethods__ = {}
    for _s in [CafRoMemCache]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafRwMemCache, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafRwMemCache self) -> CafRwMemCache
        __init__(Caf::CafRwMemCache self, char const * filename, bool keepOpen, bool * succeeded=None) -> CafRwMemCache
        __init__(Caf::CafRwMemCache self, char const * filename, bool keepOpen) -> CafRwMemCache
        """
        this = _caf.new_CafRwMemCache(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafRwMemCache
    __del__ = lambda self : None;
    def deleteCache(self):
        """deleteCache(CafRwMemCache self)"""
        return _caf.CafRwMemCache_deleteCache(self)

    def truncate(self, *args):
        """truncate(CafRwMemCache self, float maxTime)"""
        return _caf.CafRwMemCache_truncate(self, *args)

    def append(self):
        """append(CafRwMemCache self) -> bool"""
        return _caf.CafRwMemCache_append(self)

    def save(self, saved=None, deleted=None):
        """
        save(CafRwMemCache self, bool * saved=None, bool * deleted=None) -> bool
        save(CafRwMemCache self, bool * saved=None) -> bool
        save(CafRwMemCache self) -> bool
        """
        return _caf.CafRwMemCache_save(self, saved, deleted)

    def saveAs(self, *args):
        """
        saveAs(CafRwMemCache self, char const * filename, bool * saved=None, bool * deleted=None) -> bool
        saveAs(CafRwMemCache self, char const * filename, bool * saved=None) -> bool
        saveAs(CafRwMemCache self, char const * filename) -> bool
        """
        return _caf.CafRwMemCache_saveAs(self, *args)

    def setName(self, *args):
        """setName(CafRwMemCache self, int objectIndex, char const * name)"""
        return _caf.CafRwMemCache_setName(self, *args)

    def setAttrName(self, *args):
        """setAttrName(CafRwMemCache self, int const objectIndex, int const attrIndex, std::string const & name) -> bool"""
        return _caf.CafRwMemCache_setAttrName(self, *args)

    def setAttrType(self, *args):
        """setAttrType(CafRwMemCache self, int const objectIndex, int const attrIndex, std::string const & type) -> bool"""
        return _caf.CafRwMemCache_setAttrType(self, *args)

    def shiftFirstTimeTo(self, *args):
        """shiftFirstTimeTo(CafRwMemCache self, float time)"""
        return _caf.CafRwMemCache_shiftFirstTimeTo(self, *args)

    def setSpace(self, *args):
        """setSpace(CafRwMemCache self, int space)"""
        return _caf.CafRwMemCache_setSpace(self, *args)

    def setReservedSamples(self, *args):
        """setReservedSamples(CafRwMemCache self, int reserve)"""
        return _caf.CafRwMemCache_setReservedSamples(self, *args)

    def isDirty(self):
        """isDirty(CafRwMemCache self) -> bool"""
        return _caf.CafRwMemCache_isDirty(self)

    def setApplication(self, *args):
        """setApplication(CafRwMemCache self, std::string const & application)"""
        return _caf.CafRwMemCache_setApplication(self, *args)

    def setSourceFile(self, *args):
        """setSourceFile(CafRwMemCache self, std::string const & sourceFile)"""
        return _caf.CafRwMemCache_setSourceFile(self, *args)

    def allocSample(self, *args):
        """allocSample(CafRwMemCache self, float time, int objectIndex) -> CafGroupChunk"""
        return _caf.CafRwMemCache_allocSample(self, *args)

CafRwMemCache_swigregister = _caf.CafRwMemCache_swigregister
CafRwMemCache_swigregister(CafRwMemCache)


def caftest(*args):
  """caftest(char const * filename) -> int"""
  return _caf.caftest(*args)

def cafinfo(*args):
  """cafinfo(char const * filename) -> int"""
  return _caf.cafinfo(*args)

def caf2txt(*args):
  """caf2txt(char const * filename) -> int"""
  return _caf.caf2txt(*args)

def cafdiff(*args):
  """
    cafdiff(char const * filename1, char const * filename2, char const * flags=None) -> int
    cafdiff(char const * filename1, char const * filename2) -> int
    """
  return _caf.cafdiff(*args)
class CafHelperObjFactory(_object):
    """Proxy of C++ Caf::CafHelperObjFactory class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafHelperObjFactory, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CafHelperObjFactory, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """__init__(Caf::CafHelperObjFactory self, CafRoMemCache memCache) -> CafHelperObjFactory"""
        this = _caf.new_CafHelperObjFactory(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafHelperObjFactory
    __del__ = lambda self : None;
    def cafObjBuilder(self, *args):
        """cafObjBuilder(CafHelperObjFactory self, int oIndex) -> CafHelperObj"""
        return _caf.CafHelperObjFactory_cafObjBuilder(self, *args)

    def getObjectNames(self, *args):
        """getObjectNames(CafHelperObjFactory self, vectorString names) -> bool"""
        return _caf.CafHelperObjFactory_getObjectNames(self, *args)

CafHelperObjFactory_swigregister = _caf.CafHelperObjFactory_swigregister
CafHelperObjFactory_swigregister(CafHelperObjFactory)
helperObj = cvar.helperObj
transform = cvar.transform
locator = cvar.locator
lxcoordsystem = cvar.lxcoordsystem
geometry = cvar.geometry
mesh = cvar.mesh
nurbssurface = cvar.nurbssurface
nurbscurve = cvar.nurbscurve

class CafHelperObj(_object):
    """Proxy of C++ Caf::CafHelperObj class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafHelperObj, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CafHelperObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getParentCache(self):
        """getParentCache(CafHelperObj self) -> CafRoMemCache"""
        return _caf.CafHelperObj_getParentCache(self)

    def destroy(self):
        """destroy(CafHelperObj self)"""
        return _caf.CafHelperObj_destroy(self)

    def isA(self, *args):
        """isA(CafHelperObj self, std::string const & val) -> bool"""
        return _caf.CafHelperObj_isA(self, *args)

    def categories(self):
        """categories(CafHelperObj self) -> setString"""
        return _caf.CafHelperObj_categories(self)

    def getFirstTime(self):
        """getFirstTime(CafHelperObj self) -> float"""
        return _caf.CafHelperObj_getFirstTime(self)

    def getTimeFraction(self, *args):
        """getTimeFraction(CafHelperObj self, float const time) -> float"""
        return _caf.CafHelperObj_getTimeFraction(self, *args)

    def objectHas(self, *args):
        """objectHas(CafHelperObj self, uint32_t tag) -> bool"""
        return _caf.CafHelperObj_objectHas(self, *args)

    def getObjectType(self, *args):
        """getObjectType(CafHelperObj self, uint32_t tag) -> std::string"""
        return _caf.CafHelperObj_getObjectType(self, *args)

    def isAnimated(self, *args):
        """
        isAnimated(CafHelperObj self) -> Caf::CafHelperObj::AnimationState
        isAnimated(CafHelperObj self, uint32_t tag) -> Caf::CafHelperObj::AnimationState
        """
        return _caf.CafHelperObj_isAnimated(self, *args)

    def getBounds(self, *args):
        """
        getBounds(CafHelperObj self, int sample, vectorFloat bb, Caf::CafHelperObj::AnimationState & animState, bool pointOrder=False) -> bool
        getBounds(CafHelperObj self, int sample, vectorFloat bb, Caf::CafHelperObj::AnimationState & animState) -> bool
        """
        return _caf.CafHelperObj_getBounds(self, *args)

    def getName(self):
        """getName(CafHelperObj self) -> std::string const &"""
        return _caf.CafHelperObj_getName(self)

    def getLeafName(self):
        """getLeafName(CafHelperObj self) -> std::string const"""
        return _caf.CafHelperObj_getLeafName(self)

    def getNumAttrs(self):
        """getNumAttrs(CafHelperObj self) -> int"""
        return _caf.CafHelperObj_getNumAttrs(self)

    def findAttr(self, *args):
        """findAttr(CafHelperObj self, std::string const & name) -> int"""
        return _caf.CafHelperObj_findAttr(self, *args)

    def getAttrName(self, *args):
        """getAttrName(CafHelperObj self, int aIndex) -> std::string const"""
        return _caf.CafHelperObj_getAttrName(self, *args)

    def getAttrType(self, *args):
        """getAttrType(CafHelperObj self, int aIndex) -> std::string const"""
        return _caf.CafHelperObj_getAttrType(self, *args)

    def isAttrAnimated(self, *args):
        """isAttrAnimated(CafHelperObj self, int aIndex) -> Caf::CafHelperObj::AnimationState"""
        return _caf.CafHelperObj_isAttrAnimated(self, *args)

    def getAttrDataType(self, *args):
        """getAttrDataType(CafHelperObj self, int sample, int aIndex) -> std::string const"""
        return _caf.CafHelperObj_getAttrDataType(self, *args)

    def getAttrAtTime(self, *args):
        """getAttrAtTime(CafHelperObj self, float time, int aIndex, CafInterpolationHints hints, vectorDouble attr, int & dimension) -> bool"""
        return _caf.CafHelperObj_getAttrAtTime(self, *args)

    def getAttr(self, *args):
        """
        getAttr(CafHelperObj self, int sample, int aIndex, vectorFloat attr, int & dimension) -> bool
        getAttr(CafHelperObj self, int sample, int aIndex, vectorDouble attr, int & dimension) -> bool
        getAttr(CafHelperObj self, int sample, int aIndex, vectorInt32 attr, int & dimension) -> bool
        getAttr(CafHelperObj self, int sample, int aIndex, vectorInt64 attr, int & dimension) -> bool
        getAttr(CafHelperObj self, int sample, int aIndex, vectorString attr) -> bool
        """
        return _caf.CafHelperObj_getAttr(self, *args)

    def searchChunk(self, *args):
        """searchChunk(CafHelperObj self, CafGroupChunk sourceChunk, uint32_t tag) -> CafChunk"""
        return _caf.CafHelperObj_searchChunk(self, *args)

    def getDimension(self, *args):
        """getDimension(CafHelperObj self, CafChunk chunk) -> int"""
        return _caf.CafHelperObj_getDimension(self, *args)

    def toTransformCafObj(self):
        """toTransformCafObj(CafHelperObj self) -> TransformCafObj"""
        return _caf.CafHelperObj_toTransformCafObj(self)

    def toLocatorCafObj(self):
        """toLocatorCafObj(CafHelperObj self) -> LocatorCafObj"""
        return _caf.CafHelperObj_toLocatorCafObj(self)

    def toGeometryCafObj(self):
        """toGeometryCafObj(CafHelperObj self) -> GeometryCafObj"""
        return _caf.CafHelperObj_toGeometryCafObj(self)

    def toMeshCafObj(self):
        """toMeshCafObj(CafHelperObj self) -> MeshCafObj"""
        return _caf.CafHelperObj_toMeshCafObj(self)

    def toNurbsSurfaceCafObj(self):
        """toNurbsSurfaceCafObj(CafHelperObj self) -> NurbsSurfaceCafObj"""
        return _caf.CafHelperObj_toNurbsSurfaceCafObj(self)

    def toNurbsCurveCafObj(self):
        """toNurbsCurveCafObj(CafHelperObj self) -> NurbsCurveCafObj"""
        return _caf.CafHelperObj_toNurbsCurveCafObj(self)

CafHelperObj_swigregister = _caf.CafHelperObj_swigregister
CafHelperObj_swigregister(CafHelperObj)

class TransformCafObj(CafHelperObj):
    """Proxy of C++ Caf::TransformCafObj class"""
    __swig_setmethods__ = {}
    for _s in [CafHelperObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, TransformCafObj, name, value)
    __swig_getmethods__ = {}
    for _s in [CafHelperObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, TransformCafObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getTransformData(self, *args):
        """
        getTransformData(TransformCafObj self, int sample, vectorFloat xform, Caf::CafHelperObj::AnimationState & animState) -> bool
        getTransformData(TransformCafObj self, int sample, vectorDouble xform, Caf::CafHelperObj::AnimationState & animState) -> bool
        """
        return _caf.TransformCafObj_getTransformData(self, *args)

    def getTransformAtTime(self, *args):
        """
        getTransformAtTime(TransformCafObj self, float time, CafInterpolationHints hints, vectorFloat xform, Caf::CafHelperObj::AnimationState & animState) -> bool
        getTransformAtTime(TransformCafObj self, float time, CafInterpolationHints hints, vectorDouble xform, Caf::CafHelperObj::AnimationState & animState) -> bool
        """
        return _caf.TransformCafObj_getTransformAtTime(self, *args)

    def inheritsTransform(self):
        """inheritsTransform(TransformCafObj self) -> bool"""
        return _caf.TransformCafObj_inheritsTransform(self)

TransformCafObj_swigregister = _caf.TransformCafObj_swigregister
TransformCafObj_swigregister(TransformCafObj)

class LocatorCafObj(CafHelperObj):
    """Proxy of C++ Caf::LocatorCafObj class"""
    __swig_setmethods__ = {}
    for _s in [CafHelperObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LocatorCafObj, name, value)
    __swig_getmethods__ = {}
    for _s in [CafHelperObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LocatorCafObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
LocatorCafObj_swigregister = _caf.LocatorCafObj_swigregister
LocatorCafObj_swigregister(LocatorCafObj)

class LxCoordSystemCafObj(CafHelperObj):
    """Proxy of C++ Caf::LxCoordSystemCafObj class"""
    __swig_setmethods__ = {}
    for _s in [CafHelperObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, LxCoordSystemCafObj, name, value)
    __swig_getmethods__ = {}
    for _s in [CafHelperObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, LxCoordSystemCafObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def scoped(self):
        """scoped(LxCoordSystemCafObj self) -> bool"""
        return _caf.LxCoordSystemCafObj_scoped(self)

    def useAsClippingPlane(self):
        """useAsClippingPlane(LxCoordSystemCafObj self) -> bool"""
        return _caf.LxCoordSystemCafObj_useAsClippingPlane(self)

    def displayShape(self):
        """displayShape(LxCoordSystemCafObj self) -> int"""
        return _caf.LxCoordSystemCafObj_displayShape(self)

    def parentRig(self):
        """parentRig(LxCoordSystemCafObj self) -> std::string"""
        return _caf.LxCoordSystemCafObj_parentRig(self)

LxCoordSystemCafObj_swigregister = _caf.LxCoordSystemCafObj_swigregister
LxCoordSystemCafObj_swigregister(LxCoordSystemCafObj)

class GeometryCafObj(CafHelperObj):
    """Proxy of C++ Caf::GeometryCafObj class"""
    __swig_setmethods__ = {}
    for _s in [CafHelperObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, GeometryCafObj, name, value)
    __swig_getmethods__ = {}
    for _s in [CafHelperObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, GeometryCafObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getPosition(self, *args):
        """
        getPosition(GeometryCafObj self, int sample, vectorFloat pos, Caf::CafHelperObj::AnimationState & animState, int & dimension) -> bool
        getPosition(GeometryCafObj self, int sample, vectorDouble pos, Caf::CafHelperObj::AnimationState & animState, int & dimension) -> bool
        """
        return _caf.GeometryCafObj_getPosition(self, *args)

    def getPositionAtTime(self, *args):
        """
        getPositionAtTime(GeometryCafObj self, float time, CafInterpolationHints hints, vectorFloat pos, Caf::CafHelperObj::AnimationState & animState, 
            int & dimension) -> bool
        getPositionAtTime(GeometryCafObj self, float time, CafInterpolationHints hints, vectorDouble pos, Caf::CafHelperObj::AnimationState & animState, 
            int & dimension) -> bool
        """
        return _caf.GeometryCafObj_getPositionAtTime(self, *args)

GeometryCafObj_swigregister = _caf.GeometryCafObj_swigregister
GeometryCafObj_swigregister(GeometryCafObj)

class MeshCafObj(GeometryCafObj):
    """Proxy of C++ Caf::MeshCafObj class"""
    __swig_setmethods__ = {}
    for _s in [GeometryCafObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, MeshCafObj, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryCafObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, MeshCafObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def isSubd(self):
        """isSubd(MeshCafObj self) -> bool"""
        return _caf.MeshCafObj_isSubd(self)

    def getFaceVertexCnts(self, *args):
        """getFaceVertexCnts(MeshCafObj self, int sample, vectorInt32 pcnts, Caf::CafHelperObj::AnimationState & animState) -> bool"""
        return _caf.MeshCafObj_getFaceVertexCnts(self, *args)

    def getFaceVertexIds(self, *args):
        """getFaceVertexIds(MeshCafObj self, int sample, vectorInt32 pids, Caf::CafHelperObj::AnimationState & animState) -> bool"""
        return _caf.MeshCafObj_getFaceVertexIds(self, *args)

    def getFaceNormalVertexCnts(self, *args):
        """getFaceNormalVertexCnts(MeshCafObj self, int sample, vectorInt32 pcnts, Caf::CafHelperObj::AnimationState & animState) -> bool"""
        return _caf.MeshCafObj_getFaceNormalVertexCnts(self, *args)

    def getFaceNormalVertexIds(self, *args):
        """getFaceNormalVertexIds(MeshCafObj self, int sample, vectorInt32 pids, Caf::CafHelperObj::AnimationState & animState) -> bool"""
        return _caf.MeshCafObj_getFaceNormalVertexIds(self, *args)

    def getNormals(self, *args):
        """
        getNormals(MeshCafObj self, int sample, vectorFloat vpno, Caf::CafHelperObj::AnimationState & animState) -> bool
        getNormals(MeshCafObj self, int sample, vectorDouble vpno, Caf::CafHelperObj::AnimationState & animState) -> bool
        """
        return _caf.MeshCafObj_getNormals(self, *args)

    def getFaceNormals(self, *args):
        """
        getFaceNormals(MeshCafObj self, int sample, vectorFloat pono, Caf::CafHelperObj::AnimationState & animState) -> bool
        getFaceNormals(MeshCafObj self, int sample, vectorDouble pono, Caf::CafHelperObj::AnimationState & animState) -> bool
        """
        return _caf.MeshCafObj_getFaceNormals(self, *args)

    def getVelocity(self, *args):
        """
        getVelocity(MeshCafObj self, int sample, vectorFloat velo, Caf::CafHelperObj::AnimationState & animState) -> bool
        getVelocity(MeshCafObj self, int sample, vectorDouble velo, Caf::CafHelperObj::AnimationState & animState) -> bool
        """
        return _caf.MeshCafObj_getVelocity(self, *args)

    def getPref(self, *args):
        """
        getPref(MeshCafObj self, vectorFloat pref) -> bool
        getPref(MeshCafObj self, vectorDouble pref) -> bool
        """
        return _caf.MeshCafObj_getPref(self, *args)

MeshCafObj_swigregister = _caf.MeshCafObj_swigregister
MeshCafObj_swigregister(MeshCafObj)

class NurbsSurfaceCafObj(GeometryCafObj):
    """Proxy of C++ Caf::NurbsSurfaceCafObj class"""
    __swig_setmethods__ = {}
    for _s in [GeometryCafObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NurbsSurfaceCafObj, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryCafObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NurbsSurfaceCafObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getDegree(self, *args):
        """getDegree(NurbsSurfaceCafObj self, int sample, int & degreeU, int & degreeV, Caf::CafHelperObj::AnimationState & animState) -> bool"""
        return _caf.NurbsSurfaceCafObj_getDegree(self, *args)

    def getForm(self, *args):
        """getForm(NurbsSurfaceCafObj self, int sample, std::string & formU, std::string & formV, Caf::CafHelperObj::AnimationState & animState) -> bool"""
        return _caf.NurbsSurfaceCafObj_getForm(self, *args)

    def getKnots(self, *args):
        """
        getKnots(NurbsSurfaceCafObj self, int sample, vectorFloat knotsU, vectorFloat knotsV, Caf::CafHelperObj::AnimationState & animState, 
            bool endKnots=True) -> bool
        getKnots(NurbsSurfaceCafObj self, int sample, vectorFloat knotsU, vectorFloat knotsV, Caf::CafHelperObj::AnimationState & animState) -> bool
        getKnots(NurbsSurfaceCafObj self, int sample, vectorDouble knotsU, vectorDouble knotsV, Caf::CafHelperObj::AnimationState & animState, 
            bool endKnots=True) -> bool
        getKnots(NurbsSurfaceCafObj self, int sample, vectorDouble knotsU, vectorDouble knotsV, Caf::CafHelperObj::AnimationState & animState) -> bool
        """
        return _caf.NurbsSurfaceCafObj_getKnots(self, *args)

    def getControlPoints(self, *args):
        """
        getControlPoints(NurbsSurfaceCafObj self, int sample, vectorFloat CPs, Caf::CafHelperObj::AnimationState & animState, bool columnOrder=True) -> bool
        getControlPoints(NurbsSurfaceCafObj self, int sample, vectorFloat CPs, Caf::CafHelperObj::AnimationState & animState) -> bool
        getControlPoints(NurbsSurfaceCafObj self, int sample, vectorDouble CPs, Caf::CafHelperObj::AnimationState & animState, bool columnOrder=True) -> bool
        getControlPoints(NurbsSurfaceCafObj self, int sample, vectorDouble CPs, Caf::CafHelperObj::AnimationState & animState) -> bool
        """
        return _caf.NurbsSurfaceCafObj_getControlPoints(self, *args)

    def getControlPointsAtTime(self, *args):
        """
        getControlPointsAtTime(NurbsSurfaceCafObj self, float time, CafInterpolationHints hints, vectorFloat CPs, Caf::CafHelperObj::AnimationState & animState, 
            bool columnOrder=True) -> bool
        getControlPointsAtTime(NurbsSurfaceCafObj self, float time, CafInterpolationHints hints, vectorFloat CPs, Caf::CafHelperObj::AnimationState & animState) -> bool
        getControlPointsAtTime(NurbsSurfaceCafObj self, float time, CafInterpolationHints hints, vectorDouble CPs, Caf::CafHelperObj::AnimationState & animState, 
            bool columnOrder=True) -> bool
        getControlPointsAtTime(NurbsSurfaceCafObj self, float time, CafInterpolationHints hints, vectorDouble CPs, Caf::CafHelperObj::AnimationState & animState) -> bool
        """
        return _caf.NurbsSurfaceCafObj_getControlPointsAtTime(self, *args)

    def getPrefControlPoints(self, *args):
        """
        getPrefControlPoints(NurbsSurfaceCafObj self, vectorFloat prefCPs, bool columnOrder=True) -> bool
        getPrefControlPoints(NurbsSurfaceCafObj self, vectorFloat prefCPs) -> bool
        getPrefControlPoints(NurbsSurfaceCafObj self, vectorDouble prefCPs, bool columnOrder=True) -> bool
        getPrefControlPoints(NurbsSurfaceCafObj self, vectorDouble prefCPs) -> bool
        """
        return _caf.NurbsSurfaceCafObj_getPrefControlPoints(self, *args)

    def getAttr(self, *args):
        """
        getAttr(NurbsSurfaceCafObj self, int sample, int aIndex, vectorFloat attr, int & dimension, bool columnOrder=True) -> bool
        getAttr(NurbsSurfaceCafObj self, int sample, int aIndex, vectorFloat attr, int & dimension) -> bool
        getAttr(NurbsSurfaceCafObj self, int sample, int aIndex, vectorDouble attr, int & dimension, bool columnOrder=True) -> bool
        getAttr(NurbsSurfaceCafObj self, int sample, int aIndex, vectorDouble attr, int & dimension) -> bool
        getAttr(NurbsSurfaceCafObj self, int sample, int aIndex, vectorInt32 attr, int & dimension, bool columnOrder=True) -> bool
        getAttr(NurbsSurfaceCafObj self, int sample, int aIndex, vectorInt32 attr, int & dimension) -> bool
        getAttr(NurbsSurfaceCafObj self, int sample, int aIndex, vectorInt64 attr, int & dimension, bool columnOrder=True) -> bool
        getAttr(NurbsSurfaceCafObj self, int sample, int aIndex, vectorInt64 attr, int & dimension) -> bool
        getAttr(NurbsSurfaceCafObj self, int sample, int aIndex, vectorString attr, bool columnOrder=True) -> bool
        getAttr(NurbsSurfaceCafObj self, int sample, int aIndex, vectorString attr) -> bool
        """
        return _caf.NurbsSurfaceCafObj_getAttr(self, *args)

NurbsSurfaceCafObj_swigregister = _caf.NurbsSurfaceCafObj_swigregister
NurbsSurfaceCafObj_swigregister(NurbsSurfaceCafObj)

class NurbsCurveCafObj(GeometryCafObj):
    """Proxy of C++ Caf::NurbsCurveCafObj class"""
    __swig_setmethods__ = {}
    for _s in [GeometryCafObj]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, NurbsCurveCafObj, name, value)
    __swig_getmethods__ = {}
    for _s in [GeometryCafObj]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, NurbsCurveCafObj, name)
    def __init__(self, *args, **kwargs): raise AttributeError("No constructor defined")
    __repr__ = _swig_repr
    def getKnots(self, *args):
        """
        getKnots(NurbsCurveCafObj self, int sample, vectorFloat knots, Caf::CafHelperObj::AnimationState & animState, bool endKnots=True) -> bool
        getKnots(NurbsCurveCafObj self, int sample, vectorFloat knots, Caf::CafHelperObj::AnimationState & animState) -> bool
        getKnots(NurbsCurveCafObj self, int sample, vectorDouble knots, Caf::CafHelperObj::AnimationState & animState, bool endKnots=True) -> bool
        getKnots(NurbsCurveCafObj self, int sample, vectorDouble knots, Caf::CafHelperObj::AnimationState & animState) -> bool
        """
        return _caf.NurbsCurveCafObj_getKnots(self, *args)

    def getDegree(self, *args):
        """getDegree(NurbsCurveCafObj self, int sample, int & degree, Caf::CafHelperObj::AnimationState & animState) -> bool"""
        return _caf.NurbsCurveCafObj_getDegree(self, *args)

    def getForm(self, *args):
        """getForm(NurbsCurveCafObj self, int sample, std::string & form, Caf::CafHelperObj::AnimationState & animState) -> bool"""
        return _caf.NurbsCurveCafObj_getForm(self, *args)

    def getControlPoints(self, *args):
        """
        getControlPoints(NurbsCurveCafObj self, int sample, vectorFloat CPs, Caf::CafHelperObj::AnimationState & animState) -> bool
        getControlPoints(NurbsCurveCafObj self, int sample, vectorDouble CPs, Caf::CafHelperObj::AnimationState & animState) -> bool
        """
        return _caf.NurbsCurveCafObj_getControlPoints(self, *args)

    def getControlPointsAtTime(self, *args):
        """
        getControlPointsAtTime(NurbsCurveCafObj self, float time, CafInterpolationHints hints, vectorFloat CPs, Caf::CafHelperObj::AnimationState & animState) -> bool
        getControlPointsAtTime(NurbsCurveCafObj self, float time, CafInterpolationHints hints, vectorDouble CPs, Caf::CafHelperObj::AnimationState & animState) -> bool
        """
        return _caf.NurbsCurveCafObj_getControlPointsAtTime(self, *args)

NurbsCurveCafObj_swigregister = _caf.NurbsCurveCafObj_swigregister
NurbsCurveCafObj_swigregister(NurbsCurveCafObj)

class CafInterpolationHints(_object):
    """Proxy of C++ Caf::CafInterpolationHints class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafInterpolationHints, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, CafInterpolationHints, name)
    __repr__ = _swig_repr
    def __init__(self): 
        """__init__(Caf::CafInterpolationHints self) -> CafInterpolationHints"""
        this = _caf.new_CafInterpolationHints()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafInterpolationHints
    __del__ = lambda self : None;
    none = _caf.CafInterpolationHints_none
    linear = _caf.CafInterpolationHints_linear
    quadratic = _caf.CafInterpolationHints_quadratic
    cubic = _caf.CafInterpolationHints_cubic
    curve = _caf.CafInterpolationHints_curve
    tangent = _caf.CafInterpolationHints_tangent
    def setInterpolationHint(self, *args):
        """setInterpolationHint(CafInterpolationHints self, Caf::CafInterpolationHints::CafInterpolationType type)"""
        return _caf.CafInterpolationHints_setInterpolationHint(self, *args)

    def getInterpolationHint(self):
        """getInterpolationHint(CafInterpolationHints self) -> Caf::CafInterpolationHints::CafInterpolationType"""
        return _caf.CafInterpolationHints_getInterpolationHint(self)

    def setEvaluateOnHint(self, *args):
        """setEvaluateOnHint(CafInterpolationHints self, Caf::CafInterpolationHints::CafEvaluateOn evalOn)"""
        return _caf.CafInterpolationHints_setEvaluateOnHint(self, *args)

    def getEvaluateOnHint(self):
        """getEvaluateOnHint(CafInterpolationHints self) -> Caf::CafInterpolationHints::CafEvaluateOn"""
        return _caf.CafInterpolationHints_getEvaluateOnHint(self)

    def setStartTimeHint(self, *args):
        """setStartTimeHint(CafInterpolationHints self, float startTime)"""
        return _caf.CafInterpolationHints_setStartTimeHint(self, *args)

    def getStartTimeHint(self):
        """getStartTimeHint(CafInterpolationHints self) -> float"""
        return _caf.CafInterpolationHints_getStartTimeHint(self)

    def setHintState(self, *args):
        """setHintState(CafInterpolationHints self, std::string const & hintState)"""
        return _caf.CafInterpolationHints_setHintState(self, *args)

    def getHintState(self):
        """getHintState(CafInterpolationHints self) -> std::string"""
        return _caf.CafInterpolationHints_getHintState(self)

    def getHintArraySize(self):
        """getHintArraySize(CafInterpolationHints self) -> int"""
        return _caf.CafInterpolationHints_getHintArraySize(self)

CafInterpolationHints_swigregister = _caf.CafInterpolationHints_swigregister
CafInterpolationHints_swigregister(CafInterpolationHints)

class CafLeafChunkString(CafChunk):
    """Proxy of C++ Caf::CafLeafChunk<(std::string)> class"""
    __swig_setmethods__ = {}
    for _s in [CafChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafLeafChunkString, name, value)
    __swig_getmethods__ = {}
    for _s in [CafChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafLeafChunkString, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafLeafChunk<(std::string)> self) -> CafLeafChunkString
        __init__(Caf::CafLeafChunk<(std::string)> self, uint32_t tag) -> CafLeafChunkString
        __init__(Caf::CafLeafChunk<(std::string)> self, uint32_t tag, vectorString data) -> CafLeafChunkString
        __init__(Caf::CafLeafChunk<(std::string)> self, uint32_t tag, unsigned char cafCompound, unsigned char cafDimen) -> CafLeafChunkString
        __init__(Caf::CafLeafChunk<(std::string)> self, uint32_t tag, unsigned char cafCompound, unsigned char cafDimen, vectorString data) -> CafLeafChunkString
        """
        this = _caf.new_CafLeafChunkString(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafLeafChunkString
    __del__ = lambda self : None;
    def reset(self):
        """reset(CafLeafChunkString self)"""
        return _caf.CafLeafChunkString_reset(self)

    def read(self, *args):
        """read(CafLeafChunkString self, CafHeader header, CafFile file) -> bool"""
        return _caf.CafLeafChunkString_read(self, *args)

    def write(self, *args):
        """write(CafLeafChunkString self, CafFile file) -> bool"""
        return _caf.CafLeafChunkString_write(self, *args)

    def getCompound(self):
        """getCompound(CafLeafChunkString self) -> unsigned char"""
        return _caf.CafLeafChunkString_getCompound(self)

    def setCompound(self, *args):
        """setCompound(CafLeafChunkString self, unsigned char val)"""
        return _caf.CafLeafChunkString_setCompound(self, *args)

    def getDimension(self):
        """getDimension(CafLeafChunkString self) -> unsigned char"""
        return _caf.CafLeafChunkString_getDimension(self)

    def setDimension(self, *args):
        """setDimension(CafLeafChunkString self, unsigned char val)"""
        return _caf.CafLeafChunkString_setDimension(self, *args)

    def getData(self, *args):
        """
        getData(CafLeafChunkString self) -> vectorString
        getData(CafLeafChunkString self) -> vectorString
        """
        return _caf.CafLeafChunkString_getData(self, *args)

CafLeafChunkString_swigregister = _caf.CafLeafChunkString_swigregister
CafLeafChunkString_swigregister(CafLeafChunkString)

class CafLeafChunkFloat(CafChunk):
    """Proxy of C++ Caf::CafLeafChunk<(float)> class"""
    __swig_setmethods__ = {}
    for _s in [CafChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafLeafChunkFloat, name, value)
    __swig_getmethods__ = {}
    for _s in [CafChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafLeafChunkFloat, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafLeafChunk<(float)> self) -> CafLeafChunkFloat
        __init__(Caf::CafLeafChunk<(float)> self, uint32_t tag) -> CafLeafChunkFloat
        __init__(Caf::CafLeafChunk<(float)> self, uint32_t tag, vectorFloat data) -> CafLeafChunkFloat
        __init__(Caf::CafLeafChunk<(float)> self, uint32_t tag, unsigned char cafCompound, unsigned char cafDimen) -> CafLeafChunkFloat
        __init__(Caf::CafLeafChunk<(float)> self, uint32_t tag, unsigned char cafCompound, unsigned char cafDimen, vectorFloat data) -> CafLeafChunkFloat
        """
        this = _caf.new_CafLeafChunkFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafLeafChunkFloat
    __del__ = lambda self : None;
    def reset(self):
        """reset(CafLeafChunkFloat self)"""
        return _caf.CafLeafChunkFloat_reset(self)

    def read(self, *args):
        """read(CafLeafChunkFloat self, CafHeader header, CafFile file) -> bool"""
        return _caf.CafLeafChunkFloat_read(self, *args)

    def write(self, *args):
        """write(CafLeafChunkFloat self, CafFile file) -> bool"""
        return _caf.CafLeafChunkFloat_write(self, *args)

    def getCompound(self):
        """getCompound(CafLeafChunkFloat self) -> unsigned char"""
        return _caf.CafLeafChunkFloat_getCompound(self)

    def setCompound(self, *args):
        """setCompound(CafLeafChunkFloat self, unsigned char val)"""
        return _caf.CafLeafChunkFloat_setCompound(self, *args)

    def getDimension(self):
        """getDimension(CafLeafChunkFloat self) -> unsigned char"""
        return _caf.CafLeafChunkFloat_getDimension(self)

    def setDimension(self, *args):
        """setDimension(CafLeafChunkFloat self, unsigned char val)"""
        return _caf.CafLeafChunkFloat_setDimension(self, *args)

    def getData(self, *args):
        """
        getData(CafLeafChunkFloat self) -> vectorFloat
        getData(CafLeafChunkFloat self) -> vectorFloat
        """
        return _caf.CafLeafChunkFloat_getData(self, *args)

CafLeafChunkFloat_swigregister = _caf.CafLeafChunkFloat_swigregister
CafLeafChunkFloat_swigregister(CafLeafChunkFloat)

class CafLeafChunkDouble(CafChunk):
    """Proxy of C++ Caf::CafLeafChunk<(double)> class"""
    __swig_setmethods__ = {}
    for _s in [CafChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafLeafChunkDouble, name, value)
    __swig_getmethods__ = {}
    for _s in [CafChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafLeafChunkDouble, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafLeafChunk<(double)> self) -> CafLeafChunkDouble
        __init__(Caf::CafLeafChunk<(double)> self, uint32_t tag) -> CafLeafChunkDouble
        __init__(Caf::CafLeafChunk<(double)> self, uint32_t tag, vectorDouble data) -> CafLeafChunkDouble
        __init__(Caf::CafLeafChunk<(double)> self, uint32_t tag, unsigned char cafCompound, unsigned char cafDimen) -> CafLeafChunkDouble
        __init__(Caf::CafLeafChunk<(double)> self, uint32_t tag, unsigned char cafCompound, unsigned char cafDimen, vectorDouble data) -> CafLeafChunkDouble
        """
        this = _caf.new_CafLeafChunkDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafLeafChunkDouble
    __del__ = lambda self : None;
    def reset(self):
        """reset(CafLeafChunkDouble self)"""
        return _caf.CafLeafChunkDouble_reset(self)

    def read(self, *args):
        """read(CafLeafChunkDouble self, CafHeader header, CafFile file) -> bool"""
        return _caf.CafLeafChunkDouble_read(self, *args)

    def write(self, *args):
        """write(CafLeafChunkDouble self, CafFile file) -> bool"""
        return _caf.CafLeafChunkDouble_write(self, *args)

    def getCompound(self):
        """getCompound(CafLeafChunkDouble self) -> unsigned char"""
        return _caf.CafLeafChunkDouble_getCompound(self)

    def setCompound(self, *args):
        """setCompound(CafLeafChunkDouble self, unsigned char val)"""
        return _caf.CafLeafChunkDouble_setCompound(self, *args)

    def getDimension(self):
        """getDimension(CafLeafChunkDouble self) -> unsigned char"""
        return _caf.CafLeafChunkDouble_getDimension(self)

    def setDimension(self, *args):
        """setDimension(CafLeafChunkDouble self, unsigned char val)"""
        return _caf.CafLeafChunkDouble_setDimension(self, *args)

    def getData(self, *args):
        """
        getData(CafLeafChunkDouble self) -> vectorDouble
        getData(CafLeafChunkDouble self) -> vectorDouble
        """
        return _caf.CafLeafChunkDouble_getData(self, *args)

CafLeafChunkDouble_swigregister = _caf.CafLeafChunkDouble_swigregister
CafLeafChunkDouble_swigregister(CafLeafChunkDouble)

class CafLeafChunkInt32(CafChunk):
    """Proxy of C++ Caf::CafLeafChunk<(int32_t)> class"""
    __swig_setmethods__ = {}
    for _s in [CafChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafLeafChunkInt32, name, value)
    __swig_getmethods__ = {}
    for _s in [CafChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafLeafChunkInt32, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafLeafChunk<(int32_t)> self) -> CafLeafChunkInt32
        __init__(Caf::CafLeafChunk<(int32_t)> self, uint32_t tag) -> CafLeafChunkInt32
        __init__(Caf::CafLeafChunk<(int32_t)> self, uint32_t tag, vectorInt32 data) -> CafLeafChunkInt32
        __init__(Caf::CafLeafChunk<(int32_t)> self, uint32_t tag, unsigned char cafCompound, unsigned char cafDimen) -> CafLeafChunkInt32
        __init__(Caf::CafLeafChunk<(int32_t)> self, uint32_t tag, unsigned char cafCompound, unsigned char cafDimen, vectorInt32 data) -> CafLeafChunkInt32
        """
        this = _caf.new_CafLeafChunkInt32(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafLeafChunkInt32
    __del__ = lambda self : None;
    def reset(self):
        """reset(CafLeafChunkInt32 self)"""
        return _caf.CafLeafChunkInt32_reset(self)

    def read(self, *args):
        """read(CafLeafChunkInt32 self, CafHeader header, CafFile file) -> bool"""
        return _caf.CafLeafChunkInt32_read(self, *args)

    def write(self, *args):
        """write(CafLeafChunkInt32 self, CafFile file) -> bool"""
        return _caf.CafLeafChunkInt32_write(self, *args)

    def getCompound(self):
        """getCompound(CafLeafChunkInt32 self) -> unsigned char"""
        return _caf.CafLeafChunkInt32_getCompound(self)

    def setCompound(self, *args):
        """setCompound(CafLeafChunkInt32 self, unsigned char val)"""
        return _caf.CafLeafChunkInt32_setCompound(self, *args)

    def getDimension(self):
        """getDimension(CafLeafChunkInt32 self) -> unsigned char"""
        return _caf.CafLeafChunkInt32_getDimension(self)

    def setDimension(self, *args):
        """setDimension(CafLeafChunkInt32 self, unsigned char val)"""
        return _caf.CafLeafChunkInt32_setDimension(self, *args)

    def getData(self, *args):
        """
        getData(CafLeafChunkInt32 self) -> vectorInt32
        getData(CafLeafChunkInt32 self) -> vectorInt32
        """
        return _caf.CafLeafChunkInt32_getData(self, *args)

CafLeafChunkInt32_swigregister = _caf.CafLeafChunkInt32_swigregister
CafLeafChunkInt32_swigregister(CafLeafChunkInt32)

class CafLeafChunkInt64(CafChunk):
    """Proxy of C++ Caf::CafLeafChunk<(int64_t)> class"""
    __swig_setmethods__ = {}
    for _s in [CafChunk]: __swig_setmethods__.update(getattr(_s,'__swig_setmethods__',{}))
    __setattr__ = lambda self, name, value: _swig_setattr(self, CafLeafChunkInt64, name, value)
    __swig_getmethods__ = {}
    for _s in [CafChunk]: __swig_getmethods__.update(getattr(_s,'__swig_getmethods__',{}))
    __getattr__ = lambda self, name: _swig_getattr(self, CafLeafChunkInt64, name)
    __repr__ = _swig_repr
    def __init__(self, *args): 
        """
        __init__(Caf::CafLeafChunk<(int64_t)> self) -> CafLeafChunkInt64
        __init__(Caf::CafLeafChunk<(int64_t)> self, uint32_t tag) -> CafLeafChunkInt64
        __init__(Caf::CafLeafChunk<(int64_t)> self, uint32_t tag, vectorInt64 data) -> CafLeafChunkInt64
        __init__(Caf::CafLeafChunk<(int64_t)> self, uint32_t tag, unsigned char cafCompound, unsigned char cafDimen) -> CafLeafChunkInt64
        __init__(Caf::CafLeafChunk<(int64_t)> self, uint32_t tag, unsigned char cafCompound, unsigned char cafDimen, vectorInt64 data) -> CafLeafChunkInt64
        """
        this = _caf.new_CafLeafChunkInt64(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _caf.delete_CafLeafChunkInt64
    __del__ = lambda self : None;
    def reset(self):
        """reset(CafLeafChunkInt64 self)"""
        return _caf.CafLeafChunkInt64_reset(self)

    def read(self, *args):
        """read(CafLeafChunkInt64 self, CafHeader header, CafFile file) -> bool"""
        return _caf.CafLeafChunkInt64_read(self, *args)

    def write(self, *args):
        """write(CafLeafChunkInt64 self, CafFile file) -> bool"""
        return _caf.CafLeafChunkInt64_write(self, *args)

    def getCompound(self):
        """getCompound(CafLeafChunkInt64 self) -> unsigned char"""
        return _caf.CafLeafChunkInt64_getCompound(self)

    def setCompound(self, *args):
        """setCompound(CafLeafChunkInt64 self, unsigned char val)"""
        return _caf.CafLeafChunkInt64_setCompound(self, *args)

    def getDimension(self):
        """getDimension(CafLeafChunkInt64 self) -> unsigned char"""
        return _caf.CafLeafChunkInt64_getDimension(self)

    def setDimension(self, *args):
        """setDimension(CafLeafChunkInt64 self, unsigned char val)"""
        return _caf.CafLeafChunkInt64_setDimension(self, *args)

    def getData(self, *args):
        """
        getData(CafLeafChunkInt64 self) -> vectorInt64
        getData(CafLeafChunkInt64 self) -> vectorInt64
        """
        return _caf.CafLeafChunkInt64_getData(self, *args)

CafLeafChunkInt64_swigregister = _caf.CafLeafChunkInt64_swigregister
CafLeafChunkInt64_swigregister(CafLeafChunkInt64)

class vectorCafChunk(_object):
    """Proxy of C++ std::vector<(p.Caf::CafChunk)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorCafChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorCafChunk, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorCafChunk self) -> SwigPyIterator"""
        return _caf.vectorCafChunk_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(vectorCafChunk self) -> bool"""
        return _caf.vectorCafChunk___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorCafChunk self) -> bool"""
        return _caf.vectorCafChunk___bool__(self)

    def __len__(self):
        """__len__(vectorCafChunk self) -> std::vector< Caf::CafChunk * >::size_type"""
        return _caf.vectorCafChunk___len__(self)

    def pop(self):
        """pop(vectorCafChunk self) -> CafChunk"""
        return _caf.vectorCafChunk_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorCafChunk self, std::vector< Caf::CafChunk * >::difference_type i, std::vector< Caf::CafChunk * >::difference_type j) -> vectorCafChunk"""
        return _caf.vectorCafChunk___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorCafChunk self, std::vector< Caf::CafChunk * >::difference_type i, std::vector< Caf::CafChunk * >::difference_type j, 
            vectorCafChunk v=std::vector< Caf::CafChunk *,std::allocator< Caf::CafChunk * > >())
        __setslice__(vectorCafChunk self, std::vector< Caf::CafChunk * >::difference_type i, std::vector< Caf::CafChunk * >::difference_type j)
        """
        return _caf.vectorCafChunk___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorCafChunk self, std::vector< Caf::CafChunk * >::difference_type i, std::vector< Caf::CafChunk * >::difference_type j)"""
        return _caf.vectorCafChunk___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorCafChunk self, std::vector< Caf::CafChunk * >::difference_type i)
        __delitem__(vectorCafChunk self, PySliceObject * slice)
        """
        return _caf.vectorCafChunk___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorCafChunk self, PySliceObject * slice) -> vectorCafChunk
        __getitem__(vectorCafChunk self, std::vector< Caf::CafChunk * >::difference_type i) -> CafChunk
        """
        return _caf.vectorCafChunk___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorCafChunk self, PySliceObject * slice, vectorCafChunk v)
        __setitem__(vectorCafChunk self, PySliceObject * slice)
        __setitem__(vectorCafChunk self, std::vector< Caf::CafChunk * >::difference_type i, CafChunk x)
        """
        return _caf.vectorCafChunk___setitem__(self, *args)

    def append(self, *args):
        """append(vectorCafChunk self, CafChunk x)"""
        return _caf.vectorCafChunk_append(self, *args)

    def empty(self):
        """empty(vectorCafChunk self) -> bool"""
        return _caf.vectorCafChunk_empty(self)

    def size(self):
        """size(vectorCafChunk self) -> std::vector< Caf::CafChunk * >::size_type"""
        return _caf.vectorCafChunk_size(self)

    def clear(self):
        """clear(vectorCafChunk self)"""
        return _caf.vectorCafChunk_clear(self)

    def swap(self, *args):
        """swap(vectorCafChunk self, vectorCafChunk v)"""
        return _caf.vectorCafChunk_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorCafChunk self) -> std::vector< Caf::CafChunk * >::allocator_type"""
        return _caf.vectorCafChunk_get_allocator(self)

    def begin(self):
        """begin(vectorCafChunk self) -> std::vector< Caf::CafChunk * >::iterator"""
        return _caf.vectorCafChunk_begin(self)

    def end(self):
        """end(vectorCafChunk self) -> std::vector< Caf::CafChunk * >::iterator"""
        return _caf.vectorCafChunk_end(self)

    def rbegin(self):
        """rbegin(vectorCafChunk self) -> std::vector< Caf::CafChunk * >::reverse_iterator"""
        return _caf.vectorCafChunk_rbegin(self)

    def rend(self):
        """rend(vectorCafChunk self) -> std::vector< Caf::CafChunk * >::reverse_iterator"""
        return _caf.vectorCafChunk_rend(self)

    def pop_back(self):
        """pop_back(vectorCafChunk self)"""
        return _caf.vectorCafChunk_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorCafChunk self, std::vector< Caf::CafChunk * >::iterator pos) -> std::vector< Caf::CafChunk * >::iterator
        erase(vectorCafChunk self, std::vector< Caf::CafChunk * >::iterator first, std::vector< Caf::CafChunk * >::iterator last) -> std::vector< Caf::CafChunk * >::iterator
        """
        return _caf.vectorCafChunk_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.Caf::CafChunk)> self) -> vectorCafChunk
        __init__(std::vector<(p.Caf::CafChunk)> self, vectorCafChunk arg2) -> vectorCafChunk
        __init__(std::vector<(p.Caf::CafChunk)> self, std::vector< Caf::CafChunk * >::size_type size) -> vectorCafChunk
        __init__(std::vector<(p.Caf::CafChunk)> self, std::vector< Caf::CafChunk * >::size_type size, CafChunk value) -> vectorCafChunk
        """
        this = _caf.new_vectorCafChunk(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorCafChunk self, CafChunk x)"""
        return _caf.vectorCafChunk_push_back(self, *args)

    def front(self):
        """front(vectorCafChunk self) -> CafChunk"""
        return _caf.vectorCafChunk_front(self)

    def back(self):
        """back(vectorCafChunk self) -> CafChunk"""
        return _caf.vectorCafChunk_back(self)

    def assign(self, *args):
        """assign(vectorCafChunk self, std::vector< Caf::CafChunk * >::size_type n, CafChunk x)"""
        return _caf.vectorCafChunk_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorCafChunk self, std::vector< Caf::CafChunk * >::size_type new_size)
        resize(vectorCafChunk self, std::vector< Caf::CafChunk * >::size_type new_size, CafChunk x)
        """
        return _caf.vectorCafChunk_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorCafChunk self, std::vector< Caf::CafChunk * >::iterator pos, CafChunk x) -> std::vector< Caf::CafChunk * >::iterator
        insert(vectorCafChunk self, std::vector< Caf::CafChunk * >::iterator pos, std::vector< Caf::CafChunk * >::size_type n, 
            CafChunk x)
        """
        return _caf.vectorCafChunk_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorCafChunk self, std::vector< Caf::CafChunk * >::size_type n)"""
        return _caf.vectorCafChunk_reserve(self, *args)

    def capacity(self):
        """capacity(vectorCafChunk self) -> std::vector< Caf::CafChunk * >::size_type"""
        return _caf.vectorCafChunk_capacity(self)

    __swig_destroy__ = _caf.delete_vectorCafChunk
    __del__ = lambda self : None;
vectorCafChunk_swigregister = _caf.vectorCafChunk_swigregister
vectorCafChunk_swigregister(vectorCafChunk)

class vectorDOBJChunk(_object):
    """Proxy of C++ std::vector<(p.Caf::CafDOBJChunk)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorDOBJChunk, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorDOBJChunk, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorDOBJChunk self) -> SwigPyIterator"""
        return _caf.vectorDOBJChunk_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(vectorDOBJChunk self) -> bool"""
        return _caf.vectorDOBJChunk___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorDOBJChunk self) -> bool"""
        return _caf.vectorDOBJChunk___bool__(self)

    def __len__(self):
        """__len__(vectorDOBJChunk self) -> std::vector< Caf::CafDOBJChunk * >::size_type"""
        return _caf.vectorDOBJChunk___len__(self)

    def pop(self):
        """pop(vectorDOBJChunk self) -> CafDOBJChunk"""
        return _caf.vectorDOBJChunk_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::difference_type i, std::vector< Caf::CafDOBJChunk * >::difference_type j) -> vectorDOBJChunk"""
        return _caf.vectorDOBJChunk___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::difference_type i, std::vector< Caf::CafDOBJChunk * >::difference_type j, 
            vectorDOBJChunk v=std::vector< Caf::CafDOBJChunk *,std::allocator< Caf::CafDOBJChunk * > >())
        __setslice__(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::difference_type i, std::vector< Caf::CafDOBJChunk * >::difference_type j)
        """
        return _caf.vectorDOBJChunk___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::difference_type i, std::vector< Caf::CafDOBJChunk * >::difference_type j)"""
        return _caf.vectorDOBJChunk___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::difference_type i)
        __delitem__(vectorDOBJChunk self, PySliceObject * slice)
        """
        return _caf.vectorDOBJChunk___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorDOBJChunk self, PySliceObject * slice) -> vectorDOBJChunk
        __getitem__(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::difference_type i) -> CafDOBJChunk
        """
        return _caf.vectorDOBJChunk___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorDOBJChunk self, PySliceObject * slice, vectorDOBJChunk v)
        __setitem__(vectorDOBJChunk self, PySliceObject * slice)
        __setitem__(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::difference_type i, CafDOBJChunk x)
        """
        return _caf.vectorDOBJChunk___setitem__(self, *args)

    def append(self, *args):
        """append(vectorDOBJChunk self, CafDOBJChunk x)"""
        return _caf.vectorDOBJChunk_append(self, *args)

    def empty(self):
        """empty(vectorDOBJChunk self) -> bool"""
        return _caf.vectorDOBJChunk_empty(self)

    def size(self):
        """size(vectorDOBJChunk self) -> std::vector< Caf::CafDOBJChunk * >::size_type"""
        return _caf.vectorDOBJChunk_size(self)

    def clear(self):
        """clear(vectorDOBJChunk self)"""
        return _caf.vectorDOBJChunk_clear(self)

    def swap(self, *args):
        """swap(vectorDOBJChunk self, vectorDOBJChunk v)"""
        return _caf.vectorDOBJChunk_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorDOBJChunk self) -> std::vector< Caf::CafDOBJChunk * >::allocator_type"""
        return _caf.vectorDOBJChunk_get_allocator(self)

    def begin(self):
        """begin(vectorDOBJChunk self) -> std::vector< Caf::CafDOBJChunk * >::iterator"""
        return _caf.vectorDOBJChunk_begin(self)

    def end(self):
        """end(vectorDOBJChunk self) -> std::vector< Caf::CafDOBJChunk * >::iterator"""
        return _caf.vectorDOBJChunk_end(self)

    def rbegin(self):
        """rbegin(vectorDOBJChunk self) -> std::vector< Caf::CafDOBJChunk * >::reverse_iterator"""
        return _caf.vectorDOBJChunk_rbegin(self)

    def rend(self):
        """rend(vectorDOBJChunk self) -> std::vector< Caf::CafDOBJChunk * >::reverse_iterator"""
        return _caf.vectorDOBJChunk_rend(self)

    def pop_back(self):
        """pop_back(vectorDOBJChunk self)"""
        return _caf.vectorDOBJChunk_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::iterator pos) -> std::vector< Caf::CafDOBJChunk * >::iterator
        erase(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::iterator first, std::vector< Caf::CafDOBJChunk * >::iterator last) -> std::vector< Caf::CafDOBJChunk * >::iterator
        """
        return _caf.vectorDOBJChunk_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.Caf::CafDOBJChunk)> self) -> vectorDOBJChunk
        __init__(std::vector<(p.Caf::CafDOBJChunk)> self, vectorDOBJChunk arg2) -> vectorDOBJChunk
        __init__(std::vector<(p.Caf::CafDOBJChunk)> self, std::vector< Caf::CafDOBJChunk * >::size_type size) -> vectorDOBJChunk
        __init__(std::vector<(p.Caf::CafDOBJChunk)> self, std::vector< Caf::CafDOBJChunk * >::size_type size, CafDOBJChunk value) -> vectorDOBJChunk
        """
        this = _caf.new_vectorDOBJChunk(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorDOBJChunk self, CafDOBJChunk x)"""
        return _caf.vectorDOBJChunk_push_back(self, *args)

    def front(self):
        """front(vectorDOBJChunk self) -> CafDOBJChunk"""
        return _caf.vectorDOBJChunk_front(self)

    def back(self):
        """back(vectorDOBJChunk self) -> CafDOBJChunk"""
        return _caf.vectorDOBJChunk_back(self)

    def assign(self, *args):
        """assign(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::size_type n, CafDOBJChunk x)"""
        return _caf.vectorDOBJChunk_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::size_type new_size)
        resize(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::size_type new_size, CafDOBJChunk x)
        """
        return _caf.vectorDOBJChunk_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::iterator pos, CafDOBJChunk x) -> std::vector< Caf::CafDOBJChunk * >::iterator
        insert(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::iterator pos, std::vector< Caf::CafDOBJChunk * >::size_type n, 
            CafDOBJChunk x)
        """
        return _caf.vectorDOBJChunk_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorDOBJChunk self, std::vector< Caf::CafDOBJChunk * >::size_type n)"""
        return _caf.vectorDOBJChunk_reserve(self, *args)

    def capacity(self):
        """capacity(vectorDOBJChunk self) -> std::vector< Caf::CafDOBJChunk * >::size_type"""
        return _caf.vectorDOBJChunk_capacity(self)

    __swig_destroy__ = _caf.delete_vectorDOBJChunk
    __del__ = lambda self : None;
vectorDOBJChunk_swigregister = _caf.vectorDOBJChunk_swigregister
vectorDOBJChunk_swigregister(vectorDOBJChunk)

class vectorLeafChunkString(_object):
    """Proxy of C++ std::vector<(p.Caf::CafLeafChunk<(std::string)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorLeafChunkString, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorLeafChunkString, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorLeafChunkString self) -> SwigPyIterator"""
        return _caf.vectorLeafChunkString_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(vectorLeafChunkString self) -> bool"""
        return _caf.vectorLeafChunkString___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorLeafChunkString self) -> bool"""
        return _caf.vectorLeafChunkString___bool__(self)

    def __len__(self):
        """__len__(vectorLeafChunkString self) -> std::vector< Caf::CafLeafChunk< std::string > * >::size_type"""
        return _caf.vectorLeafChunkString___len__(self)

    def pop(self):
        """pop(vectorLeafChunkString self) -> CafLeafChunkString"""
        return _caf.vectorLeafChunkString_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::difference_type i, std::vector< Caf::CafLeafChunk< std::string > * >::difference_type j) -> vectorLeafChunkString"""
        return _caf.vectorLeafChunkString___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::difference_type i, std::vector< Caf::CafLeafChunk< std::string > * >::difference_type j, 
            vectorLeafChunkString v=std::vector< Caf::CafLeafChunk< std::string > *,std::allocator< Caf::CafLeafChunk< std::string > * > >())
        __setslice__(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::difference_type i, std::vector< Caf::CafLeafChunk< std::string > * >::difference_type j)
        """
        return _caf.vectorLeafChunkString___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::difference_type i, std::vector< Caf::CafLeafChunk< std::string > * >::difference_type j)"""
        return _caf.vectorLeafChunkString___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::difference_type i)
        __delitem__(vectorLeafChunkString self, PySliceObject * slice)
        """
        return _caf.vectorLeafChunkString___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorLeafChunkString self, PySliceObject * slice) -> vectorLeafChunkString
        __getitem__(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::difference_type i) -> CafLeafChunkString
        """
        return _caf.vectorLeafChunkString___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorLeafChunkString self, PySliceObject * slice, vectorLeafChunkString v)
        __setitem__(vectorLeafChunkString self, PySliceObject * slice)
        __setitem__(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::difference_type i, CafLeafChunkString x)
        """
        return _caf.vectorLeafChunkString___setitem__(self, *args)

    def append(self, *args):
        """append(vectorLeafChunkString self, CafLeafChunkString x)"""
        return _caf.vectorLeafChunkString_append(self, *args)

    def empty(self):
        """empty(vectorLeafChunkString self) -> bool"""
        return _caf.vectorLeafChunkString_empty(self)

    def size(self):
        """size(vectorLeafChunkString self) -> std::vector< Caf::CafLeafChunk< std::string > * >::size_type"""
        return _caf.vectorLeafChunkString_size(self)

    def clear(self):
        """clear(vectorLeafChunkString self)"""
        return _caf.vectorLeafChunkString_clear(self)

    def swap(self, *args):
        """swap(vectorLeafChunkString self, vectorLeafChunkString v)"""
        return _caf.vectorLeafChunkString_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorLeafChunkString self) -> std::vector< Caf::CafLeafChunk< std::string > * >::allocator_type"""
        return _caf.vectorLeafChunkString_get_allocator(self)

    def begin(self):
        """begin(vectorLeafChunkString self) -> std::vector< Caf::CafLeafChunk< std::string > * >::iterator"""
        return _caf.vectorLeafChunkString_begin(self)

    def end(self):
        """end(vectorLeafChunkString self) -> std::vector< Caf::CafLeafChunk< std::string > * >::iterator"""
        return _caf.vectorLeafChunkString_end(self)

    def rbegin(self):
        """rbegin(vectorLeafChunkString self) -> std::vector< Caf::CafLeafChunk< std::string > * >::reverse_iterator"""
        return _caf.vectorLeafChunkString_rbegin(self)

    def rend(self):
        """rend(vectorLeafChunkString self) -> std::vector< Caf::CafLeafChunk< std::string > * >::reverse_iterator"""
        return _caf.vectorLeafChunkString_rend(self)

    def pop_back(self):
        """pop_back(vectorLeafChunkString self)"""
        return _caf.vectorLeafChunkString_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::iterator pos) -> std::vector< Caf::CafLeafChunk< std::string > * >::iterator
        erase(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::iterator first, std::vector< Caf::CafLeafChunk< std::string > * >::iterator last) -> std::vector< Caf::CafLeafChunk< std::string > * >::iterator
        """
        return _caf.vectorLeafChunkString_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.Caf::CafLeafChunk<(std::string)>)> self) -> vectorLeafChunkString
        __init__(std::vector<(p.Caf::CafLeafChunk<(std::string)>)> self, vectorLeafChunkString arg2) -> vectorLeafChunkString
        __init__(std::vector<(p.Caf::CafLeafChunk<(std::string)>)> self, std::vector< Caf::CafLeafChunk< std::string > * >::size_type size) -> vectorLeafChunkString
        __init__(std::vector<(p.Caf::CafLeafChunk<(std::string)>)> self, std::vector< Caf::CafLeafChunk< std::string > * >::size_type size, CafLeafChunkString value) -> vectorLeafChunkString
        """
        this = _caf.new_vectorLeafChunkString(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorLeafChunkString self, CafLeafChunkString x)"""
        return _caf.vectorLeafChunkString_push_back(self, *args)

    def front(self):
        """front(vectorLeafChunkString self) -> CafLeafChunkString"""
        return _caf.vectorLeafChunkString_front(self)

    def back(self):
        """back(vectorLeafChunkString self) -> CafLeafChunkString"""
        return _caf.vectorLeafChunkString_back(self)

    def assign(self, *args):
        """assign(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::size_type n, CafLeafChunkString x)"""
        return _caf.vectorLeafChunkString_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::size_type new_size)
        resize(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::size_type new_size, CafLeafChunkString x)
        """
        return _caf.vectorLeafChunkString_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::iterator pos, CafLeafChunkString x) -> std::vector< Caf::CafLeafChunk< std::string > * >::iterator
        insert(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::iterator pos, std::vector< Caf::CafLeafChunk< std::string > * >::size_type n, 
            CafLeafChunkString x)
        """
        return _caf.vectorLeafChunkString_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorLeafChunkString self, std::vector< Caf::CafLeafChunk< std::string > * >::size_type n)"""
        return _caf.vectorLeafChunkString_reserve(self, *args)

    def capacity(self):
        """capacity(vectorLeafChunkString self) -> std::vector< Caf::CafLeafChunk< std::string > * >::size_type"""
        return _caf.vectorLeafChunkString_capacity(self)

    __swig_destroy__ = _caf.delete_vectorLeafChunkString
    __del__ = lambda self : None;
vectorLeafChunkString_swigregister = _caf.vectorLeafChunkString_swigregister
vectorLeafChunkString_swigregister(vectorLeafChunkString)

class vectorLeafChunkFloat(_object):
    """Proxy of C++ std::vector<(p.Caf::CafLeafChunk<(float)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorLeafChunkFloat, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorLeafChunkFloat, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorLeafChunkFloat self) -> SwigPyIterator"""
        return _caf.vectorLeafChunkFloat_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(vectorLeafChunkFloat self) -> bool"""
        return _caf.vectorLeafChunkFloat___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorLeafChunkFloat self) -> bool"""
        return _caf.vectorLeafChunkFloat___bool__(self)

    def __len__(self):
        """__len__(vectorLeafChunkFloat self) -> std::vector< Caf::CafLeafChunk< float > * >::size_type"""
        return _caf.vectorLeafChunkFloat___len__(self)

    def pop(self):
        """pop(vectorLeafChunkFloat self) -> CafLeafChunkFloat"""
        return _caf.vectorLeafChunkFloat_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::difference_type i, std::vector< Caf::CafLeafChunk< float > * >::difference_type j) -> vectorLeafChunkFloat"""
        return _caf.vectorLeafChunkFloat___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::difference_type i, std::vector< Caf::CafLeafChunk< float > * >::difference_type j, 
            vectorLeafChunkFloat v=std::vector< Caf::CafLeafChunk< float > *,std::allocator< Caf::CafLeafChunk< float > * > >())
        __setslice__(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::difference_type i, std::vector< Caf::CafLeafChunk< float > * >::difference_type j)
        """
        return _caf.vectorLeafChunkFloat___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::difference_type i, std::vector< Caf::CafLeafChunk< float > * >::difference_type j)"""
        return _caf.vectorLeafChunkFloat___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::difference_type i)
        __delitem__(vectorLeafChunkFloat self, PySliceObject * slice)
        """
        return _caf.vectorLeafChunkFloat___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorLeafChunkFloat self, PySliceObject * slice) -> vectorLeafChunkFloat
        __getitem__(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::difference_type i) -> CafLeafChunkFloat
        """
        return _caf.vectorLeafChunkFloat___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorLeafChunkFloat self, PySliceObject * slice, vectorLeafChunkFloat v)
        __setitem__(vectorLeafChunkFloat self, PySliceObject * slice)
        __setitem__(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::difference_type i, CafLeafChunkFloat x)
        """
        return _caf.vectorLeafChunkFloat___setitem__(self, *args)

    def append(self, *args):
        """append(vectorLeafChunkFloat self, CafLeafChunkFloat x)"""
        return _caf.vectorLeafChunkFloat_append(self, *args)

    def empty(self):
        """empty(vectorLeafChunkFloat self) -> bool"""
        return _caf.vectorLeafChunkFloat_empty(self)

    def size(self):
        """size(vectorLeafChunkFloat self) -> std::vector< Caf::CafLeafChunk< float > * >::size_type"""
        return _caf.vectorLeafChunkFloat_size(self)

    def clear(self):
        """clear(vectorLeafChunkFloat self)"""
        return _caf.vectorLeafChunkFloat_clear(self)

    def swap(self, *args):
        """swap(vectorLeafChunkFloat self, vectorLeafChunkFloat v)"""
        return _caf.vectorLeafChunkFloat_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorLeafChunkFloat self) -> std::vector< Caf::CafLeafChunk< float > * >::allocator_type"""
        return _caf.vectorLeafChunkFloat_get_allocator(self)

    def begin(self):
        """begin(vectorLeafChunkFloat self) -> std::vector< Caf::CafLeafChunk< float > * >::iterator"""
        return _caf.vectorLeafChunkFloat_begin(self)

    def end(self):
        """end(vectorLeafChunkFloat self) -> std::vector< Caf::CafLeafChunk< float > * >::iterator"""
        return _caf.vectorLeafChunkFloat_end(self)

    def rbegin(self):
        """rbegin(vectorLeafChunkFloat self) -> std::vector< Caf::CafLeafChunk< float > * >::reverse_iterator"""
        return _caf.vectorLeafChunkFloat_rbegin(self)

    def rend(self):
        """rend(vectorLeafChunkFloat self) -> std::vector< Caf::CafLeafChunk< float > * >::reverse_iterator"""
        return _caf.vectorLeafChunkFloat_rend(self)

    def pop_back(self):
        """pop_back(vectorLeafChunkFloat self)"""
        return _caf.vectorLeafChunkFloat_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::iterator pos) -> std::vector< Caf::CafLeafChunk< float > * >::iterator
        erase(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::iterator first, std::vector< Caf::CafLeafChunk< float > * >::iterator last) -> std::vector< Caf::CafLeafChunk< float > * >::iterator
        """
        return _caf.vectorLeafChunkFloat_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.Caf::CafLeafChunk<(float)>)> self) -> vectorLeafChunkFloat
        __init__(std::vector<(p.Caf::CafLeafChunk<(float)>)> self, vectorLeafChunkFloat arg2) -> vectorLeafChunkFloat
        __init__(std::vector<(p.Caf::CafLeafChunk<(float)>)> self, std::vector< Caf::CafLeafChunk< float > * >::size_type size) -> vectorLeafChunkFloat
        __init__(std::vector<(p.Caf::CafLeafChunk<(float)>)> self, std::vector< Caf::CafLeafChunk< float > * >::size_type size, CafLeafChunkFloat value) -> vectorLeafChunkFloat
        """
        this = _caf.new_vectorLeafChunkFloat(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorLeafChunkFloat self, CafLeafChunkFloat x)"""
        return _caf.vectorLeafChunkFloat_push_back(self, *args)

    def front(self):
        """front(vectorLeafChunkFloat self) -> CafLeafChunkFloat"""
        return _caf.vectorLeafChunkFloat_front(self)

    def back(self):
        """back(vectorLeafChunkFloat self) -> CafLeafChunkFloat"""
        return _caf.vectorLeafChunkFloat_back(self)

    def assign(self, *args):
        """assign(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::size_type n, CafLeafChunkFloat x)"""
        return _caf.vectorLeafChunkFloat_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::size_type new_size)
        resize(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::size_type new_size, CafLeafChunkFloat x)
        """
        return _caf.vectorLeafChunkFloat_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::iterator pos, CafLeafChunkFloat x) -> std::vector< Caf::CafLeafChunk< float > * >::iterator
        insert(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::iterator pos, std::vector< Caf::CafLeafChunk< float > * >::size_type n, 
            CafLeafChunkFloat x)
        """
        return _caf.vectorLeafChunkFloat_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorLeafChunkFloat self, std::vector< Caf::CafLeafChunk< float > * >::size_type n)"""
        return _caf.vectorLeafChunkFloat_reserve(self, *args)

    def capacity(self):
        """capacity(vectorLeafChunkFloat self) -> std::vector< Caf::CafLeafChunk< float > * >::size_type"""
        return _caf.vectorLeafChunkFloat_capacity(self)

    __swig_destroy__ = _caf.delete_vectorLeafChunkFloat
    __del__ = lambda self : None;
vectorLeafChunkFloat_swigregister = _caf.vectorLeafChunkFloat_swigregister
vectorLeafChunkFloat_swigregister(vectorLeafChunkFloat)

class vectorLeafChunkDouble(_object):
    """Proxy of C++ std::vector<(p.Caf::CafLeafChunk<(double)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorLeafChunkDouble, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorLeafChunkDouble, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorLeafChunkDouble self) -> SwigPyIterator"""
        return _caf.vectorLeafChunkDouble_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(vectorLeafChunkDouble self) -> bool"""
        return _caf.vectorLeafChunkDouble___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorLeafChunkDouble self) -> bool"""
        return _caf.vectorLeafChunkDouble___bool__(self)

    def __len__(self):
        """__len__(vectorLeafChunkDouble self) -> std::vector< Caf::CafLeafChunk< double > * >::size_type"""
        return _caf.vectorLeafChunkDouble___len__(self)

    def pop(self):
        """pop(vectorLeafChunkDouble self) -> CafLeafChunkDouble"""
        return _caf.vectorLeafChunkDouble_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::difference_type i, std::vector< Caf::CafLeafChunk< double > * >::difference_type j) -> vectorLeafChunkDouble"""
        return _caf.vectorLeafChunkDouble___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::difference_type i, std::vector< Caf::CafLeafChunk< double > * >::difference_type j, 
            vectorLeafChunkDouble v=std::vector< Caf::CafLeafChunk< double > *,std::allocator< Caf::CafLeafChunk< double > * > >())
        __setslice__(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::difference_type i, std::vector< Caf::CafLeafChunk< double > * >::difference_type j)
        """
        return _caf.vectorLeafChunkDouble___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::difference_type i, std::vector< Caf::CafLeafChunk< double > * >::difference_type j)"""
        return _caf.vectorLeafChunkDouble___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::difference_type i)
        __delitem__(vectorLeafChunkDouble self, PySliceObject * slice)
        """
        return _caf.vectorLeafChunkDouble___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorLeafChunkDouble self, PySliceObject * slice) -> vectorLeafChunkDouble
        __getitem__(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::difference_type i) -> CafLeafChunkDouble
        """
        return _caf.vectorLeafChunkDouble___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorLeafChunkDouble self, PySliceObject * slice, vectorLeafChunkDouble v)
        __setitem__(vectorLeafChunkDouble self, PySliceObject * slice)
        __setitem__(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::difference_type i, CafLeafChunkDouble x)
        """
        return _caf.vectorLeafChunkDouble___setitem__(self, *args)

    def append(self, *args):
        """append(vectorLeafChunkDouble self, CafLeafChunkDouble x)"""
        return _caf.vectorLeafChunkDouble_append(self, *args)

    def empty(self):
        """empty(vectorLeafChunkDouble self) -> bool"""
        return _caf.vectorLeafChunkDouble_empty(self)

    def size(self):
        """size(vectorLeafChunkDouble self) -> std::vector< Caf::CafLeafChunk< double > * >::size_type"""
        return _caf.vectorLeafChunkDouble_size(self)

    def clear(self):
        """clear(vectorLeafChunkDouble self)"""
        return _caf.vectorLeafChunkDouble_clear(self)

    def swap(self, *args):
        """swap(vectorLeafChunkDouble self, vectorLeafChunkDouble v)"""
        return _caf.vectorLeafChunkDouble_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorLeafChunkDouble self) -> std::vector< Caf::CafLeafChunk< double > * >::allocator_type"""
        return _caf.vectorLeafChunkDouble_get_allocator(self)

    def begin(self):
        """begin(vectorLeafChunkDouble self) -> std::vector< Caf::CafLeafChunk< double > * >::iterator"""
        return _caf.vectorLeafChunkDouble_begin(self)

    def end(self):
        """end(vectorLeafChunkDouble self) -> std::vector< Caf::CafLeafChunk< double > * >::iterator"""
        return _caf.vectorLeafChunkDouble_end(self)

    def rbegin(self):
        """rbegin(vectorLeafChunkDouble self) -> std::vector< Caf::CafLeafChunk< double > * >::reverse_iterator"""
        return _caf.vectorLeafChunkDouble_rbegin(self)

    def rend(self):
        """rend(vectorLeafChunkDouble self) -> std::vector< Caf::CafLeafChunk< double > * >::reverse_iterator"""
        return _caf.vectorLeafChunkDouble_rend(self)

    def pop_back(self):
        """pop_back(vectorLeafChunkDouble self)"""
        return _caf.vectorLeafChunkDouble_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::iterator pos) -> std::vector< Caf::CafLeafChunk< double > * >::iterator
        erase(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::iterator first, std::vector< Caf::CafLeafChunk< double > * >::iterator last) -> std::vector< Caf::CafLeafChunk< double > * >::iterator
        """
        return _caf.vectorLeafChunkDouble_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.Caf::CafLeafChunk<(double)>)> self) -> vectorLeafChunkDouble
        __init__(std::vector<(p.Caf::CafLeafChunk<(double)>)> self, vectorLeafChunkDouble arg2) -> vectorLeafChunkDouble
        __init__(std::vector<(p.Caf::CafLeafChunk<(double)>)> self, std::vector< Caf::CafLeafChunk< double > * >::size_type size) -> vectorLeafChunkDouble
        __init__(std::vector<(p.Caf::CafLeafChunk<(double)>)> self, std::vector< Caf::CafLeafChunk< double > * >::size_type size, CafLeafChunkDouble value) -> vectorLeafChunkDouble
        """
        this = _caf.new_vectorLeafChunkDouble(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorLeafChunkDouble self, CafLeafChunkDouble x)"""
        return _caf.vectorLeafChunkDouble_push_back(self, *args)

    def front(self):
        """front(vectorLeafChunkDouble self) -> CafLeafChunkDouble"""
        return _caf.vectorLeafChunkDouble_front(self)

    def back(self):
        """back(vectorLeafChunkDouble self) -> CafLeafChunkDouble"""
        return _caf.vectorLeafChunkDouble_back(self)

    def assign(self, *args):
        """assign(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::size_type n, CafLeafChunkDouble x)"""
        return _caf.vectorLeafChunkDouble_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::size_type new_size)
        resize(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::size_type new_size, CafLeafChunkDouble x)
        """
        return _caf.vectorLeafChunkDouble_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::iterator pos, CafLeafChunkDouble x) -> std::vector< Caf::CafLeafChunk< double > * >::iterator
        insert(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::iterator pos, std::vector< Caf::CafLeafChunk< double > * >::size_type n, 
            CafLeafChunkDouble x)
        """
        return _caf.vectorLeafChunkDouble_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorLeafChunkDouble self, std::vector< Caf::CafLeafChunk< double > * >::size_type n)"""
        return _caf.vectorLeafChunkDouble_reserve(self, *args)

    def capacity(self):
        """capacity(vectorLeafChunkDouble self) -> std::vector< Caf::CafLeafChunk< double > * >::size_type"""
        return _caf.vectorLeafChunkDouble_capacity(self)

    __swig_destroy__ = _caf.delete_vectorLeafChunkDouble
    __del__ = lambda self : None;
vectorLeafChunkDouble_swigregister = _caf.vectorLeafChunkDouble_swigregister
vectorLeafChunkDouble_swigregister(vectorLeafChunkDouble)

class vectorLeafChunkInt32(_object):
    """Proxy of C++ std::vector<(p.Caf::CafLeafChunk<(int32_t)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorLeafChunkInt32, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorLeafChunkInt32, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorLeafChunkInt32 self) -> SwigPyIterator"""
        return _caf.vectorLeafChunkInt32_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(vectorLeafChunkInt32 self) -> bool"""
        return _caf.vectorLeafChunkInt32___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorLeafChunkInt32 self) -> bool"""
        return _caf.vectorLeafChunkInt32___bool__(self)

    def __len__(self):
        """__len__(vectorLeafChunkInt32 self) -> std::vector< Caf::CafLeafChunk< int > * >::size_type"""
        return _caf.vectorLeafChunkInt32___len__(self)

    def pop(self):
        """pop(vectorLeafChunkInt32 self) -> CafLeafChunkInt32"""
        return _caf.vectorLeafChunkInt32_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::difference_type i, std::vector< Caf::CafLeafChunk< int > * >::difference_type j) -> vectorLeafChunkInt32"""
        return _caf.vectorLeafChunkInt32___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::difference_type i, std::vector< Caf::CafLeafChunk< int > * >::difference_type j, 
            vectorLeafChunkInt32 v=std::vector< Caf::CafLeafChunk< int32_t > *,std::allocator< Caf::CafLeafChunk< int32_t > * > >())
        __setslice__(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::difference_type i, std::vector< Caf::CafLeafChunk< int > * >::difference_type j)
        """
        return _caf.vectorLeafChunkInt32___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::difference_type i, std::vector< Caf::CafLeafChunk< int > * >::difference_type j)"""
        return _caf.vectorLeafChunkInt32___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::difference_type i)
        __delitem__(vectorLeafChunkInt32 self, PySliceObject * slice)
        """
        return _caf.vectorLeafChunkInt32___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorLeafChunkInt32 self, PySliceObject * slice) -> vectorLeafChunkInt32
        __getitem__(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::difference_type i) -> CafLeafChunkInt32
        """
        return _caf.vectorLeafChunkInt32___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorLeafChunkInt32 self, PySliceObject * slice, vectorLeafChunkInt32 v)
        __setitem__(vectorLeafChunkInt32 self, PySliceObject * slice)
        __setitem__(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::difference_type i, CafLeafChunkInt32 x)
        """
        return _caf.vectorLeafChunkInt32___setitem__(self, *args)

    def append(self, *args):
        """append(vectorLeafChunkInt32 self, CafLeafChunkInt32 x)"""
        return _caf.vectorLeafChunkInt32_append(self, *args)

    def empty(self):
        """empty(vectorLeafChunkInt32 self) -> bool"""
        return _caf.vectorLeafChunkInt32_empty(self)

    def size(self):
        """size(vectorLeafChunkInt32 self) -> std::vector< Caf::CafLeafChunk< int > * >::size_type"""
        return _caf.vectorLeafChunkInt32_size(self)

    def clear(self):
        """clear(vectorLeafChunkInt32 self)"""
        return _caf.vectorLeafChunkInt32_clear(self)

    def swap(self, *args):
        """swap(vectorLeafChunkInt32 self, vectorLeafChunkInt32 v)"""
        return _caf.vectorLeafChunkInt32_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorLeafChunkInt32 self) -> std::vector< Caf::CafLeafChunk< int > * >::allocator_type"""
        return _caf.vectorLeafChunkInt32_get_allocator(self)

    def begin(self):
        """begin(vectorLeafChunkInt32 self) -> std::vector< Caf::CafLeafChunk< int > * >::iterator"""
        return _caf.vectorLeafChunkInt32_begin(self)

    def end(self):
        """end(vectorLeafChunkInt32 self) -> std::vector< Caf::CafLeafChunk< int > * >::iterator"""
        return _caf.vectorLeafChunkInt32_end(self)

    def rbegin(self):
        """rbegin(vectorLeafChunkInt32 self) -> std::vector< Caf::CafLeafChunk< int > * >::reverse_iterator"""
        return _caf.vectorLeafChunkInt32_rbegin(self)

    def rend(self):
        """rend(vectorLeafChunkInt32 self) -> std::vector< Caf::CafLeafChunk< int > * >::reverse_iterator"""
        return _caf.vectorLeafChunkInt32_rend(self)

    def pop_back(self):
        """pop_back(vectorLeafChunkInt32 self)"""
        return _caf.vectorLeafChunkInt32_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::iterator pos) -> std::vector< Caf::CafLeafChunk< int > * >::iterator
        erase(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::iterator first, std::vector< Caf::CafLeafChunk< int > * >::iterator last) -> std::vector< Caf::CafLeafChunk< int > * >::iterator
        """
        return _caf.vectorLeafChunkInt32_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.Caf::CafLeafChunk<(int32_t)>)> self) -> vectorLeafChunkInt32
        __init__(std::vector<(p.Caf::CafLeafChunk<(int32_t)>)> self, vectorLeafChunkInt32 arg2) -> vectorLeafChunkInt32
        __init__(std::vector<(p.Caf::CafLeafChunk<(int32_t)>)> self, std::vector< Caf::CafLeafChunk< int > * >::size_type size) -> vectorLeafChunkInt32
        __init__(std::vector<(p.Caf::CafLeafChunk<(int32_t)>)> self, std::vector< Caf::CafLeafChunk< int > * >::size_type size, CafLeafChunkInt32 value) -> vectorLeafChunkInt32
        """
        this = _caf.new_vectorLeafChunkInt32(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorLeafChunkInt32 self, CafLeafChunkInt32 x)"""
        return _caf.vectorLeafChunkInt32_push_back(self, *args)

    def front(self):
        """front(vectorLeafChunkInt32 self) -> CafLeafChunkInt32"""
        return _caf.vectorLeafChunkInt32_front(self)

    def back(self):
        """back(vectorLeafChunkInt32 self) -> CafLeafChunkInt32"""
        return _caf.vectorLeafChunkInt32_back(self)

    def assign(self, *args):
        """assign(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::size_type n, CafLeafChunkInt32 x)"""
        return _caf.vectorLeafChunkInt32_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::size_type new_size)
        resize(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::size_type new_size, CafLeafChunkInt32 x)
        """
        return _caf.vectorLeafChunkInt32_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::iterator pos, CafLeafChunkInt32 x) -> std::vector< Caf::CafLeafChunk< int > * >::iterator
        insert(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::iterator pos, std::vector< Caf::CafLeafChunk< int > * >::size_type n, 
            CafLeafChunkInt32 x)
        """
        return _caf.vectorLeafChunkInt32_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorLeafChunkInt32 self, std::vector< Caf::CafLeafChunk< int > * >::size_type n)"""
        return _caf.vectorLeafChunkInt32_reserve(self, *args)

    def capacity(self):
        """capacity(vectorLeafChunkInt32 self) -> std::vector< Caf::CafLeafChunk< int > * >::size_type"""
        return _caf.vectorLeafChunkInt32_capacity(self)

    __swig_destroy__ = _caf.delete_vectorLeafChunkInt32
    __del__ = lambda self : None;
vectorLeafChunkInt32_swigregister = _caf.vectorLeafChunkInt32_swigregister
vectorLeafChunkInt32_swigregister(vectorLeafChunkInt32)

class vectorLeafChunkInt64(_object):
    """Proxy of C++ std::vector<(p.Caf::CafLeafChunk<(int64_t)>)> class"""
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vectorLeafChunkInt64, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vectorLeafChunkInt64, name)
    __repr__ = _swig_repr
    def iterator(self):
        """iterator(vectorLeafChunkInt64 self) -> SwigPyIterator"""
        return _caf.vectorLeafChunkInt64_iterator(self)

    def __iter__(self): return self.iterator()
    def __bool__(self):
        """__nonzero__(vectorLeafChunkInt64 self) -> bool"""
        return _caf.vectorLeafChunkInt64___nonzero__(self)

    def __bool__(self):
        """__bool__(vectorLeafChunkInt64 self) -> bool"""
        return _caf.vectorLeafChunkInt64___bool__(self)

    def __len__(self):
        """__len__(vectorLeafChunkInt64 self) -> std::vector< Caf::CafLeafChunk< long long > * >::size_type"""
        return _caf.vectorLeafChunkInt64___len__(self)

    def pop(self):
        """pop(vectorLeafChunkInt64 self) -> CafLeafChunkInt64"""
        return _caf.vectorLeafChunkInt64_pop(self)

    def __getslice__(self, *args):
        """__getslice__(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::difference_type i, std::vector< Caf::CafLeafChunk< long long > * >::difference_type j) -> vectorLeafChunkInt64"""
        return _caf.vectorLeafChunkInt64___getslice__(self, *args)

    def __setslice__(self, *args):
        """
        __setslice__(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::difference_type i, std::vector< Caf::CafLeafChunk< long long > * >::difference_type j, 
            vectorLeafChunkInt64 v=std::vector< Caf::CafLeafChunk< int64_t > *,std::allocator< Caf::CafLeafChunk< int64_t > * > >())
        __setslice__(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::difference_type i, std::vector< Caf::CafLeafChunk< long long > * >::difference_type j)
        """
        return _caf.vectorLeafChunkInt64___setslice__(self, *args)

    def __delslice__(self, *args):
        """__delslice__(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::difference_type i, std::vector< Caf::CafLeafChunk< long long > * >::difference_type j)"""
        return _caf.vectorLeafChunkInt64___delslice__(self, *args)

    def __delitem__(self, *args):
        """
        __delitem__(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::difference_type i)
        __delitem__(vectorLeafChunkInt64 self, PySliceObject * slice)
        """
        return _caf.vectorLeafChunkInt64___delitem__(self, *args)

    def __getitem__(self, *args):
        """
        __getitem__(vectorLeafChunkInt64 self, PySliceObject * slice) -> vectorLeafChunkInt64
        __getitem__(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::difference_type i) -> CafLeafChunkInt64
        """
        return _caf.vectorLeafChunkInt64___getitem__(self, *args)

    def __setitem__(self, *args):
        """
        __setitem__(vectorLeafChunkInt64 self, PySliceObject * slice, vectorLeafChunkInt64 v)
        __setitem__(vectorLeafChunkInt64 self, PySliceObject * slice)
        __setitem__(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::difference_type i, CafLeafChunkInt64 x)
        """
        return _caf.vectorLeafChunkInt64___setitem__(self, *args)

    def append(self, *args):
        """append(vectorLeafChunkInt64 self, CafLeafChunkInt64 x)"""
        return _caf.vectorLeafChunkInt64_append(self, *args)

    def empty(self):
        """empty(vectorLeafChunkInt64 self) -> bool"""
        return _caf.vectorLeafChunkInt64_empty(self)

    def size(self):
        """size(vectorLeafChunkInt64 self) -> std::vector< Caf::CafLeafChunk< long long > * >::size_type"""
        return _caf.vectorLeafChunkInt64_size(self)

    def clear(self):
        """clear(vectorLeafChunkInt64 self)"""
        return _caf.vectorLeafChunkInt64_clear(self)

    def swap(self, *args):
        """swap(vectorLeafChunkInt64 self, vectorLeafChunkInt64 v)"""
        return _caf.vectorLeafChunkInt64_swap(self, *args)

    def get_allocator(self):
        """get_allocator(vectorLeafChunkInt64 self) -> std::vector< Caf::CafLeafChunk< long long > * >::allocator_type"""
        return _caf.vectorLeafChunkInt64_get_allocator(self)

    def begin(self):
        """begin(vectorLeafChunkInt64 self) -> std::vector< Caf::CafLeafChunk< long long > * >::iterator"""
        return _caf.vectorLeafChunkInt64_begin(self)

    def end(self):
        """end(vectorLeafChunkInt64 self) -> std::vector< Caf::CafLeafChunk< long long > * >::iterator"""
        return _caf.vectorLeafChunkInt64_end(self)

    def rbegin(self):
        """rbegin(vectorLeafChunkInt64 self) -> std::vector< Caf::CafLeafChunk< long long > * >::reverse_iterator"""
        return _caf.vectorLeafChunkInt64_rbegin(self)

    def rend(self):
        """rend(vectorLeafChunkInt64 self) -> std::vector< Caf::CafLeafChunk< long long > * >::reverse_iterator"""
        return _caf.vectorLeafChunkInt64_rend(self)

    def pop_back(self):
        """pop_back(vectorLeafChunkInt64 self)"""
        return _caf.vectorLeafChunkInt64_pop_back(self)

    def erase(self, *args):
        """
        erase(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::iterator pos) -> std::vector< Caf::CafLeafChunk< long long > * >::iterator
        erase(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::iterator first, std::vector< Caf::CafLeafChunk< long long > * >::iterator last) -> std::vector< Caf::CafLeafChunk< long long > * >::iterator
        """
        return _caf.vectorLeafChunkInt64_erase(self, *args)

    def __init__(self, *args): 
        """
        __init__(std::vector<(p.Caf::CafLeafChunk<(int64_t)>)> self) -> vectorLeafChunkInt64
        __init__(std::vector<(p.Caf::CafLeafChunk<(int64_t)>)> self, vectorLeafChunkInt64 arg2) -> vectorLeafChunkInt64
        __init__(std::vector<(p.Caf::CafLeafChunk<(int64_t)>)> self, std::vector< Caf::CafLeafChunk< long long > * >::size_type size) -> vectorLeafChunkInt64
        __init__(std::vector<(p.Caf::CafLeafChunk<(int64_t)>)> self, std::vector< Caf::CafLeafChunk< long long > * >::size_type size, CafLeafChunkInt64 value) -> vectorLeafChunkInt64
        """
        this = _caf.new_vectorLeafChunkInt64(*args)
        try: self.this.append(this)
        except: self.this = this
    def push_back(self, *args):
        """push_back(vectorLeafChunkInt64 self, CafLeafChunkInt64 x)"""
        return _caf.vectorLeafChunkInt64_push_back(self, *args)

    def front(self):
        """front(vectorLeafChunkInt64 self) -> CafLeafChunkInt64"""
        return _caf.vectorLeafChunkInt64_front(self)

    def back(self):
        """back(vectorLeafChunkInt64 self) -> CafLeafChunkInt64"""
        return _caf.vectorLeafChunkInt64_back(self)

    def assign(self, *args):
        """assign(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::size_type n, CafLeafChunkInt64 x)"""
        return _caf.vectorLeafChunkInt64_assign(self, *args)

    def resize(self, *args):
        """
        resize(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::size_type new_size)
        resize(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::size_type new_size, CafLeafChunkInt64 x)
        """
        return _caf.vectorLeafChunkInt64_resize(self, *args)

    def insert(self, *args):
        """
        insert(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::iterator pos, CafLeafChunkInt64 x) -> std::vector< Caf::CafLeafChunk< long long > * >::iterator
        insert(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::iterator pos, std::vector< Caf::CafLeafChunk< long long > * >::size_type n, 
            CafLeafChunkInt64 x)
        """
        return _caf.vectorLeafChunkInt64_insert(self, *args)

    def reserve(self, *args):
        """reserve(vectorLeafChunkInt64 self, std::vector< Caf::CafLeafChunk< long long > * >::size_type n)"""
        return _caf.vectorLeafChunkInt64_reserve(self, *args)

    def capacity(self):
        """capacity(vectorLeafChunkInt64 self) -> std::vector< Caf::CafLeafChunk< long long > * >::size_type"""
        return _caf.vectorLeafChunkInt64_capacity(self)

    __swig_destroy__ = _caf.delete_vectorLeafChunkInt64
    __del__ = lambda self : None;
vectorLeafChunkInt64_swigregister = _caf.vectorLeafChunkInt64_swigregister
vectorLeafChunkInt64_swigregister(vectorLeafChunkInt64)

def strLevel(level):
    """ Helper to print level indenting dots for CafGroup tags. """
    str = ""
    for i in range(level):
      str += ". "
    return str

def toCafChunkType(chunk):
    """ Helper to dynamic cast chunk to its type. """
    if chunk.getType() ==  cvar.cafGroup: 
        chunk = chunk.toCafGroupChunk()
    elif chunk.getType() == cvar.cafFloat: 
        chunk = chunk.toCafLeafChunkFloat()
    elif chunk.getType() == cvar.cafDouble: 
        chunk = chunk.toCafLeafChunkDouble()
    elif chunk.getType() == cvar.cafCstr: 
        chunk = chunk.toCafLeafChunkString()
    elif chunk.getType() == cvar.cafInt32: 
        chunk = chunk.toCafLeafChunkInt32()
    elif chunk.getType() == cvar.cafInt64: 
        chunk = chunk.toCafLeafChunkInt64()
    return chunk


def toCafHelpObjType(helperObj):
    """ Helper to dynamic cast CafHelperObj to its type. """
    if not helperObj:
        return  helperObj
    if helperObj.isA(cvar.transform):
        helperObj = helperObj.toTransformCafObj()
    elif helperObj.isA(cvar.locator):
        helperObj = helperObj.toLocatorCafObj()
    elif helperObj.isA(cvar.mesh):
        helperObj = helperObj.toMeshCafObj()
    elif helperObj.isA(cvar.nurbssurface):
        helperObj = helperObj.toNurbsSurfaceCafObj()
    elif helperObj.isA(cvar.nurbscurve):
        helperObj = helperObj.toNurbsCurveCafObj()
    elif helperObj.isA(cvar.geometry):
        helperObj = helperObj.toGeometryCafObj()
    return helperObj

## 
#@mainpage caf Python Package
#
#<h2><a name="Introduction"></a>Introduction</h2>
#<p>
#CAF Python is primarily a SWIG generated Python binding to <a href="../html_cpp/index.html" target="_top">libcaf</a>, a C++ library for reading and writing CAF (Cached Animation Format) files.  CAF files store animated vertex positions and other animation or simulation data.  CAF is a tagged, little-endian binary format which supports fast random and sequential access, and storing arbitrary data types.  See the <a href="../html-user/cafSpec.html">CAF Specification</a> for details. The C++ libcaf interface is highly dependent on C++ templates and the C++ standard library.  Instances of these templates are defined for the caf package interface that is accessed using the "import caf" statement.  The CAF Python Classes uses these instances.
#</p>
#<hr style="width: 100%; height: 2px;">
#
#@par libcaf C++ templates to caf Python instances.
#
#C++ <b>CafLeafChunk< T ></b> template instanced for caf package:
# - CafLeafChunkDouble
# - CafLeafChunkFloat
# - CafLeafChunkInt32
# - CafLeafChunkInt64
# - CafLeafChunkString
#
#C++ Standard library <b>vector< T ></b> template instanced for caf package:
# - vectorCafChunk
# - vectorDOBJChunk
# - vectorChar
# - vectorDouble
# - vectorFloat
# - vectorInt32
# - vectorInt64
# - vectorString
#
#<hr style="width: 100%; height: 2px;">
#
#<h2><a name="Examples"></a>Examples</h2>
#<ul>
#    <li> <a href="../examples/example1.text">Writing a simple caf file with arbitrary tagged CAF Chunks</a></li>
#    <li> <a href="../examples/example2.text">Reading the simple caf file</a></li>
#    <li> <a href="../examples/example3.text">Using CafRoMemCache to read static CAF file</a></li>
#</ul>
#
#<hr style="width: 100%; height: 2px;">
##

##
# @file caf.py
# file containing the SWIG generated caf Python bindings
##

## 
# @package caf
# SWIG generated Python bindings accessed by the "import caf" statement. 
##

## @class _object
## @brief Python object that all caf object inherit from.
## @details 

## @class PySwigIterator 
## @brief SWIG (ignore)

## @class CafCache
## @brief Read a Disney Cached Animation Format file

## @class CafChunk
## @brief Generic CAF chunk 

## 
#@class CafDCAFChunk
#@brief DCAF Chunk contains file version
#@details Attributes accessed by dictionary __swig_getmethods__ and  dictionary __swig_setmethods__
# - version_ -> int64_t
#
#@par Example:
#@code
# caffile = caf.CafFile()
# caffile.open(theFile,"w")
# dcafChunk = caf.CafDCAFChunk()
# dcafChunk.version_ = 10
# res = dcafChunk.write(caffile)
#@endcode
##

##
#@class CafDOBJChunk
#@brief DOBJ chunk contains object meta data
#@details Attributes accessed by dictionary __swig_getmethods__
# - name_ -> string
# - datr_ -> CafDATRChunk
##

## @class CafFile
## @brief Read/write a Cached Animation Format file 

## @class CafGroupChunk
## @brief Generic group CAF chunk (contains only other chunks)

##
#@class CafHeader
#@brief 16 byte header of every CAF chunk
#@details Attributes accessed by dictionary __swig_getmethods__
# - tag_ -> uint32_t
# - type_ -> unsigned char
# - compound_ -> unsigned char
# - dimension_ -> unsigned char
# - res_ -> unsigned char (RESERVED do not use)
# - length_ -> int64_t (packed header do not use)
##

## @class CafLeafChunkDouble
## @brief CAF Python instance for C++ Caf::CafLeafChunk<double>

## @class CafLeafChunkFloat
## @brief CAF Python instance for C++ Caf::CafLeafChunk<float>

## @class CafLeafChunkInt32
## @brief CAF Python Instance of C++ Caf::CafLeafChunk<int32_t>

## @class CafLeafChunkInt64
## @brief CAF Python instance for C++ Caf::CafLeafChunk<int64_t>

## @class CafLeafChunkString
## @brief CAF Python instance for C++ Caf::CafLeafChunk<std::string>

##
#@class CafMETAChunk
#@brief META Chunk contains file meta data
#@details Attributes accessed by dictionary __swig_getmethods__ and  dictionary __swig_setmethods__
# - objDefs_ -> vectorDOBJChunk
# - numSamples_ -> int64_t
# - firstTime_ -> float
# - lastTime_ -> float
# - rate_ -> float
# - space_ -> int64_t
# - application_ -> string
# - sourceFile_-> string
# - dateStamp_ -> int64_t
#
#@par Example code:
#@code
# meta = caf.CafMETAChunk()
# print meta.rate_
# meta.rate_ = 0.0
# print meta.rate_
#@endcode
##

## @class CafRoMemCache
## @brief Read a Disney Cached Animation Format file and cache the data in memory, keeping a specified maximum number of time samples in memory by unloading samples on a LRU basis.

## @class CafRwMemCache
## @brief Read/write a Disney Cached Animation Format file and cache the data in memory as needed, Note: overrides maximum samples if required.

## @class CafSAMSChunk
## @brief SAMS chunk contains list of SAMP chunks 

## @class vectorCafChunk
## @brief CAF Python instance for C++ std::vector<Caf::CafChunk *> 

## @class vectorChar
## @brief Caf Python instance for C++ std::vector<char>

## @class vectorDOBJChunk
## @brief Caf Python instance for C++  std::vector<Caf::CafDOBJChunk *>;

## @class vectorDouble
## @brief Caf Python instance for C++ std::vector<double>

## @class vectorFloat
## @brief Caf Python instance for C++ std::vector<float>

## @class vectorInt32
## @brief Caf Python instance for C++ std::vector<int32_t>

## @class vectorInt64
## @brief Caf Python instance for C++ std::vector<int64_t>

## @class vectorString
## @brief Caf Python instance for C++ std::vector<std::string>

# This file is compatible with both classic and new-style classes.


