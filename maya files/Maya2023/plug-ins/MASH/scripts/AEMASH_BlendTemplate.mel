// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
global proc AEMASH_BlendTemplate( string $nodeName )
{

    editorTemplate -beginScrollLayout;
    python("import MASH.nodeHeaders; MASH.nodeHeaders.addHeader('" + $nodeName + "', 'Merge')")
    editorTemplate -endLayout;

    separator -w 100 -h 5 -hr 1 -st "none";
    editorTemplate  -label (getPluginResource("MASH", "kMergeType")) -addControl "mergeType";

    editorTemplate -beginLayout (getPluginResource("MASH", "kMerge")) -collapse 0;
    editorTemplate -bn;
    editorTemplate  -label (getPluginResource("MASH", "kMergePos")) -addControl "enablePosition";
    editorTemplate  -label (getPluginResource("MASH", "kMergeRot")) -addControl "enableRotation";
    editorTemplate  -label (getPluginResource("MASH", "kMergeScale")) -addControl "enableScale";
    editorTemplate  -label (getPluginResource("MASH", "kMergeID")) -addControl "enableId";
    editorTemplate  -label (getPluginResource("MASH", "kMergeVis")) -addControl "enableVisibility";
    editorTemplate -en;
    editorTemplate -ccu "MASHcreateInputs" "MASHeditInputs" "outputPoints" "Parent Node";
    editorTemplate -callCustom "MASHmergeSingleInputBuildQt" "MASHmergeSingleInputUpdateQt" "";

    editorTemplate  -label (getPluginResource("MASH", "kRotationInterpolation")) -addControl "rotationInterpolation";

    editorTemplate -beginLayout (getPluginResource("MASH", "kStrength")) -collapse 0;
    editorTemplate  -label (getPluginResource("MASH", "kStrength")) -addControl "Envelope";
    editorTemplate  -label (getPluginResource("MASH", "kRandStrength")) -addControl "randEnvelope";
    editorTemplate  -label (getPluginResource("MASH", "kStepStrength")) -addControl "StepEnvelope";
    editorTemplate -addSeparator;
    editorTemplate  -label (getPluginResource("MASH", "kStrengthMap")) -addControl "mColour";
    editorTemplate  -label (getPluginResource("MASH", "kMapProjAxis")) -addControl "mapDirection";
    editorTemplate -callCustom "MASHmapHelperButton" "MASHmapHelperButtonEdit" "";
    editorTemplate -endLayout;

    editorTemplate -beginLayout (getPluginResource("MASH", "kFalloffObject")) -collapse 1;
    editorTemplate -callCustom "MASHfalloffButtons" "MASHfalloffButtonsEdit" "";
    editorTemplate -endLayout;

    AEdependNodeTemplate $nodeName;
    editorTemplate -suppress "inIterations";
    editorTemplate -suppress "time";
    editorTemplate -addExtraControls;

    editorTemplate -endScrollLayout;
}

global proc AEaddMergeButtons ( string $attr )
{
    string $nodeName[];
    tokenize($attr, ".", $nodeName);

    button -bgc (181.0/255.0) (157.0/255.0) (136.0/255.0) -label (getPluginResource("MASH", "kWaiterMergeConect"))  -c ("mergeButtonCMDS " + $nodeName[0] + " 1")
    connMergeMASHButton;


    separator -w 100 -h 5 -hr 1 -st "none";
}


global proc AEaddMergeButtonsEdit ( string $attr )
{
    string $nodeName[];
    tokenize($attr, ".", $nodeName);

    button -e -c ("mergeButtonCMDS " + $nodeName[0] + " 1")
    connMergeMASHButton;


}

global proc mergeButtonCMDS (string $nodeName, int $whichCMD)
{
    if ($whichCMD == 1)
    {
        string $obj[] = `ls -sl`;
        if (size($obj) > 0) {
            string $nodeType = `nodeType $obj[0]`;
            if ($nodeType == "MASH_Waiter" || $nodeType == "MASH_Merge") {
                connectAttr -force ($obj[0]+".outputPoints") ($nodeName+".altInputPoints");
            } else {
                MASHinViewMessage((getPluginResource("MASH", "kPleaseSelectWaiterOrMerge")), "Warning");
            }
        } else {
            MASHinViewMessage((getPluginResource("MASH", "kMergeConnected")), "Warning");
        }

    }
    else {
        MASHinViewMessage((getPluginResource("MASH", "kPleaseSelectMASHNode")), "Warning");
    }

    evalDeferred("updateAE " + $nodeName);

}

global proc MASHmergeSingleInputBuildQt(string $nodeName)
{
    string $buffer[];
    tokenize($nodeName, ".", $buffer);
    $nodeName = $buffer[0];

    python("import MASHsingleInputQtWidget");
    rowLayout -numberOfColumns 2 -columnWidth2 139 250 mergeDragDropLayout;
    text -w 105 -h 20 -vis 1
    -label (getPluginResource("MASH", "kChildNode"))
    -align "right" -font "plainLabelFont" ;
    //get python to create the widget, include the desired nodeType as an arguement
    python("MASHsingleInputQtWidget.build_qt_widget('mergeDragDropLayout', '" + $nodeName + "', 'MASH_Waiter,MASH_Merge', 'altInputPoints', 'outputPoints', 'MergeConnect')");
    setParent..;

}

global proc MASHmergeSingleInputUpdateQt(string $nodeName )
{
    string $buffer[];
    tokenize($nodeName, ".", $buffer);
    $nodeName = $buffer[0];
    python("import MASHsingleInputQtWidget");

    python("MASHsingleInputQtWidget.update_qt_widget('mergeDragDropLayout', '" + $nodeName + "', 'MASH_Waiter,MASH_Merge', 'altInputPoints', 'outputPoints', 'MergeConnect')");
}
