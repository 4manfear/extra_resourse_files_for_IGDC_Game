// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//This script creates and updates the Type manipulator tool settings
global proc string typeTRSTool_GetFirstSelectedTypeNode()
{
	string $sel[] = `ls -sl`;
	if (0 == size($sel) || 0 == `objExists $sel[0]`)
		return "";

	string $conns[] = `listConnections($sel[0] + ".message")`;
	string $typeNode = "";
    for ($node in $conns)
	{
        if (nodeType($node) == "type")
		{
            $typeNode = $node;
			break;
        }
    }

	return $typeNode;
}

global proc typeTRSTool_ResetCurrent()
{
	string $typeNode = typeTRSTool_GetFirstSelectedTypeNode();
	if ("" == $typeNode)
		return;
	setAttr ($typeNode+".positionAdjust") -type "double3" 0 0 0;
	setAttr ($typeNode+".scaleAdjust") -type "double3" 0 0 0;
}
global proc typeTRSTool_ResetAllCurrent()
{
	string $typeNode = typeTRSTool_GetFirstSelectedTypeNode();
	if ("" == $typeNode)
		return;
	python( ("import maya.app.type.typeUtilityScripts; maya.app.type.typeUtilityScripts.resetAllManipulations( '" + $typeNode + "')") );
}

//Create the type manipulator settings
global proc typeTRSToolProperties()
{
	string $typeNode = typeTRSTool_GetFirstSelectedTypeNode();
	if ("" == $typeNode)
		return;
    string $parent = `toolPropertyWindow -q -location`;
    setParent $parent;
    setUITemplate -pushTemplate OptionsTemplate;
	columnLayout typeTRSTool;

		frameLayout
			-collapsable true
			-collapse false
			-label (getPluginResource("Type", "kTypeManipPropLbl"))
			typeMoveToolFrame;
			columnLayout typeMoveToolOptions;
				separator -style "none";
				attrEnumOptionMenuGrp -label (getPluginResource("Type", "kManipModeLbl")) -attribute ($typeNode + ".manipulatorMode") typeTRSToolManipMode;
				attrFieldGrp -label (getPluginResource("Type", "kTranslateLbl")) -attribute ($typeNode + ".positionAdjust") typeMoveToolFieldXYZ;
				attrFieldGrp -label (getPluginResource("Type", "kScaleLbl")) -attribute ($typeNode + ".scaleAdjust") typeTRSToolScaleFieldXYZ;

				rowLayout -nc 3 -cw3 132 93 93;
					text -label (getPluginResource("Type", "kResetManipsLbl")) -align right typeMoveToolResetLabel;
					iconTextButton
						-st "iconAndTextHorizontal"
						-i "TypeResetMode.png"
						-l (getPluginResource("Type", "kCurrentLbl"))
						-ann (getPluginResource("Type", "kResetManipsAnn"))
						-flat 0
						-w 93
						-h 23
						typeMoveToolResetCurrentButton;
					iconTextButton
						-st "iconAndTextHorizontal"
						-i "TypeResetAll.png"
						-l (getPluginResource("Type", "kAllLbl"))
						-ann (getPluginResource("Type", "kResetAllManipsAnn"))
						-flat 0
						-w 93
						-h 23
						typeMoveToolResetAllButton;
			setParent ..;
		setParent ..;
	setParent ..;
	setUITemplate -popTemplate;
}
//edit the tool properties to keep them up to date with the selected type node.
global proc typeTRSToolValues( string $toolName )
{
	string $typeNode = typeTRSTool_GetFirstSelectedTypeNode();
	if ("" == $typeNode)
        return;

  string $parent = `toolPropertyWindow -q -location`;
  if ( "" == $parent )
    return;

  $parent += "|typeTRSTool";

  // This check can be pushed when the UI hasn't been built.
  if ( catchQuiet (`setParent $parent`) ) {
      return;
  } else {
      // continue on as usual...

      catchQuiet (`setParent $parent`);
      attrEnumOptionMenuGrp -e -attribute ($typeNode + ".manipulatorMode")  typeTRSToolManipMode;
      attrFieldGrp -e -attribute ($typeNode + ".positionAdjust") -en 1 typeMoveToolFieldXYZ;
      attrFieldGrp -e -attribute ($typeNode + ".scaleAdjust") -en 1 typeTRSToolScaleFieldXYZ;
      iconTextButton -e -c "typeTRSTool_ResetCurrent;" typeMoveToolResetCurrentButton;
      iconTextButton -e -c "typeTRSTool_ResetAllCurrent;" typeMoveToolResetAllButton;
      string $helpTag = "TypeManipulator";
      toolPropertySetCommon $toolName "moveEP.xpm" $helpTag;
      toolPropertySelect "typeTRSTool";
  }
}

//We've changed the manipulator mode
//Update the values in all the TRS boxes so that they're correct for this line/word/char trans/rot/scale
global proc ChangedTypeManipMode( string $toolName )
{
    vector $charManipulations[] = `getAttr($toolName+".manipulatorPositionsPP")`;
    vector $wordManipulations[] = `getAttr($toolName+".manipulatorWordPositionsPP")`;
    vector $lineManipulations[] = `getAttr($toolName+".manipulatorLinePositionsPP")`;
    vector $charManipulationsScale[] = `getAttr($toolName+".manipulatorScalesPP")`;
    vector $wordManipulationsScale[] = `getAttr($toolName+".manipulatorWordScalesPP")`;
    vector $lineManipulationsScale[] = `getAttr($toolName+".manipulatorLineScalesPP")`;
    int $currentChar = `getAttr($toolName+".manipulateId")`;
    int $currentWord = `getAttr($toolName+".manipulateWord")`;
    int $currentLine = `getAttr($toolName+".manipulateLine")`;
    int   $manipMode = `getAttr($toolName+".manipulatorMode")`;
    vector $this;
    vector $thisRot;
    vector $thisScale;
    if ($manipMode == 0)
	{
        //char
        $this = $charManipulations[$currentChar];
        $thisScale = $charManipulationsScale[$currentChar];
    }
	else if ($manipMode == 1)
	{
        //word
        $this = $wordManipulations[$currentChar];
        $thisScale = $wordManipulationsScale[$currentChar];
    }
	else
	{
        //line
        $this = $lineManipulations[$currentChar];
        $thisScale = $lineManipulationsScale[$currentChar];
    }
    setAttr ($toolName+".positionAdjust0") ($this.x);
    setAttr ($toolName+".positionAdjust1") ($this.y);
    setAttr ($toolName+".positionAdjust2") ($this.z);
    setAttr ($toolName+".scaleAdjust0") ($thisScale.x);
    setAttr ($toolName+".scaleAdjust1") ($thisScale.y);
    setAttr ($toolName+".scaleAdjust2") ($thisScale.z);
}
