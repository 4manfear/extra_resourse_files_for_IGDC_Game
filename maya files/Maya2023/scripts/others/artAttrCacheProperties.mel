// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
//  Creation Date:  December 2004
//
//  Description:
//      Option tool property window for Cache Paint Weight tool.
//
//  Procedure Name:
//      artAttrCacheProperties 
//
//  Description:
//      Initialize the UI for Cache Paint Weight tool.
//
//  Input Arguments:
//
//  Return Value:
//      None.
//

proc artCacheCreateOperFrame(
	string 	$parent,
	string  $currTool
)
//
// Custom UI for Paint Cache Weights tool.
//
{
	// 
	// Target object
	//
	columnLayout;
		rowColumnLayout -nc 3 -cw 1 10 -cw 2 85 -cw 3 250;
		     separator -h 10 -style "none";
			 columnLayout;
		         setParent ..;
			 textScrollList -w 240 -nr 7 -ams false
				 cacheFileList;
		setParent ..;
	setParent ..;
}


// =======================================================
// Main Procedure.
// =======================================================
global proc artAttrCacheProperties()
{
	// Base Artisan (applicable to all Artisan tools) properties.
	source "artisanProperties.mel";
	source "artisanCallback.mel";

	source "artAttrProperties.mel";
	source "artAttrCacheCallback.mel";	
	source "artisanRampCallback.mel";
	
	string	$currContext = `currentCtx`;
	string	$currTool	 = `contextInfo -c $currContext`;

	setUITemplate -pushTemplate DefaultTemplate;

	string $parent = `toolPropertyWindow -q -location`;
	setParent $parent;

	columnLayout -adj true artAttrCache;

	// Brush frameLayout.
	frameLayout -label (uiRes("m_artAttrCacheProperties.kBrush")) 
		-collapsable true -collapse false
		artAttrCacheBrushFrame;

		// Create brush option menu.
		artisanCreateBrushFrame( "artAttrCacheBrushFrame", $currTool );
	setParent ..;

	// which cache file to paint layout
   	frameLayout -label (uiRes("m_artAttrCacheProperties.kCache")) 
       	-collapsable true -collapse false 
       	artCacheOperationFrame;

       	// Create Paint Attribute operation menu.
       	artCacheCreateOperFrame( "artCacheOperationFrame", $currTool );
   	setParent ..;


   	string $artCommonOpFrame = `frameLayout -label (uiRes("m_artAttrCacheProperties.kPaintWeights")) 
       								-collapsable true -collapse false
       								artCommonOperationFrame`;

		setUITemplate -pushTemplate OptionsTemplate;
		setParent $artCommonOpFrame;
		columnLayout;

		// Put all the common stuff.
		artAttrCreateCommonProperties();

		artisanCreateRamp($artCommonOpFrame, 0 );

		setUITemplate -popTemplate;		 
	setParent ..;

    // Stroke options.
	frameLayout -label (uiRes("m_artAttrCacheProperties.kStroke")) 
		-collapsable true -collapse true
		artAttrCacheStrokeFrame;

		// Create stroke options.
		artisanCreateStrokeFrame( "artAttrCacheStrokeFrame", $currTool );
	setParent ..;

    // Stylus Pressure options.
	frameLayout -label (uiRes("m_artAttrCacheProperties.kStylusPressure")) 
		-collapsable true -collapse true
		artAttrCachePressureFrame;

		// Create stroke options.
		artisanCreatePressureFrame( "artAttrCachePressureFrame", $currTool );
	setParent ..;

	// Attribute Maps options.
	frameLayout -label (uiRes("m_artAttrCacheProperties.kAttributeMaps")) 
		-collapsable true -collapse true
		artAttrCacheAttrMapFrame;

		// Create Attribute Map option menu.
		artisanCreateAttrMapFrame( "artAttrCacheAttrMapFrame", $currTool );
	setParent ..;

	// Display options.
	frameLayout -label (uiRes("m_artAttrCacheProperties.kDisplay")) 
		-collapsable true -collapse true
		artAttrCacheDisplayFrame;

		// Create Display options.
		artisanCreateDisplayFrame( "artAttrCacheDisplayFrame", $currTool );
	setParent ..;

	setParent ..;
	setUITemplate -popTemplate;

	artAttrCacheFileMenu( "artAttrCtx" );

	// Set the callbacks and various global functions.
	artAttrCacheCallback( "artAttrCtx" );
	
	// Ramp controls
	artisanRampCallback( "artAttrCtx" );
}