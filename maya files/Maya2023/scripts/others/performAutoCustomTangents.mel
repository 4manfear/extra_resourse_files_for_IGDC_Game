// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//  Description:
//      This is a helper script to perform the show buffer curves command
//    using the various options that have been set
//
//  Input Arguments:
//      string showOptionBox    true - show the option box dialog
//                              false - just execute the command
//
//  Return Value:
//      None.
//

// Query the per-file cubic coefficient used with the Auto Custom tangents
//
proc float cubicCoeff()
{
	string $res[] = `fileInfo -q CubicCoefficient`;
	float $coeff = ( (size($res)==1)?$res[0]:-0.50 );
	return( $coeff );
}

// Set the per-file cubic coefficient used with the Auto Custom tangents
//
proc setCubicCoeff( float $coeff )
{
	fileInfo -remove CubicCoefficient;
	fileInfo CubicCoefficient $coeff;
}

// Set the option vars for this option box
//
proc setOptionVars (int $forceFactorySettings)
{
    if ($forceFactorySettings ) {
		setCubicCoeff( -0.5 );
    }
}

// Setup the UI with the saved values
//
global proc autoCustomTangentsSetup (string $parent, int $forceFactorySettings)
{
    // Retrieve the option settings
    //
    setOptionVars ($forceFactorySettings);

    setParent $parent;
	float $coeff = cubicCoeff();

	floatSliderGrp -e -value $coeff autoCustomCoefficientSlider;
}

// Method invoked via Apply button(s)
//
global proc autoCustomTangentsCallback(
    string $parent,
    int $doIt,
	int $applyOptions,
    string $selectionConnection,
	string $options)
{
    setParent $parent;

	float $coeff = `floatSliderGrp -query -value autoCustomCoefficientSlider`;
	setCubicCoeff( $coeff );

    if( $doIt ) {
        performAutoCustomTangents( 0, $applyOptions, $selectionConnection, $options );
        addToRecentCommandQueue
            ("performAutoCustomTangents  0 " + $applyOptions + "\"" + $selectionConnection + "\" \"" + $options + "\"" )
            ((($applyOptions==1)?"In ":($applyOptions==2?"Out":""))+"Auto Tangents (Custom)");
    }
}

// Create the widgets for the Option Box
//
proc string autoCustomTangentsWidgets( string $tabLayout )
{
    setParent $tabLayout;

        string $tabForm = `columnLayout -adjustableColumn true`;

        frameLayout -label (uiRes("m_performAutoCustomTangents.kAutoCustomTangentsOptions"))
            -labelVisible true
            -borderVisible false
            -collapsable false
            -marginWidth 10
            -marginHeight 5
            optionsFrame;

            floatSliderGrp
				-minValue -0.50
				-maxValue 1.00
                -label (uiRes("m_performAutoCustomTangents.kCustomCoefficient"))
				-annotation (uiRes("m_performAutoCustomTangents.kCustomCoefficientAnnot"))
				autoCustomCoefficientSlider;

        setParent ..;

    return $tabForm;
}

// Setup the Option Box
//
proc autoCustomTangentsOptions( int $applyOptions,
								string $selectionConnection,
								string $options)
{
    // Customisation options
    //
    // Name of the command for this option box (think of it as the base class)
    string $commandName = "autoCustomTangents";

    // Build the option box "methods"
    //
    string $callback = ($commandName + "Callback");
    string $setup    = ($commandName + "Setup");

	string $layout = getOptionBox();
	setParent $layout;

	setOptionBoxCommandName("keyTangent");

    //  Activate the default UI template so that the layout of this
    //  option box is consistent with the layout of the rest of the
    //  application.
    //
    setUITemplate -pushTemplate DefaultTemplate;

	// Turn on the wait cursor.
	//
	waitCursor -state 1;

	tabLayout -tabsVisible 0 -scrollable 1;

    string $parent = `columnLayout -adjustableColumn 1`;

    autoCustomTangentsWidgets $parent;

	setParent ..;

	// Turn off the wait cursor
	//
	waitCursor -state 0;

	setUITemplate -popTemplate;

    // Title for the apply and close button
    //
    string $applyTitle = (uiRes("m_performAutoCustomTangents.kApplyAutoCustom"));
	if( $applyOptions == 1 ){
		$applyTitle = (uiRes("m_performAutoCustomTangents.kApplyInAutoCustom"));
	} else if( $applyOptions == 2 ){
		$applyTitle = (uiRes("m_performAutoCustomTangents.kApplyOutAutoCustom"));
	}

	string $applyCloseBtn = getOptionBoxApplyAndCloseBtn();

    button -edit -label $applyTitle
				-command ($callback + " " + $parent + " true " +
                           $applyOptions + "\"" + $selectionConnection + "\" \"" +
						   $options + "\";hideOptionBox") $applyCloseBtn;


	// Apply button.
	//
	string $applyBtn = getOptionBoxApplyBtn();

    button -edit -command ($callback + " " + $parent + " true " +
                           $applyOptions + "\"" + $selectionConnection + "\" \"" +
						   $options + "\"") $applyBtn;

    //  'Save' button.
    //
    string $saveBtn = getOptionBoxSaveBtn();
    button -edit -command ($callback + " " + $parent + " false " +
                           $applyOptions + "\"" + $selectionConnection + "\" \"" +
						   $options + "\";hideOptionBox") $saveBtn;

    //  'Reset' button.
    //
    string $resetBtn = getOptionBoxResetBtn();
    button -edit
        -command ($setup + " " + $parent + " " + 1)
        $resetBtn;

    // Title for the option box window
	//
	setOptionBoxTitle (uiRes("m_performAutoCustomTangents.kAutoCustomTangentOptions"));

    //setOptionBoxHelpTag( "AutoCustomTangentsOptions" );

    // Call the setup "method" to fill in the current settings
    //
	float $oldCoeff = `floatSliderGrp -query -value autoCustomCoefficientSlider`;
    eval (($setup + " " + $parent + " false"));
	float $newCoeff = `floatSliderGrp -query -value autoCustomCoefficientSlider`;
    showOptionBox();
}

// Assemble the command based on the options
//
proc string assembleCmd( int $applyOptions, string $selectionConnection, string $options)
{
    // Retrieve the option settings
    //
    setOptionVars(false);

    string $cmd = "doKeyTangent \"-e ";
	if( $applyOptions < 2 ){
		// Apply to inputs
		//
		$cmd += "-itt autocustom ";
	}
	if( $applyOptions != 1 ){
		// Apply to outputs
		//
		$cmd += "-ott autocustom ";
	}
	$cmd += "\" \"" + $selectionConnection + "\" \"" + $options + "\"";

    return $cmd;
}

// The action variable means
// The first 2 bits are used for the type of action
//        0 - do the command
//        1 - show the option box
//        2 - return the drag command
// $applyOptions:
// 		0 - to both
// 		1 - to input only
// 		2 - to output only
//
global proc string performAutoCustomTangents(int $action, int $applyOptions, string $selectionConnection, string $options)
{
    string $cmd = "";

    switch( $action ) {
        case 0:
            setOptionVars( false );
            $cmd = assembleCmd( $applyOptions, $selectionConnection, $options );
            eval( $cmd );
            break;
        case 1:
            autoCustomTangentsOptions( $applyOptions, $selectionConnection, $options );
            break;
        case 2:
            setOptionVars( false );
            $cmd = assembleCmd( $applyOptions, $selectionConnection, $options );
            break;
    }

    return $cmd;
}


