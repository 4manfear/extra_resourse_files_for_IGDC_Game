// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================

proc setOptionVars (int $forceFactorySettings)
{			   
	optionVar -init $forceFactorySettings -category "UV Editor.Rename Current UV Set"
		-sv polyRenameUVSet ""
		;
}

global proc performRenameCurrentUVSetSetup (string $parent, 
										 int $forceFactorySettings)
{
	setOptionVars($forceFactorySettings);
	setParent $parent;

	string $sval;
	$sval = `optionVar -query polyRenameUVSet`;
	textFieldGrp -edit -tx $sval polyRenameUVSet;
}

global proc performRenameCurrentUVSetCallback (string $parent, int $doIt)
{
	setParent $parent;

	optionVar -stringValue polyRenameUVSet
		`textFieldGrp -query -tx polyRenameUVSet`;

	if ($doIt) {
		performRenameCurrentUVSet 0;
		addToRecentCommandQueue "performRenameCurrentUVSet 0" "RenameCurrentUVSet";
	}
}

proc polyRenameCurrentUVSetOptions()
{
	// Global template variables for form spacing
	global int $gOptionBoxTemplateFrameSpacing;
	
	string $commandName = "performRenameCurrentUVSet";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");
	   
	string $layout = getOptionBox();
	setParent $layout;
	setUITemplate -pushTemplate OptionBoxTemplate;
	waitCursor -state 1;

	// Form layout
	string $parent = `formLayout polyRenameCurrentUVSetOptions`;
	
		// Settings frame
		string $settingsFrame = 
		`frameLayout -label (uiRes("m_performRenameCurrentUVSet.kSettingsFrame"))`;

			columnLayout;
	
    			textFieldGrp -label (uiRes("m_performRenameCurrentUVSet.kNewUVSetName")) polyRenameUVSet;

			setParent ..; // columnLayout
			
		setParent $parent; // frameLayout;
		
	setParent ..; // formLayout;

	// Attach Description/Settings frames to form layout
	formLayout -e
		-af $settingsFrame "top" $gOptionBoxTemplateFrameSpacing
		-af $settingsFrame "left" $gOptionBoxTemplateFrameSpacing
		-af $settingsFrame "right" $gOptionBoxTemplateFrameSpacing
		-an $settingsFrame "bottom"
	$parent;

	setParent $parent;

	waitCursor -state 0;
	setUITemplate -popTemplate;
	   
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit -label (uiRes("m_performRenameCurrentUVSet.kRenameCurrent"))
	       -command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;
			 
	setOptionBoxTitle (uiRes("m_performRenameCurrentUVSet.kRenameCurrentUVSetOptions"));

	setOptionBoxHelpTag( "RenameCurrentUVSet" );

	eval (($setup + " " + $parent + " " + 0));      
	showOptionBox();
}

global proc string performRenameCurrentUVSet (int $option)
{
	string $cmd="polyUVSet -rename -newUVSet ";
	switch ($option) 
	{
	  case 1: polyRenameCurrentUVSetOptions; 
		// Just the option box
		break;
		
	  default:
		setOptionVars(false);
		string $name = `optionVar -query polyRenameUVSet`;

		if (size($name))
		{
			$cmd += ("\"" + $name + "\"");
			if ($option == 0)
				evalEcho $cmd;
		}
		else
		{
			warning (uiRes("m_performRenameCurrentUVSet.kNoName"));
		}
		break;
	}
	return $cmd;
}


