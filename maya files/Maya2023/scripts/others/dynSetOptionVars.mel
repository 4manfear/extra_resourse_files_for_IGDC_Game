// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
//  Creation Date:  April, 1997
//
//  Description:
//      This script contains code to create and/or set the default
//		values for the option vars for the Dynamics menus/option
//		boxes.
//
//  Input Arguments to dynCreateLayout():
//		int $theCmd -- the command for which the layout is being created
//		int $setFactorySettings -- whether to set the default values.
//
//
global proc dynSetOptionVars(string $theCmd, int $setFactorySettings)
{
	string $procName = ("set"+$theCmd+"OptionVars");
	eval ($procName+" "+$setFactorySettings);
}

global proc setParticleRenderCacheOptionVars( int $setFactorySettings )
{
	optionVar -init $setFactorySettings -category "Dynamics.nCache.Create Particle Disk Cache"
		-iv cacheForRenderGlobalsRange 0
		-iv onlyUpdateParticles 0
		-iv cacheAllParticleSystems 1
		;
}

proc setVolumeFieldOptionVars( string $field, int $setFactorySettings, string $category )
//
// Description:
//   set default values for volume field options.
{
	if ($field != "volumeAxis")
	{
		// For volume axis field, we don't want to set the default field
		// type here, because it's different from the others.
		// Also, volume exclusion does not apply.
		//
		optionVar -init $setFactorySettings -category $category
			-iv ($field+"VolumeFieldTypesOM") 1
			-iv ($field+"VolumeExclusion") 0
			;
	}

	optionVar -init $setFactorySettings -category $category
		-fv ($field+"VolumeOffsetX") 0
		-fv ($field+"VolumeOffsetY") 0
		-fv ($field+"VolumeOffsetZ") 0
		-fv ($field+"VolumeSweep") 360.0
		-fv ($field+"TorusSectionRadius") 0.5
		;
}

global proc setAirOptionVars (int $setFactorySettings)
{
	string $cat = "Dynamics.Fields/Solvers.Air";
	optionVar -init $setFactorySettings -category $cat
		-sv airName ""
		-fv airMagnitude 4.0
		-fv airAttenuation 1.0
		-fv airDirectionX 0.0
		-fv airDirectionY 1.0
		-fv airDirectionZ 0.0
		-fv airSpeed 5.0
		-fv airInheritVelocity 1.0
		-iv airInheritRotation 1
		-iv airComponent 0
		-iv airEnableSpread 0
		-fv airSpread 1.0
		-iv airMaxDistCBox 1
		-fv airMaxDistance 20.0
		;

	// Fix problem of reading old prefs files where
	// MaxDistCBox means "infinite distance". Now it means
	// Use Max Distance.
	if( `optionVar -q airMaxDistCBox` == 1 &&
	    `optionVar -q airMaxDistance` == 0 )
	{
		optionVar -intValue airMaxDistCBox 0;
	}

	setVolumeFieldOptionVars( "air", $setFactorySettings, $cat );
}


global proc setDragOptionVars (int $setFactorySettings)
{
	string $cat = "Dynamics.Fields/Solvers.Drag";
	optionVar -init $setFactorySettings -category $cat
		-sv dragName ""
		-fv dragMagnitude 0.05
		-fv dragAttenuation 1.0
		-fv dragDirectionX 0.0
		-fv dragDirectionY 0.0
		-fv dragDirectionZ 0.0
		-iv dragUseDirection 0
		-iv dragMaxDistCBox 0
		-fv dragMaxDistance 0.0
		;

	setVolumeFieldOptionVars( "drag", $setFactorySettings, $cat );
}

global proc setGravityOptionVars (int $setFactorySettings)
{
	string $cat = "Dynamics.Fields/Solvers.Gravity";
	optionVar -init $setFactorySettings -category $cat
		-sv gravityName ""
		-fv gravityMagnitude 9.8
		-fv gravityAttenuation 0.0
		-fv gravityDirectionX 0.0
		-fv gravityDirectionY -1.0
		-fv gravityDirectionZ 0.0
		-iv gravityMaxDistCBox 0
		-fv gravityMaxDistance 0.0
		;

	setVolumeFieldOptionVars( "gravity", $setFactorySettings, $cat );
}

global proc setNewtonOptionVars (int $setFactorySettings)
{
	string $cat = "Dynamics.Fields/Solvers.Newton";
	optionVar -init $setFactorySettings -category $cat
		-sv newtonName ""
		-fv newtonMagnitude 5.0
		-fv newtonAttenuation 1.0
		-fv newtonMinDistance 0.2
		-iv newtonMaxDistCBox 0
		-fv newtonMaxDistance 0.0
		;

	// Fix problem of reading old prefs files where
	// MaxDistCBox means "infinite distance". Now it means
	// Use Max Distance.
	if( `optionVar -q newtonMaxDistCBox` == 1 &&
	    `optionVar -q newtonMaxDistance` == 0 )
	{
		optionVar -intValue newtonMaxDistCBox 0;
	}

	setVolumeFieldOptionVars( "newton", $setFactorySettings, $cat );
}


global proc setRadialOptionVars (int $setFactorySettings)
{
	string $cat = "Dynamics.Fields/Solvers.Radial";
	optionVar -init $setFactorySettings -category $cat
		-sv radialName ""
		-fv radialMagnitude 5.0
		-fv radialAttenuation 1.0
		-fv radialType 0.0
		-iv radialMaxDistCBox 1
		-fv radialMaxDistance 20.0
		;

	// Fix problem of reading old prefs files where
	// MaxDistCBox means "infinite distance". Now it means
	// Use Max Distance.
	if( `optionVar -q radialMaxDistCBox` == 1 &&
	    `optionVar -q radialMaxDistance` == 0 )
	{
		optionVar -intValue radialMaxDistCBox 0;
	}

	setVolumeFieldOptionVars( "radial", $setFactorySettings, $cat );
}


global proc setTurbulenceOptionVars (int $setFactorySettings)
{
	string $cat = "Dynamics.Fields/Solvers.Turbulence";
	optionVar -init $setFactorySettings -category $cat
		-sv turbulenceName ""
		-fv turbulenceMagnitude 5.0
		-fv turbulenceAttenuation 1.0
		-fv turbulenceFrequency 1.0
		-fv turbulencePhaseX 0.0
		-fv turbulencePhaseY 0.0
		-fv turbulencePhaseZ 0.0
		-iv turbulenceNoiseLevel 0
		-fv turbulenceNoiseRatio 0.707
		-iv turbulenceMaxDistCBox 0
		-fv turbulenceMaxDistance 0.0
		;

	// Fix problem of reading old prefs files where
	// MaxDistCBox means "infinite distance". Now it means
	// Use Max Distance.
	if( `optionVar -q turbulenceMaxDistCBox` == 1 &&
	    `optionVar -q turbulenceMaxDistance` == 0 )
	{
		optionVar -intValue turbulenceMaxDistCBox 0;
	}

	setVolumeFieldOptionVars( "turbulence", $setFactorySettings, $cat );
}

global proc setUniformOptionVars (int $setFactorySettings)
{
	string $cat = "Dynamics.Fields/Solvers.Uniform";
	optionVar -init $setFactorySettings -category $cat
		-sv uniformName ""
		-fv uniformMagnitude 5.0
		-fv uniformAttenuation 1.0
		-fv uniformDirectionX 1.0
		-fv uniformDirectionY 0.0
		-fv uniformDirectionZ 0.0
		-iv uniformMaxDistCBox 0
		-fv uniformMaxDistance 0.0
		;

	// Fix problem of reading old prefs files where
	// MaxDistCBox means "infinite distance". Now it means
	// Use Max Distance.
	if( `optionVar -q uniformMaxDistCBox` == 1 &&
	    `optionVar -q uniformMaxDistance` == 0 )
	{
		optionVar -intValue uniformMaxDistCBox 0;
	}

	setVolumeFieldOptionVars( "uniform", $setFactorySettings, $cat );
}


global proc setVortexOptionVars (int $setFactorySettings)
{
	string $cat = "Dynamics.Fields/Solvers.Vortex";
	optionVar -init $setFactorySettings -category $cat
		-sv vortexName ""
		-fv vortexMagnitude 5.0
		-fv vortexAttenuation 1.0
		-fv vortexAxisX 0.0
		-fv vortexAxisY 1.0
		-fv vortexAxisZ 0.0
		-iv vortexMaxDistCBox 0
		-fv vortexMaxDistance 0.0
		;

	// Fix problem of reading old prefs files where
	// MaxDistCBox means "infinite distance". Now it means
	// Use Max Distance.
	if( `optionVar -q vortexMaxDistCBox` == 1 &&
	    `optionVar -q vortexMaxDistance` == 0 )
	{
		optionVar -intValue vortexMaxDistCBox 0;
	}

	setVolumeFieldOptionVars( "vortex", $setFactorySettings, $cat );
}


global proc setVolumeAxisOptionVars (int $setFactorySettings)
{
	string $cat = "Dynamics.Fields/Solvers.Volume Axis";
	optionVar -init $setFactorySettings -category $cat
		-sv volumeAxisName ""
		-fv volumeAxisMagnitude 5.0
		-fv volumeAxisAttenuation 0.0
		-fv volumeAxisInvertAttenuation 0
		-iv volumeAxisMaxDistCBox 0
		-fv volumeAxisMaxDistance 0.0
		-iv volumeAxisVolumeFieldTypesOM 2
		-fv volumeAxisDirectionX 1.0
		-fv volumeAxisDirectionY 0.0
		-fv volumeAxisDirectionZ 0.0
		-fv volumeAxisAwayFromCenter 1.0
		-fv volumeAxisAwayFromAxis 1.0
		-fv volumeAxisAlongAxis 0.0
		-fv volumeAxisAroundAxis 0.0
		-fv volumeAxisDirectionalSpeed 0.0
		-fv volumeAxisTurbulence 0.0
		-fv volumeAxisTurbulenceSpeed 0.2
		-fv volumeAxisTurbulenceFrequencyX 1.0
		-fv volumeAxisTurbulenceFrequencyY 1.0
		-fv volumeAxisTurbulenceFrequencyZ 1.0
		-fv volumeAxisTurbulenceOffsetX 0.0
		-fv volumeAxisTurbulenceOffsetY 0.0
		-fv volumeAxisTurbulenceOffsetZ 0.0
		-fv volumeAxisDetailTurbulence 0.0
		;
		
	setVolumeFieldOptionVars( "volumeAxis", $setFactorySettings, $cat );
}

global proc setEmitterOptionVars (int $setFactorySettings)
{
	optionVar -init $setFactorySettings -category "Dynamics.nParticles.Create Emitter"
		-sv emitterName ""
		-iv emitterTypesOM 1
		-fv emitterRate 100.0
		-iv emitterScaleRateByObjectSize 0
		-iv emitterNeedParentUV 0
		-iv emitterCycleOM 1
		-iv emitterCycleInterval 1
		-fv emitterMaxDistance 0.0
		-fv emitterMinDistance 0.0
		-fv emitterDirectionX 1.0
		-fv emitterDirectionY 0.0
		-fv emitterDirectionZ 0.0
		-fv emitterSpread 0.0
		-fv emitterSpeed 1.0
		-fv emitterSpeedRandomRange 0.0
		-fv emitterNormalSpeed 1.0
		-fv emitterTangentSpeed 0.0
		-iv emitterVolumeShapeOM 1
		-fv emitterVolumeOffsetX 0.0
		-fv emitterVolumeOffsetY 0.0
		-fv emitterVolumeOffsetZ 0.0
		-fv emitterVolumeSweep 360.0
		-fv emitterTorusSectionRadius 0.5
		-fv emitterAwayFromCenter 1.0
		-fv emitterAwayFromAxis 1.0
		-fv emitterAlongAxis 0.0
		-fv emitterAroundAxis 0.0
		-fv emitterRandomSpread 0.0
		-fv emitterDirectionalSpeed 0.0
		-iv emitterScaleSpeedBySize 0
		-iv emitterDieOnExit 0
		;
}

global proc setCollisionOptionVars (int $setFactorySettings)
{
	optionVar -init $setFactorySettings -category "Dynamics.nParticles.Make Collide"
		-fv collisionResilience 1.0
		-fv collisionFriction 0.0
		-fv collisionOffset 0.01
		;
}


global proc setGoalOptionVars (int $setFactorySettings)
{
	optionVar -init $setFactorySettings -category "Dynamics.nParticles.Goal"
		-fv goalWeight 0.5
		-iv goalUseTransform 0
		;
}


global proc setRigidOptionVars (int $setFactorySettings)
{
	string $category = "Dynamics.Fields/Solvers.Create Rigid Body";

	// Note: rigidCollisionType is set by caller so just set the default value
	optionVar -init false -category $category -iv rigidCollisionType 0;

	optionVar -init $setFactorySettings -category $category
		-sv rigidName ""
		-iv rigidCollide 0
		-fv rigidMass 1.00
		-iv rigidComCBox 0
		-fv rigidComX 0.0
		-fv rigidComY 0.0
		-fv rigidComZ 0.0
		-fv rigidStatFriction 0.200
		-fv rigidDynFriction 0.200
		-fv rigidBounciness 0.600
		-fv rigidDamping 0.0
		-fv rigidImpulseX 0.0
		-fv rigidImpulseY 0.0
		-fv rigidImpulseZ 0.0
		-fv rigidImpulsePosX 0.0
		-fv rigidImpulsePosY 0.0
		-fv rigidImpulsePosZ 0.0
		-fv rigidSpinImpulseX 0.0
		-fv rigidSpinImpulseY 0.0
		-fv rigidSpinImpulseZ 0.0
		-fv rigidAngVelocityX 0.0
		-fv rigidAngVelocityY 0.0
		-fv rigidAngVelocityZ 0.0
		-iv rigidPosCBox 0
		-fv rigidPosX 0.0
		-fv rigidPosY 0.0
		-fv rigidPosZ 0.0
		-iv rigidOrCBox 0
		-fv rigidOrX 0.0
		-fv rigidOrY 0.0
		-fv rigidOrZ 0.0
		-fv rigidInitVelocityX 0.0
		-fv rigidInitVelocityY 0.0
		-fv rigidInitVelocityZ 0.0
		-iv rigidStandInType 1
		-iv rigidLayer 0
		-iv rigidTesselation 200
		-iv rigidCacheCBox 0
		;
}

global proc setActiveRigidOptionVars (int $setFactorySettings)
{
	if ($setFactorySettings || !`optionVar -exists rigidCollisionType`)
		optionVar -iv rigidCollisionType 1;
	setRigidOptionVars($setFactorySettings);
}

global proc setPassiveRigidOptionVars (int $setFactorySettings)
{
	if ($setFactorySettings || !`optionVar -exists rigidCollisionType`)
		optionVar -iv rigidCollisionType 0;
	setRigidOptionVars($setFactorySettings);
}

global proc setSoftOptionVars (int $setFactorySettings)
{
	optionVar -init $setFactorySettings -category "Dynamics.nParticles.Soft Body"
		-iv softCreationOption 1
		-iv softGoal 0
		-iv softHide 0
		-iv softHistory 0
		-fv softWeight 0.5
		;
}

global proc setNSoftOptionVars (int $setFactorySettings)
{
	setSoftOptionVars ($setFactorySettings);
}

global proc setConstrainOptionVars (int $setFactorySettings)
{
	string $category = "Dynamics.Fields/Solvers.Create Constraint";

	// Note: constrainTypesOM is set by caller so just set the default value
	optionVar -init false -category $category -iv constrainTypesOM 1;

	optionVar -init $setFactorySettings -category $category
		-sv constrainName ""
		-iv constrainInterCB 0
		-iv constrainPosCBox 0
		-fv constrainPosX 0.0
		-fv constrainPosY 0.0
		-fv constrainPosZ 0.0
		-fv constrainOrientX 0.0
		-fv constrainOrientY 0.0
		-fv constrainOrientZ 0.0
		-fv constrainSpringStiffness 5.0
		-fv constrainSpringDamping 0.1
		-iv constrainSpringRestLengthCBox 0
		-fv constrainSpringRestLength 1.0
		;
}


global proc setSpringOptionVars (int $setFactorySettings)
{
	optionVar -init $setFactorySettings -category "Dynamics.nParticles.Create Springs"
		-sv springName ""
		-iv springAdd 0
		-iv springNoDuplicate 0
		-iv springExclusive 0
		-iv springMethodsOM 1
		-fv springMinDistance 0.0
		-fv springMaxDistance 0.0
		-iv springWireWalkLength 1
		-iv springUseStiffnessPS 0
		-iv springUseDampingPS 0
		-iv springUseRestLengthPS 1
		-fv springStiffness 1.0
		-fv springDamp 0.2
		-fv springRestLength 0
		-fv springStartForceWeight 1.0
		-fv springEndForceWeight 1.0
		;
}

global proc setParticleInstancerOptionVars (int $setFactorySettings)
{
	if(!`exists instancerOptionsValues_melToUI`){	
		 source "dynCreateLayout.mel";
	}

	optionVar -init $setFactorySettings -category "Dynamics.nParticles.Instancer"
		-sv particleInstancerName ""
		-sv PIautoCycleOM (instancerOptionsValues_melToUI("None"))
		-fv PIautoCycleStepSize 1.0
		-sv PIautoCycleStepUnitsOM (instancerOptionsValues_melToUI("Frames"))
		-sv PIlevelOfDetailOM (instancerOptionsValues_melToUI("Geometry"))
		-sv PIrotationUnitsOM (instancerOptionsValues_melToUI("Degrees"))
		-sv PIrotationOrderOM (instancerOptionsValues_melToUI("XYZ"))
		-iv PIdisplayAllTypes 0
		-sv PositionOM (instancerOptionsValues_melToUI("worldPosition"))
		-sv RotationOM (instancerOptionsValues_melToUI("None"))
		-sv AimDirectionOM (instancerOptionsValues_melToUI("None"))
		-sv AimPositionOM (instancerOptionsValues_melToUI("None"))
		-sv AimAxisOM (instancerOptionsValues_melToUI("None"))
		-sv AimUpAxisOM (instancerOptionsValues_melToUI("None"))
		-sv AimWorldUpOM (instancerOptionsValues_melToUI("None"))
		-sv ScaleOM (instancerOptionsValues_melToUI("None"))
		-sv ShearOM (instancerOptionsValues_melToUI("None"))
		-sv RotationTypeOM (instancerOptionsValues_melToUI("None"))
		-sv ObjectIndexOM (instancerOptionsValues_melToUI("None"))
		-sv VisibilityOM (instancerOptionsValues_melToUI("None"))
		-sv CycleStartObjectOM (instancerOptionsValues_melToUI("None"))
		-sv AgeOM (instancerOptionsValues_melToUI("age"))
		;
}



