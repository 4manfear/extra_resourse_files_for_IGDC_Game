// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
//  Creation Date:  October, 2006
//
//  Description:
//     This is the script used to implement menus and option boxes for
//  the relaxInitialState menu.
//  




//  Procedure Name:
//      setOptionVars
//
//  Description:
//		Initialize the option values.
//
//  Input Arguments:
//		Whether to set the options to default values.
//
//
proc setOptionVars(int $forceFactorySettings)
{
	optionVar -init $forceFactorySettings -category "Dynamics.Fields/Solvers.Relax Initial State"
		-iv  relaxInitialStateSteps 20
		-iv  relaxInitialStateIgnoreGravity 0
		-fv  relaxInitialStateDamp 0.5
		;
}

//
//  Procedure Name:
//      performRelaxInitialStateSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//		forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//  Return Value:
//      None.
//
global proc performRelaxInitialStateSetup(string $parent, int $forceFactorySettings)
{
	//	Retrieve the option settings
	//
	setOptionVars($forceFactorySettings);

	setParent $parent;

	intSliderGrp -edit 
		-v `optionVar -query relaxInitialStateSteps`
		relaxInitialStateSteps;

	checkBoxGrp -edit 
		-value1 `optionVar -query relaxInitialStateIgnoreGravity`
		relaxInitialStateIgnoreGravity;

	floatSliderGrp -edit 
		-v `optionVar -query relaxInitialStateDamp`
		relaxInitialStateDamp;
		
}

//
//  Procedure Name:
//      performRelaxInitialStateCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//		doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc performRelaxInitialStateCallback(string $parent, int $doIt)
{
    setParent $parent;

	optionVar -intValue relaxInitialStateSteps
		`intSliderGrp -query -v relaxInitialStateSteps`;

	optionVar -floatValue relaxInitialStateDamp
		`floatSliderGrp -query -v relaxInitialStateDamp`;

	optionVar -intValue relaxInitialStateIgnoreGravity
		`checkBoxGrp -query -value1 relaxInitialStateIgnoreGravity`;


	if( $doIt ) {
		performRelaxInitialState 0; 
	}
}


//
//  Procedure Name:
//      relaxInitialStateOptions
//
//  Description:
//		Construct the option box UI.  Involves accessing the standard option
//		box and customizing the UI accordingly.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc relaxInitialStateOptions()
{
	//	Name of the command for this option box.
	//
	string $commandName = "performRelaxInitialState";

	//	Build the option box actions.
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	string $layout = getOptionBox();
	setParent $layout;
	
	setUITemplate -pushTemplate DefaultTemplate;

	tabLayout -tv false -scr true;
	
	string $parent = `columnLayout -adjustableColumn 1`;
	intSliderGrp
		-label (uiRes("m_performRelaxInitialState.kSteps"))
		-field 1
		-min 1 
		-max 100
		-fieldMinValue 1
		-fieldMaxValue 10000
		relaxInitialStateSteps;

	floatSliderGrp
		-label (uiRes("m_performRelaxInitialState.kDamp"))
		-field 1
		-min 0 
		-max 10
		-fieldMinValue 0.0
		-fieldMaxValue 1000.0
		-pre 3
		relaxInitialStateDamp;

    checkBoxGrp -ncb 1 -label1 (uiRes("m_performRelaxInitialState.kIgnoreGravity"))
		relaxInitialStateIgnoreGravity;

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
		-label (uiRes("m_performRelaxInitialState.kRelaxInitialState"))
		-command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	//	Set the option box title.
	//
	setOptionBoxTitle((uiRes("m_performRelaxInitialState.kRelaxInitialStateOptions")));
	setOptionBoxCommandName($commandName);
	setOptionBoxHelpTag( "RelaxInitialState" );

	// Pop the UI template
	//
	setUITemplate -popTemplate;

	//	Set the current values of the option box.
	//
	eval( $setup + " " + $parent + " " + 0 );	

	
	//	Show the option box.
	//
	showOptionBox();
}


//
//  Procedure Name:
//      assembleCmd
//
//  Description:
//		Construct the command that will apply the option box values.
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//
proc string assembleCmd()
{
	setOptionVars(false);

	string $cmd = ("doRelaxInitialState " 
					+ (`optionVar -query relaxInitialStateSteps`-1) + " "
					+ (`optionVar -query relaxInitialStateDamp`) + " "
					+ (`optionVar -query relaxInitialStateIgnoreGravity`) );

	return $cmd;
}

//
//  Procedure Name:
//      performRelaxInitialState
//
//  Description:
//		Perform the command using the corresponding 
//		option values.  This procedure will also show the option box
//		window if necessary as well as construct the command string
//		that will invoke the command with the current 
//		option box values.
//
//  Input Arguments:
//      0 - Execute the command.
//      1 - Show the option box dialog.
//      2 - Return the command.
//
//  Return Value:
//      None.
//
global proc string performRelaxInitialState(int $action)
{
	string $cmd = "";

	switch ($action) {

		//	Execute the command from option settings.
		//
		case 0:
			setOptionVars(false);
			$cmd = `assembleCmd`;
			eval($cmd);
			break;

		//	Show the option box.
		//
		case 1:
			relaxInitialStateOptions();
			break;

		//	Return the command string.
		//
		case 2:
			setOptionVars (false);
			$cmd = `assembleCmd`;
			break;
	}
	return $cmd;
}

