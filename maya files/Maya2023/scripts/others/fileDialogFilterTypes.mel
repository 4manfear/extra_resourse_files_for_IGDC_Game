// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
{
	string $MayaScenes    = (uiRes("m_fileDialogFilterTypes.kMayaScenes"));
	string $MayaAscii     = (uiRes("m_fileDialogFilterTypes.kMayaAscii"));
	string $MayaBinary    = (uiRes("m_fileDialogFilterTypes.kMayaBinary"));
	string $ImageFiles    = (uiRes("m_fileDialogFilterTypes.kImageFiles"));
	string $PluginFiles   = (uiRes("m_fileDialogFilterTypes.kPluginFiles"));
	string $TemplateFiles = (uiRes("m_fileDialogFilterTypes.kTemplateFiles"));
    string $PixmapFiles   = (uiRes("m_fileDialogFilterTypes.kPixmapFiles"));
	string $AllFiles      = (uiRes("m_fileDialogFilterTypes.kAllFiles"));
	string $PSFiles       = (uiRes("m_fileDialogFilterTypes.kPhotoshopFiles"));
	string $CacheFiles    = (uiRes("m_fileDialogFilterTypes.kXMLCacheFiles"));
	// string $EDLFiles	  = _L10N(kEDLFiles, "XML and AAF Files");
	string $EDLFiles	  = (uiRes("m_fileDialogFilterTypes.kEDLFiles")); // MAYA-76440, temporary removing AAF support until we get automaticDuck replacement
	string $MovieFiles    = (uiRes("m_fileDialogFilterTypes.kMovieFiles"));
	string $ToolSettings  = (uiRes("m_fileDialogFilterTypes.kFromToolSettings"));
	string $OfflineEditAscii = (uiRes("m_fileDialogFilterTypes.kOfflineEditAscii"));
	string $OfflineEditBinary = (uiRes("m_fileDialogFilterTypes.kOfflineEditBinary"));
	string $MelFiles    = (uiRes("m_fileDialogFilterTypes.kMelFiles"));
	string $EDLExportFiles	 = (uiRes("m_fileDialogFilterTypes.kEDLExportFiles"));
	string $RenderProxy	  = (uiRes("m_fileDialogFilterTypes.kRenderProxy"));
	string $LightProfile  = (uiRes("m_fileDialogFilterTypes.kLightProfile"));
	string $weightMap         = (uiRes("m_fileDialogFilterTypes.kWeightMap"));
	string $JsonFiles     = (uiRes("m_fileDialogFilterTypes.kJSONFiles"));
	string $weightFiles    = (uiRes("m_fileDialogFilterTypes.kWeightFiles"));

	global string $gFileDialogFilterTypes[24];
	$gFileDialogFilterTypes[0] = ($AllFiles + " (*)");
	$gFileDialogFilterTypes[1] = ($MayaScenes + " (*.ma *.mb)");
	$gFileDialogFilterTypes[2] = ($MayaAscii + " (*.ma)");
	$gFileDialogFilterTypes[3] = ($MayaBinary + " (*.mb)");
	$gFileDialogFilterTypes[4] = ($ImageFiles + " (*.map *.pix *.als *.ALS *.jpeg *.JPEG *.jpg *.JPG *.pntg *.PNTG *.ps *.PS *.png *.PNG *.psd *.PSD *.pict *.PICT *.tx *.TX *.tex *.TEX");
		$gFileDialogFilterTypes[4] = ($gFileDialogFilterTypes[4] + " *.ptx");
		$gFileDialogFilterTypes[4] = ($gFileDialogFilterTypes[4] + " *.qt *.QT *.qtif *.QTIF *.sgi *.SGI *.tga *.TGA *.tif *.TIF *.bmp *.BMP *.tiff *.TIFF *.iff *.IFF *.rgb *.RGB *.tdi *.TDI *.gif *.GIF *.exr *.EXR *.xpm *.XPM *.hdr *.HDR *.dds *.DDS)");
	$gFileDialogFilterTypes[5] = ($PluginFiles + " (*.mll *.so *.py *.nll.dll *.pyc *.MLL *.SO *.PY *.PYC *.NLL.DLL *.bundle *.BUNDLE)");
	$gFileDialogFilterTypes[6] = ($TemplateFiles + " (*.template)");
    $gFileDialogFilterTypes[7] = ($PixmapFiles + " (*.bmp *.gif *.ico *.jpeg *.jpg *.mng *.pbm *.pgm *.png *.ppm *.svg *.tif *.tiff *.xbm *.xpm)");
	$gFileDialogFilterTypes[8] = ($PSFiles + " (*.psd)");
	$gFileDialogFilterTypes[9] = ($CacheFiles + " (*.xml)");
	// $gFileDialogFilterTypes[10] = ($EDLFiles + " (*.xml *.aaf)"); 
	$gFileDialogFilterTypes[10] = ($EDLFiles + " (*.xml)");// MAYA-76440, temporary removing AAF support until we get automaticDuck replacement
	$gFileDialogFilterTypes[11] = ($MovieFiles + " (*.avi *.AVI *.mov *.MOV *.qt *.QT *.mpeg *.MPEG)");
	$gFileDialogFilterTypes[12] = ($ToolSettings + " (*)");
	$gFileDialogFilterTypes[13] = ($OfflineEditAscii + " (*.editMA)");
	$gFileDialogFilterTypes[14] = ($OfflineEditBinary + " (*.editMB)");
	$gFileDialogFilterTypes[15] = ($MelFiles + " (*.mel)");
	$gFileDialogFilterTypes[16] = ($EDLExportFiles + " (*.xml)");
	$gFileDialogFilterTypes[17] = ($RenderProxy + " (*.mi *.mi.gz)");
	$gFileDialogFilterTypes[18] = ($LightProfile + " (*.ies *.ldt)");
	$gFileDialogFilterTypes[19] = ($weightMap      + " (*.weightMap)");
	$gFileDialogFilterTypes[22] = ($JsonFiles      + " (*.json)");
	$gFileDialogFilterTypes[23] = ($weightFiles + " (*.xml *.json)");
}

global proc string fileTypeToFilterDescription(string $type)
{
	string $filterDesc = $type;

	if ( $type == "mayaBinary")
	{
		$filterDesc = (uiRes("m_fileDialogFilterTypes.kMayaBinary"));
	}
	else if ( $type == "mayaAscii")
	{
		$filterDesc = (uiRes("m_fileDialogFilterTypes.kMayaAscii"));
	}
	else if ( $type == uiRes("m_fileOptions.kBestGuess"))
	{
		$filterDesc = uiRes("m_fileDialogFilterTypes.kAllFiles");
	}
	else if ( $type == "image")
	{
		$filterDesc = uiRes("m_fileDialogFilterTypes.kImageFiles");
	}
	else if ( $type == "movie")
	{
		$filterDesc = uiRes("m_fileDialogFilterTypes.kMovieFiles");
	}
	else if( $type == "edl" )
	{
		$filterDesc = uiRes("m_fileDialogFilterTypes.kEDLFiles");
	}
	else if( $type == "editMA" ) 
	{
		$filterDesc = uiRes("m_fileDialogFilterTypes.kOfflineEditAscii");
	}
	else if( $type == "editMB" ) 
	{
		$filterDesc = uiRes("m_fileDialogFilterTypes.kOfflineEditBinary");
	}
	else if( $type == "MIRenderProxy" ) 
	{
		$filterDesc = uiRes("m_fileDialogFilterTypes.kRenderProxy");
	}
	else if( $type == "ies" ) 
	{
		$filterDesc = uiRes("m_fileDialogFilterTypes.kLightProfile");
	}

	return $filterDesc;
}

global proc string filterDescriptionToFileType(string $filterDesc)
{
	string $buffer[];
	int $numSize;
	$numSize = `tokenize $filterDesc "(" $buffer`;
	$filterDesc = $buffer[0];
	if($numSize > 2){
		int $i=0;
		for($i=0;$i<$numSize-2;$i++){
			$filterDesc +="("+$buffer[$i+1];
		}
	}
	$filterDesc = strip($filterDesc);
	string $type = $filterDesc;

	if ($filterDesc == (uiRes("m_fileDialogFilterTypes.kMayaBinary")))
	{
		$type = "mayaBinary";
	}
	else if ($filterDesc == (uiRes("m_fileDialogFilterTypes.kMayaAscii")))
	{
		$type = "mayaAscii";
	}
	else if ($filterDesc == (uiRes("m_fileDialogFilterTypes.kAllFiles")))
	{
		$type = uiRes("m_fileOptions.kBestGuess");
	}
	else if ($filterDesc == (uiRes("m_fileDialogFilterTypes.kImageFiles")))
	{
		$type = "image";
	}
	else if ($filterDesc == (uiRes("m_fileDialogFilterTypes.kMovieFiles")))
	{
		$type = "movie";
	}
	else if(  ($filterDesc == (uiRes("m_fileDialogFilterTypes.kEDLFiles")))
			||($filterDesc == (uiRes("m_fileDialogFilterTypes.kEDLExportFiles"))))
	{
		$type = "edl";
	}
	else if($filterDesc == (uiRes("m_fileDialogFilterTypes.kOfflineEditAscii")))
	{
		$type = "editMA";
	}
	else if($filterDesc == (uiRes("m_fileDialogFilterTypes.kOfflineEditBinary")))
	{
		$type = "editMB";
	}
	else if($filterDesc == (uiRes("m_fileDialogFilterTypes.kRenderProxy")))
	{
		$type = "mentalRay";
	}
	else if($filterDesc == (uiRes("m_fileDialogFilterTypes.kLightProfile")))
	{
		$type = "ies";
	}

	return $type;
}

global proc string buildDefaultMayaOpenFilterList()
{
	global string $gFileDialogFilterTypes[];

	string $filter;

	$filter  = $gFileDialogFilterTypes[1]; $filter += ";;";
	$filter += $gFileDialogFilterTypes[2]; $filter += ";;";
	$filter += $gFileDialogFilterTypes[3]; $filter += ";;";
	$filter += $gFileDialogFilterTypes[0];

	return $filter;
}

global proc string buildDefaultMayaSaveFilterList()
{
	global string $gFileDialogFilterTypes[];

	string $filter;

	$filter += $gFileDialogFilterTypes[2]; $filter += ";;";
	$filter += $gFileDialogFilterTypes[3];

	return $filter;
}

global proc string buildDefaultReadWriteOfflineEditFilterList()
{
	global string $gFileDialogFilterTypes[];

	string $filter;

	$filter += $gFileDialogFilterTypes[13]; $filter += ";;";
	$filter += $gFileDialogFilterTypes[14];

	return $filter;
}

global proc string buildReadableFileFilterList()
{
	global string $gFileDialogFilterTypes[];
	string $fullFilterList;
	int $i, $len;
	string $trans[] = `translator -q -list`, $t;
	$len = size($trans);

    // Put "Maya Scenes (*.ma *.mb) first
    $fullFilterList = $gFileDialogFilterTypes[1];

	for ($i=0; $i<$len; $i++)
	{
		$t = $trans[$i];
		if (`translator -q -readSupport $t`)
		{
			if ("mayaAscii" == $t)
			{
				$fullFilterList += ";;";
				$fullFilterList += $gFileDialogFilterTypes[2];
			}
			else if ("mayaBinary" == $t)
			{
				$fullFilterList += ";;";
				$fullFilterList += $gFileDialogFilterTypes[3];
			}
			else if ("mayaLT" == $t)
			{
			}
			else
			{
				string $filters = `translator -q -filter $t`;
				if ("" != $filters)
				{
					string $splitFilters[];
					tokenize $filters ";" $splitFilters;
					
					string $fileFilter = ($t + " ( ");
					for ($filter in $splitFilters)
					{
						$fileFilter += ($filter + " ");
					}
					$fileFilter += ")";

					$fullFilterList += ";;";
					$fullFilterList += $fileFilter;
				}
			}
		}
	}

	$fullFilterList += ";;";
	$fullFilterList += (uiRes("m_fileDialogFilterTypes.kAllFiles"));
	$fullFilterList += " (*)";

	return $fullFilterList;
}

global proc string buildWritableFileFilterList()
{
	global string $gFileDialogFilterTypes[];
	string $fullFilterList;
	int $i, $len;
	string $trans[] = `translator -q -list`, $t;
	$len = size($trans);
    string $splitChar = "";
	for ($i=0; $i<$len; $i++)
	{
        if(size($splitChar) == 0 && size($fullFilterList) > 0){
            $splitChar = ";;";
        }
        
		$t = $trans[$i];
		if (`translator -q -writeSupport $t`)
		{
			if ("mayaAscii" == $t)
			{
				$fullFilterList += $splitChar + $gFileDialogFilterTypes[2];
			}
			else if ("mayaBinary" == $t)
			{
				$fullFilterList += $splitChar + $gFileDialogFilterTypes[3];
			}
			else if ("mayaLT" == $t)
			{
			}
			else
			{
				string $filters = `translator -q -filter $t`;
				if ("" != $filters)
				{
					string $splitFilters[];
					tokenize $filters ";" $splitFilters;
					
					string $fileFilter = ($t + " ( ");
					for ($filter in $splitFilters)
					{
						$fileFilter += ($filter + " ");
					}
					$fileFilter += ")";

					$fullFilterList += $splitChar + $fileFilter;
				}
			}
		}
	}

	return $fullFilterList;
}

global proc string buildWritableImageFileFilterList()
{
	python("import maya.app.general.createImageFormats as createImageFormats");
	python("formatManager = createImageFormats.ImageFormats()");
	string $formats[] =  python("formatManager.listFormats(createImageFormats.ImageDescriptor.kIsImage, createImageFormats.ImageDescriptor.filterFormat)");
	string $filter, $f;
	int $i, $len = size($formats);
	if ($len > 0)
	{
		$filter = $formats[0];
		for ($i=1; $i<$len; $i++)
		{
			$filter += ";;";
			$filter += $formats[$i];
		}
	}
	return $filter;
}

global proc string buildImageFileFilterList()
{
	global string $gFileDialogFilterTypes[];

	string $filter;

	$filter += $gFileDialogFilterTypes[4]; $filter += ";;";
	$filter += $gFileDialogFilterTypes[0];

	return $filter;
}

global proc string buildPlugInFileFilterList()
{
	global string $gFileDialogFilterTypes[];

	string $filter;

	$filter += $gFileDialogFilterTypes[5]; $filter += ";;";
	$filter += $gFileDialogFilterTypes[0];

	return $filter;
}

global proc string buildContainerTemplateFilterList()
{
	global string $gFileDialogFilterTypes[];

	string $filter;

	$filter += $gFileDialogFilterTypes[6]; $filter += ";;";
	$filter += $gFileDialogFilterTypes[0];

	return $filter;
}

global proc string buildPixmapFileFilterList()
{
	global string $gFileDialogFilterTypes[];

	string $filter;

	$filter += $gFileDialogFilterTypes[7]; $filter += ";;";
	$filter += $gFileDialogFilterTypes[0];

	return $filter;
}

global proc string[] fileBrowserActionSetup(string $type, int $fileMode) 
{
	global string $gFileDialogFilterTypes[];
	string $actionOptions[4];
	//$actionOptions[0] == Localized label for the action button.
	//$actionOptions[1] == File filter to select at the start.  This is the first part of a filter description only.
	//						eg. to select the filter "Maya Files (*.ma *.mb) we would pass "Maya Files".
	//$actionOptions[2] == File filters list.  Each entry is separated by double semi-colons  eg. "All Files (*.*);;Maya Scenes (*.mb *.mb)"

	int $acceptMode = 0;
	if (0 == $fileMode)
	{
		$acceptMode = 1;
	}

	if ($acceptMode == 0)
	{
		$actionOptions[0] = (uiRes("m_projectViewer.kOpen"));
	}
	else
	{
		$actionOptions[0] = (uiRes("m_projectViewer.kSave"));
	}

	if ($type == "image")
	{
		if ($acceptMode == 0)
		{
			$actionOptions[2] = buildImageFileFilterList();
		}
		else
		{
			$actionOptions[2] = buildWritableImageFileFilterList();
		}
	}
	else if ($type == "movie")
	{
		string $filter = $gFileDialogFilterTypes[11];
		if ($acceptMode == 0)
		{
			$filter += ";;";
			$filter += $gFileDialogFilterTypes[0];
		}

		$actionOptions[2] = $filter;
	}	
	else if ($type == "Photoshop")
	{
		string $filter = $gFileDialogFilterTypes[8];
		if ($acceptMode == 0)
		{
			$filter += ";;";
			$filter += $gFileDialogFilterTypes[0];
		}

		$actionOptions[2] = $filter;
	}
	else if ($type == "xmlcache")
	{
		string $filter = $gFileDialogFilterTypes[9];
		if ($acceptMode == 0)
		{
			$filter += ";;";
			$filter += $gFileDialogFilterTypes[0];
		}

		$actionOptions[2] = $filter;
	}
	else if ($type == "mel")
	{
		string $filter = $gFileDialogFilterTypes[15];
		if ($acceptMode == 0)
		{
			$filter += ";;";
			$filter += $gFileDialogFilterTypes[0];
		}

		$actionOptions[2] = $filter;
	}
	else if($type == "edl")
	{
		string $filter; 
		
		if ($acceptMode == 0)
		{
			$filter = $gFileDialogFilterTypes[10];
			$filter += ";;";
			$filter += $gFileDialogFilterTypes[0];
		}
		else
		{
			$filter = $gFileDialogFilterTypes[16];		
		}
		
		$actionOptions[2] = $filter;
	}
	else if($type == "map")
	{
		if ($acceptMode != 0)
		{
			$actionOptions[2] = $gFileDialogFilterTypes[12];
		}
		else
		{
			string $filter = $gFileDialogFilterTypes[19];
			$filter += ";;";
			$filter += buildImageFileFilterList();
			$actionOptions[2] = $filter;
		}
	}
	else if ($type == "MIRenderProxy")
	{
		string $filter = $gFileDialogFilterTypes[17];
		if ($acceptMode == 0)
		{
			$filter += ";;";
			$filter += $gFileDialogFilterTypes[0];
		}

		$actionOptions[2] = $filter;
	}
	else if ($type == "ies")
	{
		string $filter = $gFileDialogFilterTypes[18];
		$filter += ";;";
		$filter += $gFileDialogFilterTypes[0];
		$actionOptions[2] = $filter;
	}
	else if ($type == "json")
	{
		string $filter = $gFileDialogFilterTypes[22];
		if ($acceptMode == 0)
		{
			$filter += ";;";
			$filter += $gFileDialogFilterTypes[0];
		}

		$actionOptions[2] = $filter;
	}
	else if ($type == "weights")
	{
		string $filter = $gFileDialogFilterTypes[23];
		if ($acceptMode == 0)
		{
			$filter += ";;";
			$filter += $gFileDialogFilterTypes[0];
		}

		$actionOptions[2] = $filter;
	}
	else if ($acceptMode == 0)
	{
		$actionOptions[2] = buildReadableFileFilterList();
	}
	else
	{
		$actionOptions[2] = buildWritableFileFilterList();
	}


	if ( $type == "mayaBinary")
	{
        $actionOptions[1] = uiRes("m_fileDialogFilterTypes.kMayaBinary");
	}
	else if ( $type == "mayaAscii")
	{
        $actionOptions[1] = uiRes("m_fileDialogFilterTypes.kMayaAscii");
	}
	else if ( $type == uiRes("m_fileOptions.kBestGuess"))
	{
        $actionOptions[1] = uiRes("m_fileDialogFilterTypes.kAllFiles");
	}
	else if ( $type == "image")
	{
		string $type = uiRes("m_fileDialogFilterTypes.kImageFiles");

		if ($acceptMode != 0 && `optionVar -exists lastSaveImageAsFileType`) 
		{
			$type = `optionVar -q lastSaveImageAsFileType`;
		}

		$actionOptions[1] = $type;
	}
	else if ( $type == "movie")
	{
		$actionOptions[1] = uiRes("m_fileDialogFilterTypes.kMovieFiles");;
	}
	else if ( $type == "Photoshop")
	{
		$actionOptions[1] = uiRes("m_fileDialogFilterTypes.kPhotoshopFiles");;
	}
	else if ( $type == "xmlcache")
	{
		$actionOptions[1] = uiRes("m_fileDialogFilterTypes.kXMLCacheFiles");;
	}
	else if ( $type == "mel")
	{
		$actionOptions[1] = uiRes("m_fileDialogFilterTypes.kMelFiles");;
	}
	else if ( $type == "edl")
	{
	
		if ($acceptMode == 0)
		{
		$actionOptions[1] = uiRes("m_fileDialogFilterTypes.kEDLFiles");
	}
		else
		{
		 	$actionOptions[1] = uiRes("m_fileDialogFilterTypes.kEDLExportFiles");
		}		
	}
	else if ( $type == "iff")
	{
		string $iffFilters = ("iff (*.iff);;");
		$iffFilters += (uiRes("m_fileDialogFilterTypes.kAllFiles"));
		$iffFilters += " (*)";
		$actionOptions[2] = $iffFilters;
		$actionOptions[1] = ("iff");
	}
	else if ( $type == "MIRenderProxy")
	{
		$actionOptions[1] = uiRes("m_fileDialogFilterTypes.kRenderProxy");;
	}
	else if ( $type == "ies")
	{
		$actionOptions[1] = uiRes("m_fileDialogFilterTypes.kLightProfile");;
	}
	else if ( $type == "json")
	{
		$actionOptions[1] = uiRes("m_fileDialogFilterTypes.kJSONFiles");;
	}
	else if ( $type == "weights")
	{
		$actionOptions[1] = uiRes("m_fileDialogFilterTypes.kWeightFiles");;
	}
	else if ("" != $type)
	{
		$actionOptions[1] = $type;
	}
	else
	{
		$actionOptions[1] = uiRes("m_fileDialogFilterTypes.kAllFiles");
	}

	return $actionOptions;
}
