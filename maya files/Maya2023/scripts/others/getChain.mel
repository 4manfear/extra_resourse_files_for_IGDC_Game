// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//<doc>
//<name getChain>
//
//<synopsis>
//		getChain shapeNodeName
//
//<returns>
//		string[]		chain		: String array, one entry for each deformer.
//
//<description>
//		This function should no longer be used. The deformableShape
//		command should be used instead.
//
//		Returns the deformers that deform the given geometry. For example
//		if we have the following deformer chain created using the "before" ordering
//		and call getChain("pCubeShape1")
//
//			pCubeShape1Orig->bend1->cluster1->pCubeShape1
//
//		then this procedure will return two entries:
//
//			string[0] = "bend1"<br>
//			string[1] = "cluster1"<br>
//
//		Notes:
//		<ul>
//		<li>The deformers which deform the shape are the "upstream" deformer nodes.
//			If you call getChain("pCubeShape1Orig") you get an empty result because
//			the shape pCubeShape1Orig has no upstream deformers.</li>
//		<li>Any chains that are returned will only contain those deformers up to
//			the closest upstream shape node. Using other ordering modes than "before"
//			tends to introduce intermediate shape nodes in the chain and you will
//			subsequently obtain short deformer chains in your queries.</li>
//		</ul>
//
//<flags>
//		string $shapeNodeName : name of the shape node for which we wish to query the deformer chain for.
//
//<examples>
//	string $cube[] = `polyCube`;
//	nonLinear -before -type bend;
//	select $cube[0];
//	cluster -before;
//	getChain( $cube[0] );
//	// Result: bend1 cluster1
//
//</doc>
//

global proc string[] getChain(string $obj)
// Description:
//		Returns the deformers that deform $obj.
//
// Parameters:
//		string			$obj		: (in)	Name of the node to find the
//											deformers deforming it.
//
{
    return `deformableShape -ch $obj`;
}
