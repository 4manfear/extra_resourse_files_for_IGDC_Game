// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
//<doc>
//<name nextOrPreviousFrame>
//
//<synopsis>
//		nextOrPreviousFrame (string $advanceFlag)
//
//<returns>
//		None
//
//<description>
//      Script for going to the next or previous frame.
//
//<flags>
//      string $advanceFlag Valid values are "next" or "previous".
//
//<examples>
// // To go to the next frame
// nextOrPreviousFrame next
//
// // To go to the previous frame
// nextOrPreviousFrame previous
//
//</doc>
/////////////////////////////////////////////////////////////////////////

//
//  Procedure Name:
//      nextOrPreviousFrame
//
//  Return Value:
//      none
//
global proc nextOrPreviousFrame(string $advanceFlag)
{

	// Check for the sequencer as the active window
	//
	string $currentPanel = `getPanel -withFocus`;
	string $panelType = `getPanel -to $currentPanel`;
	if ($panelType == "scriptedPanel")
	{
		string $scriptedPanelType = `scriptedPanel -q -type $currentPanel`;
		if ($scriptedPanelType == "sequenceEditorPanel")
		{
			int $frameDiff = ($advanceFlag == "next") ? 1 : (-1);
			sequenceManager -ct ( `sequenceManager -q -ct ` + $frameDiff );
			return;
		}
	}

    float $by = `playbackOptions -query -by`;
    int $stepLoop = `playbackOptions -q -stepLoop`;

    float $curr = `currentTime -query`;
    float $frameDiff = ($advanceFlag == "next") ? $by : (-1.0*$by);

    if ($stepLoop) {
        float $min = `playbackOptions -query -min`;
        float $max = `playbackOptions -query -max`;

        // Just in case we started out outside the range
        if ($curr > $max)
            $curr = $max;
        else if ($curr < $min)
            $curr = $min;

        // Where do we want to go next?
        float $newFrame = ($curr + $frameDiff);

        if ($newFrame > $max) {
            $newFrame = $min + ($newFrame - $max) - 1;
        } else if ($newFrame < $min) {
            $newFrame = $max - ($min - $newFrame) + 1;
        }
        currentTime -edit $newFrame;
    } else {
        // simply move
        currentTime -edit ($curr + $frameDiff);
    }
}
