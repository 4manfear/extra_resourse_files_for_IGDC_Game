// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
//  Creation Date:  May, 2000
//
//  Description:
//      This script sets up the skinCluster Prune Weights option box
//
//  Input Arguments:
//      None.
//
//  Return Value:
//      None.
//

proc setOptionVars (int $forceFactorySettings)
{
	optionVar -init $forceFactorySettings -category "Rigging.Skin.Prune Small Weights"
		-fv scPruneWeight 0.01
		;
}

//
//  Procedure Name:
//      pruneWeightSetup
//
//  Description:
//		Update the state of the option box UI to reflect the option values.
//
//  Input Arguments:
//      parent               - Top level parent layout of the option box UI.
//                             Required so that UI object names can be 
//                             successfully resolved.
//
//		forceFactorySettings - Whether the option values should be set to
//                             default values.
//
//  Return Value:
//      None.
//
global proc pruneWeightSetup (string $parent, int $forceFactorySettings)
{
	// Retrieve the option settings
	//
	setOptionVars( $forceFactorySettings );
	
	setParent $parent;
	
	// Query the optionVar's and set the values into the controls
	//
	// Prune Weight
	//
	if (`floatSliderGrp -exists scPruneWeightSlider`){
		floatSliderGrp -edit
			-value `optionVar -query scPruneWeight`
			scPruneWeightSlider;
	}
}


//
//  Procedure Name:
//      pruneWeightCallback
//
//  Description:
//		Update the option values with the current state of the option box UI.
//
//  Input Arguments:
//      parent - Top level parent layout of the option box UI.  Required so
//               that UI object names can be successfully resolved.
//
//		doIt   - Whether the command should execute.
//
//  Return Value:
//      None.
//
global proc pruneWeightCallback (string $parent, int $doIt)
{
    setParent $parent;
	
	// Prune Weight
	//
	if (`floatSliderGrp -exists scPruneWeightSlider`) {
		optionVar -floatValue scPruneWeight
			`floatSliderGrp -query -value scPruneWeightSlider`;
	}
	if ($doIt) {
		performPruneWeights false; 
		addToRecentCommandQueue "performPruneWeights false" "PruneWeights";
	}
}


global proc pruneWeightOptions ()
{
	// Name of the command for this option box 
	//
	string $commandName = "pruneWeight";

	// Build the option box "methods"
	//
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");
	
	//	STEP 1:  Get the option box.
	//	============================
	//
	//	The value returned is the name of the layout to be used as
	//	the parent for the option box UI.
	//
	string $layout = getOptionBox();
	setParent $layout;
	
	//	STEP 2:  Pass the command name to the option box.
	//	=================================================
	//
	//	Any default option box behaviour based on the command name is set 
	//	up with this call.  For example, updating the 'Help' menu item with
	//	the name of the command.
	//
	setOptionBoxCommandName("skinPercent");
	
	//	STEP 3:  Activate the default UI template.
	//	==========================================
	//
	//	Activate the default UI template so that the layout of this 
	//	option box is consistent with the layout of the rest of the 
	//	application.
	//
	setUITemplate -pushTemplate DefaultTemplate;

	//	STEP 4: Create option box contents.
	//	===================================
	//	
	//	This, of course, will vary from option box to option box.	
	
	//	Turn on the wait cursor.
	//
	waitCursor -state 1;

	tabLayout -tabsVisible 0 -scrollable 1;
	
	string $parent = `columnLayout -adjustableColumn 1`;

	floatSliderGrp -label (uiRes("m_performPruneWeights.kPruneBelow"))  -minValue 0.0 -maxValue 1.0 -pre 4 scPruneWeightSlider;

	//	Turn off the wait cursor.
	//
	waitCursor -state 0;
	
	//	Step 5: Deactivate the default UI template.
	//	===========================================
	//
	setUITemplate -popTemplate;

	//	Step 6: Customize the buttons.  
	//	==============================
	//
	//	Provide more descriptive labels for the buttons.  This is not 
	//	necessary, but in some cases, for example, a button labelled 
	//	'Create' may be more meaningful to the user than one labelled
	//	'Apply'.
	//
	//	Disable those buttons that are not applicable to the option box.
	//
	//	Attach actions to those buttons that are applicable to the option
	//	box.  Note that the 'Close' button has a default action attached 
	//	to it that will hide the window.  If a a custom action is
	//	attached to the 'Close' button then be sure to call the 'hide the
	//	option box' procedure within the custom action so that the option
	//	box is hidden properly.

	//	'Apply' button.
	//
	string $applyBtn = getOptionBoxApplyBtn();
	button -edit -label (uiRes("m_performPruneWeights.kPrune")) 
		-command ($callback + " " + $parent + " " + 1)
		$applyBtn;

	//	'Save' button.
	//
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	//	'Reset' button.
	//
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1)
		$resetBtn;

	//	Step 7: Set the option box title.
	//	=================================
	//
	setOptionBoxTitle (uiRes("m_performPruneWeights.kPruneWeightsOptions"));

	//	Step 8: Customize the 'Help' menu item text.
	//	============================================
	//
	setOptionBoxHelpTag( "PruneSmallWeights" );

	//	Step 9: Set the current values of the option box.
	//	=================================================
	//
	eval (($setup + " " + $parent + " " + 0));	
	
	//	Step 10: Show the option box.
	//	=============================
	//
	showOptionBox();
}

proc string assembleCmd ()
{
	string $cmd;

	setOptionVars( false );
	
	$cmd = "doPruneSkinClusterWeightsArgList 1 { " +
				"\"" + `optionVar -query scPruneWeight` + "\"" +
			" };";
	return $cmd;
}

global proc string performPruneWeights (int $action)
// The action variable means
//		0 - do the command
//		1 - show the option box
//		2 - return the drag command
{
	string $cmd = "";

	switch ($action) {
		case 0: // Execute the command
			// Retrieve the option settings
			//
			setOptionVars (false);

			// Get the command and print it in the command window
			$cmd = `assembleCmd`;
			
			// Execute the command with the option settings
			evalEcho($cmd);

			break;
		case 1:  // Do the option box
			pruneWeightOptions;
			break;
		case 2: // Return the drag string
			// Retrieve the option settings
			//
			setOptionVars (false);

			// Get the command
			$cmd = `assembleCmd`;

			break;
	}
	return $cmd;
}
