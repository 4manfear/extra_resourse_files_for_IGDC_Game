// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
//  Creation Date:	Jan. 6, 97
//
//  Description:	defines behaviour and layout of ikHandleContext
//					tool property sheet
//


global proc ikHandleHSetCallbacks (string $parent)
//
//	Procedure Name:
//		ikHandleHSetCallbacks
//
//	Description:
//		associate control events with callbacks
//
//	Input Arguments:
//		parent name.
//
//	Return Value:
//		None.
//
{
	setParent	$parent;

	optionMenuGrp -e
		-cc `CBG "ikHandleH" $parent "selectedIKSolver"`
		ikHandleHOptionMenu;

	checkBoxGrp -e
		-on1 `CBG "ikHandleH" $parent "autoPriorityOn"`
		-of1 `CBG "ikHandleH" $parent "autoPriorityOff"`
		autoPriorityGrp;

	checkBoxGrp -e
		-on1 `CBG "ikHandleH" $parent "snapHandleHOn"`
		-of1 `CBG "ikHandleH" $parent "snapHandleHOff"`
		snapHandleGrp;

	checkBoxGrp -e
		-on1 `CBG "ikHandleH" $parent "forceSolverHOn"`
		-of1 `CBG "ikHandleH" $parent "forceSolverHOff"`
		forceSolverGrp;

	//=====================================================
	// For maya1.0, there is not superSticky yet. So in UI,
	// use checkBox to turn on/off sticky.
	//
	// Use radioButtonGrp when implementing superSticky.
	//=====================================================
	//radioButtonGrp -e
	//  -on1 `CBG "ikHandleProp" $parent "stickyOff"`
	//  -on2 `CBG "ikHandleProp" $parent "stickySticky"`
	//  -on3 `CBG "ikHandleProp" $parent "stickySuperSticky"`
	//  stickyGrp;
	checkBoxGrp -e
		-on1 `CBG "ikHandleH" $parent "stickyHOn"`
		-of1 `CBG "ikHandleH" $parent "stickyHOff"`
		stickyGrp;

	intSliderGrp -e
		-cc `CBG "ikHandleH" $parent "priorityHValue"`
		priority;

	floatSliderGrp -e
		-cc `CBG "ikHandleH" $parent "weightHValue"`
		handleWeight;

	floatSliderGrp -e
		-cc `CBG "ikHandleH" $parent "poWeightHValue"`
		handlePOWeight;

	return;
}

global proc ikHandleHOptionLayout(string $parentN, int $cl )
//
//	Procedure Name:
//		ikHandleHOptionLayout
//
//	Description:
//		jointTool property sheet shares this proc to create ikHandle part.
//
{
	string	$parent;
	string	$solvers[];
	string	$solverType;
	int		$i, $itemNum;

	setParent $parentN;

	setUITemplate -pushTemplate OptionsTemplate;

	frameLayout -cll true -cl $cl -label (uiRes("m_ikHandleProperties.kIKHandleSettings"))  ikHandleHFrame;
		columnLayout ikHandleHOptions;
			separator -style "none";
			$parent = `setParent -query`;

			optionMenuGrp -label (uiRes("m_ikHandleProperties.kCurrentSolver"))  ikHandleHOptionMenu;
			$solvers = `ikSystem -q -ls`;
			$itemNum = 0;
			for( $i = 0; $i < size($solvers); $i++ )
			{
				$solverType = `objectType $solvers[$i]`;
				if( $solverType != "ikSplineSolver" &&
					$solverType != "hikSolver")
				{
					string $l10n = ikSolverLocalize($solvers[$i]);
					menuItem -label $l10n ($solvers[$i] + $itemNum);
					$itemNum++;
				}
			}

			separator -hr true sep1;

			checkBoxGrp
				-label ""
				-numberOfCheckBoxes 1
				-label1 (uiRes("m_ikHandleProperties.kAutopriority")) 
				autoPriorityGrp;

			checkBoxGrp
				-label ""
				-numberOfCheckBoxes 1
				-label1 (uiRes("m_ikHandleProperties.kSolverEnable")) 
				forceSolverGrp;

			checkBoxGrp
				-label ""
				-numberOfCheckBoxes 1
				-label1 (uiRes("m_ikHandleProperties.kSnapEnable")) 
				snapHandleGrp;

			checkBoxGrp
				-label ""
				-numberOfCheckBoxes 1
				-label1 (uiRes("m_ikHandleProperties.kSticky")) 
				stickyGrp;

			separator -hr true sep2;

			intSliderGrp
				-field 1
				-label (uiRes("m_ikHandleProperties.kPriority")) 
				-minValue 0
				-value 1
				priority;

			floatSliderGrp
				-field 1
				-label (uiRes("m_ikHandleProperties.kWeight")) 
				-minValue 0.0
				-maxValue 100.0
				-step 0.1
				-value 1.0
				handleWeight;

			floatSliderGrp
				-field 1
				-label (uiRes("m_ikHandleProperties.kPOWeight")) 
				-minValue 0.0
				-maxValue 1.0
				-step 0.001
				-value 1.0
				handlePOWeight;

		setParent ..; // ikHandleHOptions
	setParent ..; // ikHandleHFrame

	setUITemplate -popTemplate;

	ikHandleHSetCallbacks( $parent );

	clear($solvers);

	return;
}


global proc ikHandleProperties ()
//
//	Procedure Name:
//		ikHandleProperties
//
//	Description:
//		layout of tool property sheet
//
//	Input Arguments:
//		None.
//
//	Return Value:
//		None.
//
{
	setUITemplate -pushTemplate DefaultTemplate;

	string $parent = `toolPropertyWindow -q -location`;
	setParent $parent;

	columnLayout ikHandle;
		$parent = `setParent -query`;
		ikHandleHOptionLayout( $parent, false );
	setParent ..; // ikHandle

	setUITemplate -popTemplate;

	return;
}


global proc ikHandleHCallback(string $parent, string $whichCallback)
//
//	Procedure Name:
//		ikHandleHCallback
//
//	Description:
//		Callbacks for the IK Handle Tool Property Sheet.
//
//	Input Arguments:
//		Parent name, and
//		current callback name.
//
//	Return Value:
//		None.
//
{
	setParent	$parent;
	string		$whichCtx = `currentCtx`;

	switch ($whichCallback)
	{
		case "selectedIKSolver":
			string $solverName = ikSolverUnlocalize(`optionMenuGrp -q -value ikHandleHOptionMenu`);
			ikHandleCtx -e -solverTypeH $solverName $whichCtx;
			break;

		case "autoPriorityOn":
			intSliderGrp -e -enable false priority;
			ikHandleCtx -e -autoPriorityH true $whichCtx;
			break;

		case "autoPriorityOff":
			intSliderGrp -e -enable true priority;
			ikHandleCtx -e -autoPriorityH false $whichCtx;
			break;

		case "snapHandleHOn":
			ikHandleCtx -e -snapHandleH true $whichCtx;
			break;

		case "snapHandleHOff":
			ikHandleCtx -e -snapHandleH false $whichCtx;
			break;

		case "forceSolverHOn":
			ikHandleCtx -e -forceSolverH true $whichCtx;
			break;

		case "forceSolverHOff":
			ikHandleCtx -e -forceSolverH false $whichCtx;
			break;

		case "stickyHOn":
			ikHandleCtx -e -stickyH sticky $whichCtx;
			break;

		case "stickyHOff":
			ikHandleCtx -e -stickyH off $whichCtx;
			break;

		case "priorityHValue":
			int $p = `intSliderGrp -q -v priority`;
			ikHandleCtx -e -priorityH $p $whichCtx;
			break;

		case "weightHValue":
			float $w = `floatSliderGrp -q -v handleWeight`;
			ikHandleCtx -e -weightH $w $whichCtx;
			break;

		case "poWeightHValue":
			float $pow = `floatSliderGrp -q -v handlePOWeight`;
			ikHandleCtx -e -poWeightH $pow $whichCtx;
			break;
	}
}





