// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
//
//
/////////////////////////////////////////////////////////////////////////
//
//  Creation Date:  September, 1999
//
//<doc>
//<name findRelatedSkinCluster>
//
//<synopsis>
//		findRelatedSkinCluster (string $skinObj)
//
//<returns>
//		None
//
//<description>
//      Script for finding a skin cluster that deforms the specified skin.
//
//<examples>
// // To find the skinCluster for a skin called "johnBoy", type:
//
// findRelatedSkinCluster("johnBoy");
//
//</doc>
/////////////////////////////////////////////////////////////////////////
//
global proc string findRelatedSkinCluster(string $obj)
{
    // Get shortest unique path (to match output of skinCluster)
	string $objects[] = `ls $obj`;
    if (size($objects) != 1) {
    	if (size($objects) < 1) {
            error (uiRes("m_findRelatedSkinCluster.kObjectNotFound"));
    	} else {
            error (uiRes("m_findRelatedSkinCluster.kObjectNotUnique"));
        }
        return "";
	}

	string $skinShape;
	string $skinShapeWithPath;
	string $hiddenShape;
	string $hiddenShapeWithPath;
	string $skinObj = $objects[0];
	string $cpTest[] = `ls -type controlPoint $skinObj`;
	if (size($cpTest)) {
		$skinShape = $skinObj;
	} else {
		string $rels[] = `listRelatives $skinObj`;
		for ($r in $rels) {
			$cpTest = `ls -type controlPoint ($skinObj+"|"+$r)`;
			if (0 == size($cpTest)) {
				continue;
			}
			int $io = `getAttr ($skinObj+"|"+$r+".io")`;
			if ($io) {
				continue;
			}

			int $visible = `getAttr ($skinObj+"|"+$r+".v")`;
			if (! $visible) {
				$hiddenShape = $r;
				$hiddenShapeWithPath = ($skinObj+"|"+$r);
				continue;
			}

			$skinShape = $r;
			$skinShapeWithPath = ($skinObj+"|"+$r);
			break;
		}
	}

	if (0 == size($skinShape)) {
		if (0 == size($hiddenShape)) {
			return "";
		} else {
			$skinShape = $hiddenShape;
			$skinShapeWithPath = $hiddenShapeWithPath;
		}
	}

	string $clusters[] = `ls -type skinCluster`;
	for ($c in $clusters) {
		string $geom[] = `skinCluster -q -g $c`;
		for ($g in $geom) {
			if ($g == $skinShape || $g == $skinShapeWithPath) {
				return $c;
			}
		}
	}
	return "";
}
