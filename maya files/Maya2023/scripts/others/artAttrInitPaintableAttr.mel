// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
// Creation Date:  May 2000 
//
//  Procedure Name:
//      artAttrInitPaintableAttr	
//
//  Description:
//		Initializes the paintable attribute.
//
//  Return Value:
//      0 - if the selection failed.
//      1 - if the selection succeded.
//
global string $gArtAttrCurrentAttr = "";  // Currently selected paintable attr.

proc int artAttrValidateAttr(
	string $attribute
)
// Validate that the attribute is paintable.
{
	string $buf[];
	tokenize($attribute, ".", $buf);
	if (size($buf) < 3) 
		return 0;

	$attr = $buf[0] + "." + $buf[1] + "." + $buf[2];
	string $isPaintableCmd = "makePaintable -q " + $buf[0] + " " + $buf[2];
	int    $isPaintable[] = eval($isPaintableCmd);

	return size($isPaintable); 
}


proc int artAttrFindFirstPaintableAttr()
{
	string $artCmd = "artAttrCtx";

	string $attr = "";
	string $cmd = $artCmd + " -q -objattrArray " + `currentCtx`;
	string $paintAttr = `eval $cmd`;
	string $ListPaintableItem[];
	tokenize( $paintAttr, " ", $ListPaintableItem );
	if (size($ListPaintableItem) < 1) {
		return 0;
	}

	int $attrSelected = 0 ;
	global string $gArtAttrCurrentAttr;
        
	int $foundCurrentInPaintableList=0;
	for ($paintableItem in $ListPaintableItem) {
		string $buf[];
		tokenize($paintableItem, ".", $buf);
		if (size($buf) < 3) {
			continue;
		}
		$attr = $buf[0] + "." + $buf[1] + "." + $buf[2];
		if ( $attr==$gArtAttrCurrentAttr ) {
			$foundCurrentInPaintableList=1;
			break;
		}
	}

	if ( $foundCurrentInPaintableList ) {
		$attrSelected = 1;
		artAttrSelected( $artCmd, $gArtAttrCurrentAttr );
		return $attrSelected;
	}

	string $nodeType  ;

	for ($paintableItem in $ListPaintableItem) {
		string $buf[];
		tokenize($paintableItem, ".", $buf);
		if (size($buf) < 3) {
			continue;
		}
		$attr = $buf[0] + "." + $buf[1] + "." + $buf[2];

		//skip vertexColorRGB and vertexFaceColorRGB attrs as they cannot be painted
		// with Attribute paint tool till we support color painting.
		if( $buf[2] == "vertexColorRGB" || $buf[2] == "vertexFaceColorRGB") {
			continue ;
		}
		
		string $isPaintableCmd = "makePaintable -q " + $buf[0] + " " + $buf[2];

		int $isPaintable[] = eval($isPaintableCmd);	

		if (size($isPaintable) < 1) {
			continue;
		}
		// get the paintable attribute for the selected filter 
		string $artAttrFilterLabel = artAttrFilterLabel();
		string $filter[];
		if( $artAttrFilterLabel != ""  
		&&( $artAttrFilterLabel != (uiRes("m_artAttrToolScript.kFilterAll"))))
		{			
			tokenize($artAttrFilterLabel, " ", $filter);			
		}

		if ($isPaintable[0]) {
			if( $attrSelected == 0 && (($filter[1] == $buf[0]) 
			||( $artAttrFilterLabel == (uiRes("m_artAttrToolScript.kFilterAll"))))) {				
				$nodeType = $buf[0] ;			
				artAttrSelected( $artCmd, $attr );				
				$attrSelected = 1;				
			} else {
				if( $nodeType == $buf[0] )				
					artAttrSelected( $artCmd, $attr );					
			}		
		}
	}

	return $attrSelected ;
}

global proc int artAttrSetPaintableNode()
{
	source "artAttrCallback.mel";

	string $artCmd = "artAttrCtx";

	global string $gArtAttrCurrentAttr;

	if ( $gArtAttrCurrentAttr != "" ) {

		// Verify that this attribute is still a valid selection.
		if ( artAttrValidateAttr( $gArtAttrCurrentAttr ) ) {
			artAttrSelected( $artCmd, $gArtAttrCurrentAttr );
			return 1;
		}

		$gArtAttrCurrentAttr = "";
	}

	return artAttrFindFirstPaintableAttr();
}

global proc int artAttrInitPaintableAttr() 
{
	source "artAttrCallback.mel";

	global string $gArtAttrCurrentAttr;	

	if ( $gArtAttrCurrentAttr != "" ) {

		// Verify whether this attribute is still a valid selection.
		if ( !artAttrValidateAttr( $gArtAttrCurrentAttr ) ) {
		    $gArtAttrCurrentAttr = "";
		}
	}

	return artAttrFindFirstPaintableAttr() ;
}
