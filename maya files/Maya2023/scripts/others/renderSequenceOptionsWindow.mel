// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
// Description:
//
// Options window for interactive sequence rendering.
//

global string $gRenderSequenceOptionsWindow = "";
global string $gRenderSequenceOptionsLayout = "";

// Creates the options used by sequence rendering
//
global proc createRenderSequenceOptionVars()
{
	optionVar -init false -category "Rendering.Render.Render Sequence"
		-iv "renderSequenceAllLayers" 0
		-iv "renderSequenceAllCameras" 0
		-iv "renderSequenceAddToRenderView" 0
		-iv "renderSequenceAddAllLayers" 0
		-iv "renderSequenceAddAllCameras" 0
		-iv "renderSequenceRegion" 0
		;
}

// Updates the render sequence options window
//
global proc updateRenderSequenceOptionsWindow()
{
	global string $gRenderSequenceOptionsWindow;
	global string $gRenderSequenceOptionsLayout;

	if ($gRenderSequenceOptionsLayout == "") {
		return;
	}

	int $animation = `getAttr "defaultRenderGlobals.animation"`;
	int $startFrame = `getAttr "defaultRenderGlobals.startFrame"`;
	int $endFrame = `getAttr "defaultRenderGlobals.endFrame"`;

	string $title = (uiRes("m_renderSequenceOptionsWindow.kRenderSequenceWindowTitle"));
	if ($animation) {
		$title += " (Frame: ";
		$title += $startFrame;
		$title += "-";
		$title += $endFrame;
		$title += ")";
	} else {
		$title += " (";
		$title += (uiRes("m_renderSequenceOptionsWindow.kCurrentFrame"));
		$title += ")";
	}
	window -edit -title $title $gRenderSequenceOptionsWindow;

	string $oldParent = `setParent -q`;
	setParent $gRenderSequenceOptionsLayout;

	int $save = `optionVar -q "renderSequenceAddToRenderView"`;
	checkBoxGrp -edit -enable $save renderSequenceAddAllLayersCtrl;
	checkBoxGrp -edit -enable $save renderSequenceAddAllCamerasCtrl;

	setParent $oldParent;
}

// Update the Render View current camera to match the render sequence current
// camera control.
//
global proc renderSequenceCurrentCameraChanged()
{
    string $camera = `optionMenuGrp -q -value renderSequenceCameraList`;
    string $panels[] = `getPanel -scriptType "renderWindowPanel"`;
    renderWindowEditor -edit -currentCamera $camera $panels[0];
}

// When the list of cameras changes, we need to update our current camera
// control to match.
//
global proc updateCameraList()
{
    string $menuLongNames[] = `optionMenuGrp -query -itemListLong renderSequenceCameraList`;
    string $value = "";
    if(size($menuLongNames) > 0)
    {
        // If the camera list had values, then keep track of the current value
        // as we may need to reapply this value after recreating the list of
        // cameras.
        $value = `optionMenuGrp -query -value renderSequenceCameraList`;

        // Deletes the camera menu items
        deleteUI -menuItem $menuLongNames;
    }

    // Add the list of cameras to the option menu group.
    for( $camera in `listCameras` )
    {
        menuItem -p "renderSequenceCameraList|OptionMenu" $camera;
    }
    // Did we store the old value?
    if($value != "")
    {
        // If so, check to see if this value exists in the new camera list.
        int $found = 0;
        string $menuShortNames[] = `optionMenuGrp -query -itemListShort renderSequenceCameraList`;
        for($i=0; $i<size($menuShortNames); $i++)
        {
            if($menuShortNames[$i] == $value)
            {
                $found = 1;
                break;
            }
        }
        // If it exists, set the camera to this value.
        if($found == 1)
        {
            optionMenuGrp -edit -value $value renderSequenceCameraList;
        }
        // If not, set the current camera to the currently selected camera.
        else
        {
            renderSequenceCurrentCameraChanged();
        }
    }
}

// Sets the render sequence camera list's selected camera equal to the current
// camera.
//
global proc updateCameraListCurrentCamera()
{
    string $camera = `getCurrentCamera`;

    // Make sure this camera exists in the camera list
    // and if so selected it as current.
    string $menuShortNames[] = `optionMenuGrp -query -itemListShort renderSequenceCameraList`;
    for($i=0; $i<size($menuShortNames); $i++)
    {
        if($menuShortNames[$i] == $camera)
        {
            optionMenuGrp -edit -value $camera renderSequenceCameraList;
            break;
        }
    }
}

global proc renderSequenceSelectAlternateOutputFileLocation()
{
    string $renderSequenceAlternateOutputFileLocation = `textField -q -text renderSequenceAlternateOutputFileLocationCtrl`;
    string $renderSequenceAlternateOutputFileLocationDirname = "";

    // If we have a valid directory, use it
    if(`filetest -d $renderSequenceAlternateOutputFileLocation`)
    {
        $renderSequenceAlternateOutputFileLocationDirname = $renderSequenceAlternateOutputFileLocation;
    }
    // If not, use the default alternate output file location.
    else
    {
        $renderSequenceAlternateOutputFileLocationDirname = renderSequenceDefaultAlternateOutputFileLocation();
    }

    // If we got a valid path (the user didn't press cancel)
    // then update our text field's alternate output file location.
    string $result[] = `fileDialog2 -fileMode 3 -startingDirectory $renderSequenceAlternateOutputFileLocationDirname -okCaption (uiRes("m_renderSequenceOptionsWindow.kSelectCaption"))`;
    if($result[0] != "")
    {
        textField -edit -text $result[0] renderSequenceAlternateOutputFileLocationCtrl;
    }
}

global proc renderSequenceAlternateOutputFileLocationChanged()
{
    string $text = `textField -q -text renderSequenceAlternateOutputFileLocationCtrl`;
    optionVar -stringValue "RenderSequenceAlternateOutputFileLocation" $text;
}

// Creates the render sequence options window
//
global proc renderSequenceOptionsWindow()
{
	global string $gRenderSequenceOptionsWindow = "renderSequenceOptionsWnd";
	global string $gRenderSequenceOptionsLayout;

	// Make sure the option vars exists
	createRenderSequenceOptionVars();

	if (`window -q -exists $gRenderSequenceOptionsWindow`)
	{
		deleteUI -window $gRenderSequenceOptionsWindow;
	}

	window -title (uiRes("m_renderSequenceOptionsWindow.kRenderSequence")) -rtf true $gRenderSequenceOptionsWindow;

	setUITemplate -pushTemplate OptionsTemplate;

	string $formLayout = `formLayout`;
	int $width = 175;

	$gRenderSequenceOptionsLayout = `columnLayout -adjustableColumn true`;

		frameLayout -label (uiRes("m_renderSequenceOptionsWindow.kRenderOptions")) -collapsable false -marginHeight 5;
			string $layout = `columnLayout -adjustableColumn true`;

				scriptJob -parent $layout -event "cameraChange" updateCameraList;
				scriptJob -parent $layout -event "RenderViewCameraChanged" updateCameraListCurrentCamera;
				optionMenuGrp
					-label (uiRes("m_renderSequenceOptionsWindow.kCurrentCamera"))
					-changeCommand ("renderSequenceCurrentCameraChanged")
					-columnWidth 1 $width
					-columnWidth 2 100
					-enable (`optionVar -query "renderSequenceAllCameras"` == 0)
					renderSequenceCameraList;
				updateCameraList();
				string $camera = `getCurrentCamera`;
				updateCameraListCurrentCamera();

				checkBoxGrp -label (uiRes("m_renderSequenceOptionsWindow.kRenderSequenceCurrentLayer")) -numberOfCheckBoxes 1
					-offCommand ("optionVar -intValue \"renderSequenceAllLayers\" 0")
					-onCommand ("optionVar -intValue \"renderSequenceAllLayers\" 1")
					-v1 (`optionVar -q "renderSequenceAllLayers"`)
					-columnWidth 1 $width
					renderSequenceAllLayersCtrl;

				checkBoxGrp -label (uiRes("m_renderSequenceOptionsWindow.kRenderSequenceCurrentCamera")) -numberOfCheckBoxes 1
					-offCommand ("optionMenuGrp -edit -enable true renderSequenceCameraList; optionVar -intValue \"renderSequenceAllCameras\" 0")
					-onCommand ("optionMenuGrp -edit -enable false renderSequenceCameraList; optionVar -intValue \"renderSequenceAllCameras\" 1")
					-v1 (`optionVar -q "renderSequenceAllCameras"`)
					-columnWidth 1 $width
					renderSequenceAllCamerasCtrl;

				checkBoxGrp -label (uiRes("m_renderSequenceOptionsWindow.kRenderSequenceRegion")) -numberOfCheckBoxes 1 
					-offCommand ("optionVar -intValue \"renderSequenceRegion\" 0")
					-onCommand ("optionVar -intValue \"renderSequenceRegion\" 1")
					-v1 (`optionVar -q "renderSequenceRegion"`)
					-columnWidth 1 $width
					renderSequenceRegionCtrl;

				if(mayaHasRenderSetup())
				{
					checkBoxGrp -label (uiRes("m_renderSequenceOptionsWindow.kRenderSequenceIgnoreLocalOverrides")) -numberOfCheckBoxes 1
						-offCommand ("optionVar -intValue \"renderSequenceIgnoreLocalOverrides\" 0")
						-onCommand ("optionVar -intValue \"renderSequenceIgnoreLocalOverrides\" 1")
						-v1 (`optionVar -q "renderSequenceIgnoreLocalOverrides"`)
						-columnWidth 1 $width
						renderSequenceIgnoreLocalOverridesCtrl;
				}

				rowLayout -nc 3 -columnWidth 1 $width -adjustableColumn 2 -columnWidth 3 20;
					text -label (uiRes("m_renderSequenceOptionsWindow.kAlternateOutputFileLocation"))
						-annotation (uiRes("m_renderSequenceOptionsWindow.kAlternateOutputFileLocationAnnotation"));
					textField -textChangedCommand "renderSequenceAlternateOutputFileLocationChanged()" renderSequenceAlternateOutputFileLocationCtrl;
					symbolButton -image "navButtonBrowse.xpm" -command "renderSequenceSelectAlternateOutputFileLocation()";

					// If we already have a render sequence alternate output file location defined, then use it.
					if(`optionVar -exists "RenderSequenceAlternateOutputFileLocation"`)
					{
						string $renderSequenceAlternateOutputFileLocation =
							`optionVar -q "RenderSequenceAlternateOutputFileLocation"`;
						textField -edit -text $renderSequenceAlternateOutputFileLocation renderSequenceAlternateOutputFileLocationCtrl;
					}

				setParent ..;
			setParent ..;
		setParent ..;

		frameLayout -label (uiRes("m_renderSequenceOptionsWindow.kRenderViewOptions")) -collapsable false -marginHeight 5;
			columnLayout -adjustableColumn true;

				checkBoxGrp -label (uiRes("m_renderSequenceOptionsWindow.kRenderSequenceAddToRenderView")) -numberOfCheckBoxes 1 
					-offCommand ("optionVar -intValue \"renderSequenceAddToRenderView\" 0; updateRenderSequenceOptionsWindow()")
					-onCommand ("optionVar -intValue \"renderSequenceAddToRenderView\" 1; updateRenderSequenceOptionsWindow()")
					-v1 (`optionVar -q "renderSequenceAddToRenderView"`)
					-columnWidth 1 $width
					renderSequenceSaveCtrl;

				checkBoxGrp -label (uiRes("m_renderSequenceOptionsWindow.kRenderSequenceAddAllLayers")) -numberOfCheckBoxes 1 
					-offCommand ("optionVar -intValue \"renderSequenceAddAllLayers\" 0")
					-onCommand ("optionVar -intValue \"renderSequenceAddAllLayers\" 1")
					-v1 (`optionVar -q "renderSequenceAddAllLayers"`)
					-columnWidth 1 $width
					renderSequenceAddAllLayersCtrl;

				checkBoxGrp -label (uiRes("m_renderSequenceOptionsWindow.kRenderSequenceAddAllCameras")) -numberOfCheckBoxes 1 
					-offCommand ("optionVar -intValue \"renderSequenceAddAllCameras\" 0")
					-onCommand ("optionVar -intValue \"renderSequenceAddAllCameras\" 1")
					-v1 (`optionVar -q "renderSequenceAddAllCameras"`)
					-columnWidth 1 $width
					renderSequenceAddAllCamerasCtrl;

			setParent ..;
		setParent ..;

	setParent ..;

	setUITemplate -popTemplate;

	button -label (uiRes("m_renderSequenceOptionsWindow.kRenderSequenceAndClose")) 
		-c ("renderSequenceCurrentCameraChanged(); RenderSequence; evalDeferred \"deleteUI -window " + $gRenderSequenceOptionsWindow + "\"") renderSequenceAndCloseButton;

	button -label (uiRes("m_renderSequenceOptionsWindow.kRenderSequence2")) -c "renderSequenceCurrentCameraChanged(); RenderSequence" renderSequenceButton;

	button -label (uiRes("m_renderSequenceOptionsWindow.kClose")) -c ("evalDeferred \"deleteUI -window " + $gRenderSequenceOptionsWindow + "\"") renderSequenceCloseButton;

	formLayout -edit
		-af $gRenderSequenceOptionsLayout "top" 5
		-af $gRenderSequenceOptionsLayout "left" 5
		-af $gRenderSequenceOptionsLayout "right" 5
		-ac $gRenderSequenceOptionsLayout "bottom" 5 renderSequenceAndCloseButton

		-af renderSequenceAndCloseButton "left" 5
		-af renderSequenceAndCloseButton "bottom" 5
		-ap renderSequenceAndCloseButton "right" 5 33

		-ac renderSequenceButton "left" 5 renderSequenceAndCloseButton
		-af renderSequenceButton "bottom" 5
		-ap renderSequenceButton "right" 5 66

		-ac renderSequenceCloseButton "left" 5 renderSequenceButton
		-af renderSequenceCloseButton "right" 5
		-af renderSequenceCloseButton "bottom" 5

		$formLayout;


	scriptJob -parent $gRenderSequenceOptionsWindow -attributeChange "defaultRenderGlobals.animation" "updateRenderSequenceOptionsWindow";
	scriptJob -parent $gRenderSequenceOptionsWindow -attributeChange "defaultRenderGlobals.startFrame" "updateRenderSequenceOptionsWindow";
	scriptJob -parent $gRenderSequenceOptionsWindow -attributeChange "defaultRenderGlobals.endFrame" "updateRenderSequenceOptionsWindow";

	updateRenderSequenceOptionsWindow();
	showWindow $gRenderSequenceOptionsWindow;
}
