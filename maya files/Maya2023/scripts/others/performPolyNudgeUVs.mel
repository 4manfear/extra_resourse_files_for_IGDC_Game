// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//  Procedure Name:
//      performPolyNudgeUVs
//
//  Description:
//        
//         
//  Input Arguments:
//        $dir : The nudge direction. Valid values are "upLeft", "up", 
//               "upRight", "left", "right", "downLeft", "down", "downRight"
//
//
// Initialize optionVars for performPolyNudgeUVs:
// 
proc setOptionVars (int $forceFactorySettings)
{
	optionVar -init $forceFactorySettings -category "UV Editor.Nudge UVs"
		-fv polyNudgeUVFactor 0.1
		-iv polyNudgeUVAbsolute 0 // Default to relative
		;
}

global proc performPolyNudgeUVs( string $dir )
{
	setOptionVars(false);
	
	float $nudgeFactor = `optionVar -q polyNudgeUVFactor`;
	int $nudgeUVAbsolute = `optionVar -q polyNudgeUVAbsolute`;
	int $snapRelative = `texMoveContext -q -snapComponentsRelative texMoveContext`;
	
	float $uValue = 0.0;
	float $vValue = 0.0;

	// Relative nudge
	if( $dir == "upLeft" || $dir == "left" || $dir == "downLeft" )
	{
		$uValue = $nudgeFactor * -1.0;
	}
	else if ( $dir == "upRight" || $dir == "right" || $dir == "downRight" )
	{
		$uValue = $nudgeFactor;
	}

	if( $dir == "upLeft" || $dir == "up" || $dir == "upRight" )
	{
		$vValue = $nudgeFactor;
	}
	else if ( $dir == "downLeft" || $dir == "down" || $dir == "downRight" )
	{
		$vValue = $nudgeFactor * -1.0;
	}
	
	float $centerU = 0.0;
	float $centerV = 0.0;
	string $bbCheck = `polyEvaluate -boundingBoxComponent2d -fmt`;
	int $bbValid = (size(match("boundingBoxComponent2d", $bbCheck)) > 0);

	if( $bbValid )
	{
		float $bbox[] = `polyEvaluate -boundingBoxComponent2d`;
		
		$centerU = ($bbox[1] + $bbox[0]) * 0.5;
		$centerV = ($bbox[3] + $bbox[2]) * 0.5;
	}

	// Absolute nudge
	if ( $nudgeUVAbsolute && $snapRelative && $bbValid )
	{
		$uValue = $nudgeFactor - $centerU;
		$vValue = $nudgeFactor - $centerV;
	
		if( $dir == "up" || $dir == "down" )
			$uValue = 0.0;
		else if( $dir == "left" || $dir == "right" )
			$vValue = 0.0;
	}

	string $cmd = ("polyEditUV -u " + $uValue + " -v " + $vValue + " -r " + $snapRelative);

	// If we don't keep component spacing we need absolute values
	if ( !$snapRelative && $bbValid )
	{
		if( !$nudgeUVAbsolute )
		{
			$uValue += $centerU;
			$vValue += $centerV;
		}

		if( $dir == "up" || $dir == "down" )
		{
			$uValue = $centerU;
			$cmd = ("polyEditUV -v " + $vValue + " -r " + $snapRelative);
		}
		else if( $dir == "left" || $dir == "right" )
		{
			$vValue = $centerV;
			$cmd = ("polyEditUV -u " + $uValue + " -r " + $snapRelative);
		}
		else
			$cmd = ("polyEditUV -u " + $uValue + " -v " + $vValue + " -r " + $snapRelative);
	}
	
	// to move the manip 
	string $selectObj[] = `ls -dag -objectsOnly -selection`;
	for ( $obj in $selectObj )
	{
		float $uvPivot[] = `getAttr ($obj+".uvPivot")`;
		if ( $dir == "upLeft" ||
			 $dir == "left" ||
			 $dir == "downLeft" ||
			 $dir == "upRight" ||
			 $dir == "right" ||
			 $dir == "downRight" )
		{
			if( $snapRelative )
				$uvPivot[0] += $uValue;
			else
				$uvPivot[0] = $uValue;
		}
		
		if ( $dir == "upLeft" ||
			 $dir == "up" ||
			 $dir == "upRight" ||
			 $dir == "downLeft" ||
			 $dir == "down" ||
			 $dir == "downRight" )
		{
			if( $snapRelative )
				$uvPivot[1] += $vValue;
			else
				$uvPivot[1] = $vValue;
		}
		
		string $setAttrCmd = ("setAttr " + $obj+".uvPivot -type double2 " + $uvPivot[0] + " " + $uvPivot[1]);
		evalEcho ($setAttrCmd); 
	}

	// to move the UVs
	evalEcho ($cmd);
}