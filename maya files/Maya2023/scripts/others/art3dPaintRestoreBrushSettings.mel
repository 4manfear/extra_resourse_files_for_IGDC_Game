// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================

//
//
//  Creation Date:  18 April 2001
//
//  Procedure Name:
//      art3dPaintRestoreBrushSettings
//
//  Description:
//      Restore the paint effects brush settings that we previously stored in
//		our backup node.  See art3dPaintStoreBrushSettings().
//
//  Input Arguments:
//      $mode - mode to restore saved settings for ("Paint", "Smear", or "Blur")
//
//  Return Value:
//      None.
//
global proc art3dPaintRestoreBrushSettings( string $mode ) {
	// Variables containing names of nodes where we store the saved brush 
	// settings
	//
	global string $gArt3dPaintLastPaintBrush;
	global string $gArt3dPaintLastBlurBrush;
	global string $gArt3dPaintLastSmearBrush;

	// Names that the default brush had when the saved settings were in place
	// (e.g. fire1)
	//
	global string $gArt3dPaintLastPaintBrushName;
	global string $gArt3dPaintLastBlurBrushName;
	global string $gArt3dPaintLastSmearBrushName;
	
	global string $gCreatorWireCtx;
	string $cmd = "art3dPaintCtx -q -brushtype `currentCtx`";
	string $brushType = eval( $cmd );
	if ( $brushType == "effectsBrush" && $gCreatorWireCtx == "") {
		warning ( uiRes("m_brushPresetSetup.kPaintEffectsNotLoaded") );
		return;
	}

	string $defaultBrush = getDefaultBrush();

	switch( $mode ) {
	case "Paint":
		// Make sure that the brush node exists that we are going to restore 
		// from
		//
		art3dPaintCheckDefaultBrush( "Paint" );
		// Copy the stored brush's attributes to the default brush
		//
		copyNode $gArt3dPaintLastPaintBrush $defaultBrush;
		// Restore the saved node name to the default brush
		//
		rename $defaultBrush $gArt3dPaintLastPaintBrushName;
		break;
	case "Smear":
		// Make sure that the brush node exists that we are going to restore 
		// from
		//
		art3dPaintCheckDefaultBrush( "Smear" );
		// Copy the stored brush's attributes to the default brush
		//
		copyNode $gArt3dPaintLastSmearBrush $defaultBrush;
		// Restore the saved node name to the default brush
		//
		rename $defaultBrush $gArt3dPaintLastSmearBrushName;
		break;
	case "Blur":
		// Make sure that the brush node exists that we are going to restore 
		// from
		//
		art3dPaintCheckDefaultBrush( "Blur" );
		// Copy the stored brush's attributes to the default brush
		//
		copyNode $gArt3dPaintLastBlurBrush $defaultBrush;
		// Restore the saved node name to the default brush
		//
		rename $defaultBrush $gArt3dPaintLastBlurBrushName;
		break;
	default:
		warning ( (uiRes("m_art3dPaintRestoreBrushSettings.kCannotSavePFXBrush")) );
		return;
	}
	
	// Set the modifyAlpha to false when in Screen Paint Mode.
    // If 3d Paint is in screen paint mode since it uses the alpha 
    // channel to determine where to paint so we do not want 
    // PFX to modify it.
	string $screenModeCmd = "art3dPaintCtx -q -projective `currentCtx`";
	if ( eval( $screenModeCmd ) ) {
		string   $dBrush = getDefaultBrush();
		setAttr ($dBrush + ".modifyAlpha") 0;
	}
	
	
	// Set the paint effects brush mode.
	//
	string $currContext = `currentCtx`;
    art3dPaintCtx -e -brushtype "effectsBrush" $currContext;
	art3dPaintEffectsBrushCallback( "art3dPaintCtx" );
	
}
