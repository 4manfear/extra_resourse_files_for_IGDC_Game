// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
///////////////////////////////////////////////////////////////////////////////
//
// gameVertexCount option box support
//

source gameVertexCountUtils.mel;

proc initOptVars (int $forceFactorySettings)
//
//	Description:
//		Initializes the optionVars or resets them to their
//		factory settings.
//
{
	optionVar -init $forceFactorySettings -category "Display.Heads Up Display.Game Vertex Count"
		-iv gameVertexCountEvaluator 3	// Active evaluator
		;

	// Evaluator specific init opt vars.
	string $evalPrefixes[] = gameVertexCount_evalOptPrefixesAll();
	for( $prefix in $evalPrefixes )
	{
		if( size($prefix) > 0 )
		{
			string $cmd = $prefix + "InitOptVars " + $forceFactorySettings;
			eval($cmd);
		}
	}
}

proc string assembleCmd( string $evalFlags[], int $refresh )
//
//	Description:
//		Assembles the gameVertexCount options command based on the options.
//
{
	initOptVars(false);
	int $val = `optionVar -q gameVertexCountEvaluator` - 1;

	string $evals[] = `gameVertexCount -le`;
	int $nEvals = size($evals);
	
	if( $val >= $nEvals )
	{
		$val = $nEvals-1;
	}
	string $cmd;
	if( $val >= 0 )
	{
		$cmd += "gameVertexCount -dev " + $evals[$val];
		for( $flag in $evalFlags )
		{
			$cmd += " ";
			$cmd += $flag;
		}
		$cmd += ";";
	}
	if( $refresh )
	{
		$cmd += "gameVertexCountRefresh();";
	}
	return $cmd;
}

global proc gameVertexCountEvalChanged()
//
//	Description:
//		Callback invoked when the selected evaluator optionMenuGrp is changed.
//		This callback is used to update the visibility of the evaluator specific
//		options layout.
//
{
	int $val = `optionMenuGrp -q -select gameVertexCountEvaluatorGrp`;
	string $evalUIs[] = `gameVertexCount -leu`;
	int $nEvals = size($evalUIs);
	int $i;
	for( $i = 0; $i < $nEvals; $i++ )
	{
		string $evalUI = $evalUIs[$i];
		string $evalLayout = ("gameVertex" + $evalUI + "OptionsLayout");
		int $vis = 0;
		if( $i == $val-1 )
		{
			$vis = 1;
		}
		if( `frameLayout -ex $evalLayout` )
		{
			frameLayout -e -vis $vis $evalLayout;
		}
	}
}

global proc gameVertexCountSetup(string $parent, int $forceFactorySettings)
//
//	Description:
//		Read/init optionVars (optionally reset to factory settings) 
//		and initialize the UI to the optionVar state.
//
{
	initOptVars ($forceFactorySettings);
	setParent $parent;

	int $val = `optionVar -q gameVertexCountEvaluator` - 1;
	string $evals[] = `gameVertexCount -le`;
	int $nEvals = size($evals);
	if( $val >= $nEvals )
	{
		$val = $nEvals - 1;
	}
	if( $val < 0 )
	{
		$val = 0;
	}
	optionMenuGrp -e -select ($val+1) gameVertexCountEvaluatorGrp;

	// Invoke evaluator specific setup
	string $evalPrefixes[] = gameVertexCount_evalOptPrefixesAll();
	for( $prefix in $evalPrefixes )
	{
		if( size($prefix) > 0 )
		{
			string $cmd = $prefix + "Setup";
			eval($cmd);
		}
	}

	// Init the evaluator specific layout visibility.
	gameVertexCountEvalChanged();
}

global proc gameVertexCountCallback(string $parent, int $doIt)
//
//	Description:
//		Update the optionVar values based on the UI values and
//		then perform the command.
//
{
	setParent $parent;

	// Active evaluator
	int $val = `optionMenuGrp -q -select gameVertexCountEvaluatorGrp`;
	optionVar -intValue gameVertexCountEvaluator $val;

	// Invoke evaluator specific callback
	string $evalPrefix = gameVertexCount_evalOptPrefixActive();
	if( size($evalPrefix) > 0 )
	{
		string $cmd = $evalPrefix + "Callback";
		eval($cmd);
	}

	if( $doIt )
	{
		string $evalFlags[];
		if( size($evalPrefix) > 0 )
		{
			string $cmd = $evalPrefix + "AssembleCmd";
			$evalFlags = eval($cmd);
		}
		string $cmd = assembleCmd($evalFlags, true);
		eval( $cmd );
	}
}

global proc gameVertexCountOptionsInit()
//
//	Description:
//		Initialize all optionVars and apply the saved settings
//		to gameVertexCount on plug-in load.
//
{
	// Source all evaluator options scripts
	string $evalScripts[] = gameVertexCount_evalOptScriptsAll();
	for( $script in $evalScripts )
	{
		if( size($script) > 0 )
		{
			string $cmd = "source " + $script;
			eval($cmd);
		}
	}

	// Initialize all option vars
	initOptVars(false);

	// Apply all saved settings to gameVertexCount
	string $flags[];
	string $evalPrefixes[] = gameVertexCount_evalOptPrefixesAll();
	for( $prefix in $evalPrefixes )
	{
		if( size($prefix) > 0 )
		{
			string $cmd = $prefix + "AssembleCmd";
			string $evalFlags[] = eval($cmd);
			$flags = stringArrayCatenate($flags, $evalFlags);
		}
	}
	string $cmd = assembleCmd($flags, false);
	eval($cmd);
}

global proc gameVertexCountOptions()
//
//	Description:
//		Open an option box window and load the settings for
//		the gameVertexCount plug-in.
//
{
	string $commandName = "gameVertexCount";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");
	
	string $layout = getOptionBox();
	setParent $layout;

	string $optionBoxTitle = getPluginResource("gameVertexCount", "kHUDOptionBoxTitle");
	setOptionBoxTitle($optionBoxTitle);
	setOptionBoxCommandName($commandName);

	setUITemplate -pushTemplate DefaultTemplate;
	waitCursor -state 1;
	
	tabLayout -tabsVisible 0 -scrollable 1;
	
	string $parent = `columnLayout -adjustableColumn 1`;
	
	optionMenuGrp -label (getPluginResource("gameVertexCount", "kHUDOptionBoxEvaluatorLabel"))
				-cc "gameVertexCountEvalChanged"
		gameVertexCountEvaluatorGrp;

	// Auto populate this list using the evaluator list.
	string $evals[] = `gameVertexCount -le`;
	string $evalUINames[] = `gameVertexCount -leu`;
	int $nEvals = size($evals);
	int $i;
	for( $i = 0; $i < $nEvals; $i++ )
	{
		string $menuItemLabel = $evalUINames[$i];
		string $menuItemName = "gameVertexCount" + $evalUINames[$i] + "Item";
		menuItem -label $menuItemLabel $menuItemName;
	}

	separator;

	// Build evaluator specific options
	for( $i = 0; $i < $nEvals; $i++ )
	{
		string $eval = $evals[$i];
		string $evalUI = $evalUINames[$i];
		string $evalPrefix = gameVertexCount_evalOptPrefix( $eval );
		if( size($evalPrefix) > 0 )
		{
			frameLayout -lv 0 -vis 0 -cll 0 ("gameVertex" + $evalUI + "OptionsLayout");
			string $cmd = $evalPrefix + "CreateUI";
			eval($cmd);
			setParent $parent;
		}
	}

	waitCursor -state 0;
	setUITemplate -popTemplate;

	string $applyBtn = getOptionBoxApplyBtn();
	button -edit
			-command ($callback + " " + $parent + " " + 1 + ";")
			$applyBtn;

	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1) $resetBtn;

	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;

	eval (($setup + " " + $parent + " " + 0));

	setOptionBoxTitle($optionBoxTitle);

	showOptionBox();
}

///////////////////////////////////////////////////////////////////////////////
//
// gameVertexCount HUD interfaces
//

global proc setGameVertexCountVisibility(int $vis)
//
//	Description:
//		Set the visibility of the gameVertexCount HUD and
//		record the visibility state in an optionVar.
//
{
	if(`headsUpDisplay -ex HUDGameVertexCount`)
	{
		headsUpDisplay -e -vis $vis HUDGameVertexCount;
	}

	//Update the respective menu item and optionVar
	menuItem -e -cb $vis gameVertexCountItem;
	optionVar -iv "gameVertexCountVisibility" $vis;
}

global proc int[] gameVertexCountUpdate()
//
//	Description:
//		Returns the vertex counts from gameVertexCount command.
//		This is a wrapper method around the gameVertexCount command
//		to limit the number of queued idle callbacks.
//
{
	global int $gGameVertexCountUpdateQueued;
	$gGameVertexCountUpdateQueued = 0;
	return gameVertexCount();
}

global proc gameVertexCountRefresh()
//
//	Description:
//		Queue an explicit refresh of the gameVertexCount HUD on
//		the idle event queue.
//
{
	global int $gGameVertexCountUpdateQueued;
	if( !$gGameVertexCountUpdateQueued )
	{
		evalDeferred("if( `headsUpDisplay -ex HUDGameVertexCount` ) { headsUpDisplay -r HUDGameVertexCount; }");
		$gGameVertexCountUpdateQueued = 1;
	}
}

///////////////////////////////////////////////////////////////////////////////
//
// gameVertexCount create/delete UI
//

global proc gameVertexCountCreateUI()
//
//	Description:
//		Invoked on plug-in load to create all associated gameVertexCount UI.
//
{
	// CreateUI is invoked by MFnPlugin.registerUI as an evalDeferred.
	// It is possible for a script to load the plug-in and unload it in the
	// same script. Only proceed if the gameVertexCount command is registered.
	if(!`exists "gameVertexCount"`) { return; }

	global int $gGameVertexCountUpdateQueued;
	$gGameVertexCountUpdateQueued = 0;

	// Initialize default options
	gameVertexCountOptionsInit();

	if( !`headsUpDisplay -ex HUDGameVertexCount` )
	{
		int $block = `headsUpDisplay -nfb 0`;
		headsUpDisplay -section          0
				   -block            $block
				   -blockSize        "small"
				   -label            (getPluginResource("gameVertexCount", "kHUDLabel"))
				   -labelFontSize    "small"
				   -vis				 `optionVar -q gameVertexCountVisibility`
				   -command          "gameVertexCountUpdate"
				   -event            "SelectionChanged"
				   -nodeChanges      "attributeChange"
				   -dataWidth        65 
				   -labelWidth       50
				   -dataAlignment    "right"
				   HUDGameVertexCount;
	}

	if( !`runTimeCommand -ex ToggleGameVertexCount` )
	{
		runTimeCommand -default true
			-annotation (getPluginResource("gameVertexCount", "kRuntimeCommandAnnotation"))
			-command ("setGameVertexCountVisibility(!`optionVar -q gameVertexCountVisibility`);")
			ToggleGameVertexCount;
	}

	global string $gHeadsUpDisplayMenu;
	if( `menuItem -ex $gHeadsUpDisplayMenu` )
	{
		setParent -m $gHeadsUpDisplayMenu;

		string $cmd = "ToggleGameVertexCount";
		if( !`menuItem -ex gameVertexCountItem` )
		{
			menuItem -checkBox `optionVar -q gameVertexCountVisibility`
				-label (getPluginResource("gameVertexCount", "kHUDMenuItemLabel"))
				-annotation (getRunTimeCommandAnnotation($cmd))
				-c $cmd
				-insertAfter "frameRateItem"
				gameVertexCountItem;
		}
		if( !`menuItem -ex gameVertexCountOptionsItem` )
		{
			menuItem -optionBox true
				-annotation (getPluginResource("gameVertexCount", "kHUDMenuOptionItemAnnotation"))
				-c "gameVertexCountOptions"
				-insertAfter "gameVertexCountItem"
				gameVertexCountOptionsItem;
		}
	}
}

