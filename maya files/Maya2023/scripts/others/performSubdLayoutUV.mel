// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
//  Creation Date:  4 April 1997
//
//  Procedure Name:
//      performSubdAutoProj
//
//  Description:
//        
//         
//  Input Arguments:
//        $option : Whether to set the options to default values.
//  Return Value:
//        command string iff $option==2
//

//
// Initialize optionVars for subdLayoutUV:
// Color, Texture, Vertex
// 
proc setOptionVars (
	string		$prefix, 
	int			$forceFactorySettings,
	string		$vars[]
)
{
	string $varName;
	string $category = "Subdiv Surfaces.UV Layout";

	// Must match $vars
	int    $intValues[]= { 1, 1, 2, 1, 2 };

	for ( $i = size($vars) ; $i-- ; )
	{
		$varName = ($prefix + $vars[$i]);
		optionVar -init $forceFactorySettings -category $category
			-iv $varName $intValues[$i];
	}

	optionVar -init $forceFactorySettings -category $category
		-fv ($prefix + "eg") 0.2
		;
}

global proc performSubdLayoutUVSetup (string $parent, int $forceFactorySettings)
{
    global float  $gShellSpacingPresets[];
	string $prefix = "subdLayoutUV";
	string $intVars[] = {"fr", "rbf", "se", "sc", "l", "lm"};
	string $varName;
	int    $i;

	setOptionVars($prefix, $forceFactorySettings, $intVars);
	setParent $parent;
	
	$varName = ($prefix + $intVars[0]);
	checkBoxGrp -e -value1 `optionVar -q $varName` $varName;

	for ($i=size($intVars)-1; $i>0; $i--)
	{
		$varName = ($prefix + $intVars[$i]);
		radioButtonGrp -e -sl (1+`optionVar -q $varName`) $varName;
	}
	
	$varName = ($prefix + $intVars[0]);
	checkBoxGrp -e -value1 `optionVar -q $varName` $varName;

	$varName = ($prefix + "eg");
	float $fval = `optionVar -q $varName`;
	floatSliderGrp -e -v $fval $varName;

	// See if the value corresponds to one of the shell spacing presets.
	$varName = ($prefix + "egPresets");
	optionMenuGrp -e -sl 1 $varName;
	for ($i = size($gShellSpacingPresets) ; $i-- ; )
	{
		if ($fval == $gShellSpacingPresets[$i])
		{
			optionMenuGrp -e -sl ($i+2) $varName;
			break;
		}
	}
}

global proc performSubdLayoutUVCallback (string $parent, int $doIt)
{
	string $prefix = "subdLayoutUV";
	string $intVars[] = {"fr", "rbf", "se", "sc", "l", "lm"};
	string $varName;

	setParent $parent;
	
	for ($i=size($intVars)-1; $i>0; $i--)
	{
		$varName = ($prefix + $intVars[$i]);
		optionVar -intValue $varName (`radioButtonGrp -q -sl $varName`-1);
	}

	$varName = ($prefix + $intVars[0]);
	optionVar -intValue $varName `checkBoxGrp -q -value1 $varName`;

	$varName = ($prefix + "eg");
	optionVar -floatValue $varName `floatSliderGrp -q -v $varName`;

	if ($doIt) 
	{
		performSubdLayoutUV 0;
		addToRecentCommandQueue "performSubdLayoutUV 0" "SubdLayoutUV";
	}
}

global proc subdLayoutSpacingPresets()
{
    global float  $gShellSpacingPresets[];
	int $item = `optionMenuGrp -q -sl "subdLayoutUVegPresets"`-2;

	if ($item>=0 && $item<size($gShellSpacingPresets) )
		floatSliderGrp -e -v $gShellSpacingPresets[$item] "subdLayoutUVeg";
}

proc subdLayoutUVOptions (string $prefix, string $intVars[])
{
	string $commandName = "performSubdLayoutUV";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");
	string $varName;

	string $layout = getOptionBox();
	setParent $layout;
	setUITemplate -pushTemplate DefaultTemplate;
	waitCursor -state 1;
	
	string $parent = `columnLayout -adjustableColumn 1`;
	string $none = (uiRes("m_performSubdLayoutUV.kNone"));

	$varName = ($prefix + $intVars[2]);
	radioButtonGrp -label (uiRes("m_performSubdLayoutUV.kSeparate")) -nrb 3
		-label1 (uiRes("m_performSubdLayoutUV.kOff"))
		-label2 (uiRes("m_performSubdLayoutUV.kFolds"))
		-label3 (uiRes("m_performSubdLayoutUV.kAllIntersecting")) $varName;

	$varName = ($prefix + $intVars[1]);
	radioButtonGrp -label (uiRes("m_performSubdLayoutUV.kRotateForBestFit")) -nrb 3
	    -label1 $none
	    -label2 (uiRes("m_performSubdLayoutUV.kDegrees"))
		-label3 (uiRes("m_performSubdLayoutUV.kFree")) $varName;

	$varName = ($prefix + $intVars[4]);
	$gapName = ($prefix + "eg");
	$menuName = ($prefix + "egPresets");
	string $grayCmd = 
		"{ int $tmp = `radioButtonGrp -q -sl "+$varName + "` == 3;" +
		"  floatSliderGrp -e -en $tmp "+$gapName+";" +
		"  optionMenuGrp -e -en $tmp "+$menuName+";}";
    radioButtonGrp -label (uiRes("m_performSubdLayoutUV.kLayout")) -nrb 3 -cc $grayCmd
		-label1 $none
		-label2 (uiRes("m_performSubdLayoutUV.kAlongU"))
		-label3 (uiRes("m_performSubdLayoutUV.kIntoSquare")) $varName;

	$varName = ($prefix + $intVars[5]);
    radioButtonGrp -label (uiRes("m_performSubdLayoutUV.kLayoutMethod")) -nrb 2
		-label1 (uiRes("m_performSubdLayoutUV.kBrickStacking"))
	    -label2 (uiRes("m_performSubdLayoutUV.kShapeStacking")) $varName;

	$varName = ($prefix + $intVars[3]);
    radioButtonGrp -label (uiRes("m_performSubdLayoutUV.kScale")) -nrb 3
		-label1 $none
	    -label2 (uiRes("m_performSubdLayoutUV.kUniform"))
		-label3 (uiRes("m_performSubdLayoutUV.kStretchToSquare")) $varName;

	$varName = ($prefix + $intVars[0]);
    checkBoxGrp -label1 (uiRes("m_performSubdLayoutUV.kFlipReversed")) $varName;

	separator;

	optionMenuGrp -label (uiRes("m_performSubdLayoutUV.kSpacingPresets")) -cc subdLayoutSpacingPresets $menuName;
	menuItem -label (uiRes("m_performSubdLayoutUV.kCustom"));
	menuItem -label (uiRes("m_performSubdLayoutUV.kMap2048"));
	menuItem -label (uiRes("m_performSubdLayoutUV.kMap1024"));
	menuItem -label (uiRes("m_performSubdLayoutUV.kMap512"));
	menuItem -label (uiRes("m_performSubdLayoutUV.kMap256"));
	menuItem -label (uiRes("m_performSubdLayoutUV.kMap128"));
	menuItem -label (uiRes("m_performSubdLayoutUV.kMap64"));
	menuItem -label (uiRes("m_performSubdLayoutUV.kMap32"));
	setParent -m ..;

	string $cmd = ("optionMenuGrp -e -sl 1 " + $menuName);
    floatSliderGrp -label (uiRes("m_performSubdLayoutUV.kPercentageSpace")) -min 0 -max 5 -cc $cmd $gapName;

	waitCursor -state 0;
	setUITemplate -popTemplate;

	string $applyBtn = getOptionBoxApplyBtn();
	button -edit -label (uiRes("m_performSubdLayoutUV.kLayoutUVs"))
	       -command ($callback + " " + $parent + " " + 1) $applyBtn;
	string $saveBtn = getOptionBoxSaveBtn();
	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		$saveBtn;
	string $resetBtn = getOptionBoxResetBtn();
	button -edit 
		-command ($setup + " " + $parent + " " + 1) $resetBtn;

	setOptionBoxTitle (uiRes("m_performSubdLayoutUV.kSubdivLayoutUVsOptions"));

	setOptionBoxHelpTag( "SubdivLayoutUVs" );

	eval (($setup + " " + $parent + " " + 0));

	showOptionBox();
}

global proc string performSubdLayoutUV (int $option)
{
	string $prefix = "subdLayoutUV";
	string $intVars[] = {"fr", "rbf", "se", "sc", "l", "lm"};
	string $cmd="";
	switch ($option) 
	{
		case 0:
		string $varName;
		setOptionVars($prefix, false, $intVars);
		$cmd = $prefix;
		for ( $i = size($intVars)-1 ; $i >= 0; $i--)
		{
			string $varName = ($prefix + $intVars[$i]);
			int $ival = `optionVar -query $varName`;
			$cmd = $cmd + " -" + $intVars[$i] + " " + $ival;
		}

		$varName = ($prefix + "eg");
		float $fval = `optionVar -query $varName`;
		$cmd = $cmd + " -ps " + $fval;

		evalEcho $cmd;
		break;

		case 1:
			subdLayoutUVOptions($prefix, $intVars);
			break;
		case 2:
			$cmd="performSubdLayoutUV 0";
			break;
	}
	return $cmd;
}
