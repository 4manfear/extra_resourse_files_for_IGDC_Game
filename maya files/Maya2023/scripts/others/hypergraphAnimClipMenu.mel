// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
//
//

source clipMenuCommands.mel;

//
//  Create context sensitive Hypergraph menu for clip nodes
//  This is displayed with RMB on clip nodes
//
proc createClipMenuItems( string $editor, string $menu )
{
	setParent -m $menu;
	
	menuItem ClipMenuTitleItem;
	menuItem -divider true;	
	menuItem -divider true;
	menuItem -l (uiRes("m_hypergraphAnimClipMenu.kCopyClip"))
		-annotation (uiRes("m_hypergraphAnimClipMenu.kCopyClipAnnot")) ClipCopyItem;
	menuItem -l (uiRes("m_hypergraphAnimClipMenu.kInstanceClip"))
		-annotation (uiRes("m_hypergraphAnimClipMenu.kInstanceClipAnnot")) ClipInstanceItem;
	menuItem -l (uiRes("m_hypergraphAnimClipMenu.kDuplicateClip"))
		-annotation (uiRes("m_hypergraphAnimClipMenu.kDuplicateClipAnnot")) ClipDuplicateItem;
	menuItem -l (uiRes("m_hypergraphAnimClipMenu.kExportClip"))
		-annotation (uiRes("m_hypergraphAnimClipMenu.kExportClipAnnot")) ClipExportItem;
	menuItem -divider true;
	menuItem -l (uiRes("m_hypergraphAnimClipMenu.kApplyPose"))
		-annotation (uiRes("m_hypergraphAnimClipMenu.kApplyPoseAnnot")) ClipApplyPoseItem;
	menuItem -divider true;
	string $menuItemFormat = (uiRes("m_hypergraphAnimClipMenu.kAttributeEditorMenuItem"));
	menuItem -l `format -s (localizedUIComponentLabel("Attribute Editor")) $menuItemFormat` ClipAttrEditorItem;
	menuItem -l (uiRes("m_hypergraphAnimClipMenu.kRenameClip"))
		-annotation (uiRes("m_hypergraphAnimClipMenu.kRenameClipAnnot")) ClipRenameItem;
}



//
// Define context sensitive Hypergraph menu for clip nodes
//
proc defineClipMenuCommands(string $editor, string $menu, string $node)
{
	// The visor uses a hyper graph panel, so the only way to tell
	// that we are in the visor is by the name
	//
	int $isVisor = gmatch( $editor, "*VisorEd" );

	menuItem -edit
		-l ("Clip: " + $node)
		ClipMenuTitleItem;

	menuItem -edit
		-c ("clipCopyMenuCommand " + $node) ClipCopyItem;

	menuItem -edit
		-c ("clipInstanceMenuCommand " + $node) ClipInstanceItem;

	menuItem -edit
		-c ("clipDuplicateMenuCommand " + $node) ClipDuplicateItem;

	menuItem -edit
		-c ("doExportClipArgList 2 { \"\", \"" + $node + "\"}") ClipExportItem;

	menuItem -edit
		-c ("clipApplyPoseMenuCommand " + $node) ClipApplyPoseItem;

	menuItem -edit -c 
		("hyperGraph -e -rename -useFeedbackList " + $editor) 
		ClipRenameItem;
	menuItem -edit -c 
		("hyperGraph -e -attributeEditor single -useFeedbackList " + $editor)
		ClipAttrEditorItem;
}

global proc hypergraphAnimClipMenu(string $editor, string $menu, string $node)
{
	createClipMenuItems($editor, $menu);
	defineClipMenuCommands($editor, $menu, $node);
}
