// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
// provided at the time of installation or download, or which otherwise accompanies 

global proc shelf_TURTLE()
{
	shelfButton
		-label      "Bssrdf Shader"
		-annotation ("Assign a new Bssrdf shader to the active objects")
		-image1     "render_ilrBssrdfShader.xpm"
		-command    ("createAndAssignShader ilrBssrdfShader \"\"");

	shelfButton
		-label      "Occ Sampler Shader"
		-annotation ("Assign a new Occ Sampler shader to the active objects")
		-image1     "render_ilrOccSampler.xpm"
		-command    ("createAndAssignShader ilrOccSampler \"\"");


	shelfButton
		-label      "Oren Nayar Shader"
		-annotation ("Assign a new Oren Nayar shader to the active objects")
		-image1     "render_ilrOrenNayarShader.xpm"
		-command    ("createAndAssignShader ilrOrenNayarShader \"\"");

	shelfButton
		-label      "Ashikhmin Shader"
		-annotation ("Assign a new Ashikhmin shader to the active objects")
		-image1     "render_ilrAshikhminShader.xpm"
		-command    ("createAndAssignShader ilrAshikhminShader \"\"");

	shelfButton
		-label      "Dielectric Shader"
		-annotation ("Assign a new Dielectric shader to the active objects")
		-image1     "render_ilrDielectricShader.xpm"
		-command    ("createAndAssignShader ilrDielectricShader \"\"");

	shelfButton
		-label      "Normal Map Shader"
		-annotation ("Create a new Normal Map shader")
		-image1     "render_ilrNormalMap.xpm"
		-command    ("shadingNode -asUtility ilrNormalMap");

	shelfButton
		-label      "Ray Sampler Shader"
		-annotation ("Create a new Ray Sampler shader")
		-image1     "render_ilrRaySampler.xpm"
		-command    ("shadingNode -asUtility ilrRaySampler");

	shelfButton
		-label      "Occ Data Shader"
		-annotation ("Create a new Occ Data shader")
		-image1     "render_ilrOccData.xpm"
		-command    ("shadingNode -asUtility ilrOccData");

	shelfButton
		-label      "Surface Thickness"
		-annotation ("Create a new Surface Thickness shader")
		-image1     "render_ilrSurfaceThickness.xpm"
		-command    ("shadingNode -asUtility ilrSurfaceThickness");

	shelfButton
		-label      "Basic Photon Shader"
		-annotation ("Create a new Basic Photon shader")
		-image1     "render_ilrBasicPhotonShader.xpm"
		-command    ("shadingNode -asUtility ilrBasicPhotonShader");

	shelfButton
		-label      "Physic Photon Shader"
		-annotation ("Create a new Physic Photon shader")
		-image1     "render_ilrPhysicPhotonShader.xpm"
		-command    ("shadingNode -asUtility ilrPhysicPhotonShader");

	shelfButton
		-label      "Dielectric Photon Shader"
		-annotation ("Create a new Dielectric Photon shader")
		-image1     "render_ilrDielectricPhotonShader.xpm"
		-command    ("createNode ilrDielectricPhotonShader");

	shelfButton
		-label      "Shadow Mask Shader"
		-annotation ("Create a new Shadow Mask shader")
		-image1     "render_ilrShadowMask.xpm"
		-command    ("shadingNode -asUtility ilrShadowMask");

	shelfButton
		-label      "Poly Color Per Vertex"
		-annotation ("Create a Poly Color Per Vertex shader")
		-image1     "render_ilrPolyColorPerVertex.xpm"
		-command    ("shadingNode -asUtility ilrPolyColorPerVertex");

	shelfButton
		-label      "UV Mapping Visualizer"
		-annotation ("Create a new UV Mapping Visualizer node")
		-image1     "render_ilrUVMappingVisualizer.xpm"
		-command    ("shadingNode -asUtility ilrUVMappingVisualizer");

	shelfButton
		-label      "Output Shader Backend"
		-annotation ("Create a new Output Shader Backend node")
		-image1     "render_ilrOutputShaderBackendNode.xpm"
		-command    ("shadingNode -asUtility ilrOutputShaderBackendNode");

	if (`about -nt`) {
		shelfButton
			-label      "Hw Bake Visualizer"
			-annotation ("Create a new Hardware Bake Visualizer node")
			-image1     "render_ilrHwBakeVisualizer.xpm"
			-command    ("createAndAssignShader ilrHwBakeVisualizer \"\"");
	}
	
	shelfButton
		-label      "Clear Scene"
		-annotation ("Delete all Turtle nodes and clear all settings")
		-image1     "turtleClearIcon.xpm"
		-command    ("if (!exists(\"ilrClearScene\")) { eval(\"source ilrStartup.mel; ilrLoadScripts();\"); } ilrClearScene();");

	shelfButton
		-label      "Bake Layer Editor"
		-annotation ("Opens the Bake Layer Editor")
		-image1     "turtleBakeLayerEditorIcon.xpm"
		-command    ("ilrBakeLayerEditor");
		
	shelfButton
		-label      "Point Cloud"
		-annotation ("Create a point cloud shape")
		-image1     "turtlePCShapeIcon.xpm"
		-command    ("createNode ilrPointCloudShape");

	shelfButton
		-label      "Point Cloud Bake Editor"
		-annotation ("Opens the Point Cloud Bake Editor")
		-image1     "turtlePCBakeIcon.xpm"
		-command    ("ilrPointCloudBakeEditor");

	shelfButton
		-label      "Edit Hardware Shader"
		-annotation ("Opens any Hardware Shader connected to selection")
		-image1     "turtleInspectHwShaderIcon.xpm"
		-command    ("ilrInspectHwShader");
		
}
