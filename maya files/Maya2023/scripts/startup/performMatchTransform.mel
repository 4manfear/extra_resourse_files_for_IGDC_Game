// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
proc setOptionVars(int $forceFactorySettings)
{
	optionVar -init $forceFactorySettings -category "Modify.Match All Transforms"
		-iv matchTransformTranslate 1
		-iv matchTransformRotate 1
		-iv matchTransformScale 1
		-iv matchTransformScaleBox 0 // Default is off (for backcomp)
		;
}

global proc performMatchTransformSetup(string $parent, int $forceFactorySettings)
{
	setOptionVars ($forceFactorySettings);
	setParent $parent;
	checkBoxGrp -e -v1 `optionVar -q matchTransformTranslate` matchCheckBoxGrp;
	checkBoxGrp -e -v2 `optionVar -q matchTransformRotate` matchCheckBoxGrp;
	checkBoxGrp -e -v3 `optionVar -q matchTransformScale` matchCheckBoxGrp;
	checkBoxGrp -e -v1 `optionVar -q matchTransformScaleBox` matchBoxCheckBoxGrp;
	checkBoxGrp -e -en1 `optionVar -q matchTransformScale` matchBoxCheckBoxGrp;
}

global proc performMatchTransformCallback(string $parent, int $doIt)
{
	setParent $parent;
	optionVar -intValue matchTransformTranslate `checkBoxGrp -q -v1 matchCheckBoxGrp`;
	optionVar -intValue matchTransformRotate `checkBoxGrp -q -v2 matchCheckBoxGrp`;
	optionVar -intValue matchTransformScale `checkBoxGrp -q -v3 matchCheckBoxGrp`;
	optionVar -intValue matchTransformScaleBox `checkBoxGrp -q -v1 matchBoxCheckBoxGrp`;
	if ($doIt) {
		performMatchTransform 0; 
		addToRecentCommandQueue "performMatchTransform 0" "MatchTransform";
	}
}

proc performMatchTransformOptions()
{
	string $commandName = "performMatchTransform";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	string $layout = getOptionBox();
	setParent $layout;
	setUITemplate -pushTemplate DefaultTemplate;
	waitCursor -state 1;
	tabLayout -tabsVisible 0 -scrollable 1;
	
	string $parent = `columnLayout -adjustableColumn 1`;
	checkBoxGrp -label (uiRes("m_performMatchTransform.kTransforms"))
		-ncb 3 -vertical
		-label1 (uiRes("m_performMatchTransform.kTranslate"))
		-label2 (uiRes("m_performMatchTransform.kRotate"))
		-label3 (uiRes("m_performMatchTransform.kScale"))
		-on3 ("checkBoxGrp -e -en1 true matchBoxCheckBoxGrp")
		-of3 ("checkBoxGrp -e -en1 false matchBoxCheckBoxGrp")
		matchCheckBoxGrp;

	separator;

	checkBoxGrp
		-ncb 1 -vertical
		-label1 (uiRes("m_performMatchTransform.kBox"))
		matchBoxCheckBoxGrp;


	waitCursor -state 0;
	setUITemplate -popTemplate;

	button -edit
		-label `runTimeCommand -q -label MatchTransform`
		-command ($callback + " " + $parent + " " + 1)
		`getOptionBoxApplyBtn`;

	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		`getOptionBoxSaveBtn`;

	button -edit
		-command ($setup + " " + $parent + " " + 1)
		`getOptionBoxResetBtn`;

	setOptionBoxTitle `runTimeCommand -q -ann MatchTransformOptions`;
	setOptionBoxHelpTag("MatchTransform");

	eval (($setup + " " + $parent + " " + 0));
	showOptionBox();
}

proc string assembleCmd()
{
	setOptionVars(false);
	int $trans  = `optionVar -q matchTransformTranslate`;
	int $rotate = `optionVar -q matchTransformRotate`;
	int $scale  = `optionVar -q matchTransformScale`;
	int $box    = `optionVar -q matchTransformScaleBox`;

	string $cmd = "";
	if ($trans || $rotate || $scale) {
		$cmd = "matchTransform";
		if (!$trans || !$rotate ||!$scale) {
			if ($trans)  $cmd += " -pos";
			if ($rotate) $cmd += " -rot";
			if ($scale)  $cmd += " -scl";
		}
		if ($box) $cmd += " -box";
	}
	return $cmd;
}

global proc string performMatchTransform(int $action)
{
	string $cmd = "";
	switch ($action) {
	case 0: // Execute command
		$cmd = `assembleCmd`;
		if ($cmd != "") eval($cmd);
		break;
	case 1: // Options
		performMatchTransformOptions;
		break;
	case 2: // Command string
		$cmd = `assembleCmd`;
		break;
	}
	return $cmd;
}
