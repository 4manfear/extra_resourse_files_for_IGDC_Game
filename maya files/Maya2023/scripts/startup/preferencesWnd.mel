// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
//	Window to set and see the user preferences.
//
//	To add a new preference see the file "AddingPreferences.md"
//

// ADSK_CLR_MGT_BEGIN
  source "colorManagementUtilities.mel";
// ADSK_CLR_MGT_END


global proc revertToSavedPrefs ()
{
	// Put the option vars back to what they were when 
	// the window was opened.
	prefsHoldCurrentState("restore"); 
	
	// Change any internal states to match the option vars
	syncPreferencesOptVars("syncCurrentToOpt"); 
	
	// Update the UI in the Preferences window
	prefsUpdate(); 
}

global proc revertToFactoryPrefs ()
//
//	Restore the preferences back to the shipped settings
//
{
    source createPreferencesOptVars.mel;

	// All other optionVars are reverted to their original values in the Mel script above,
	// however these don't need initializing there so they will be done only here.
	python( "from maya.app.prefs.OptionVarManager import OptionVarManager" );
	python( "OptionVarManager.revert_to_defaults( category='preferences' )" );

    // Change any internal states to match the option vars
    syncPreferencesOptVars("syncCurrentToOpt"); 

    // ADSK_CLR_MGT_BEGIN
    revertToColorManagementDefaults();
    // ADSK_CLR_MGT_END
	
	// Update the UI in the Preferences window
	prefsUpdate(); 
}

global proc int canSavePrefsChanges()
{
    int $canSave = 1;

    // ADSK_CLR_MGT_BEGIN
    if (colorManagementPolicyLocked() || policyMismatch() == 0) // No mismatch happens.
    {
        $canSave = 1;
    }
    else
    {
        $canSave = colorManagementPolicyMismatchAction();
    }
     if ($canSave == 0)
    {
        // There can be any other module need do such "can save" test,
        // now this module's (color management) $canSave value is 0, there 
        // is no need to do further test, return 0 directly here.
        // Notice that any other module should return 0 directly if its $canSave
        // value is 0.
        return 0;
    }
    // ADSK_CLR_MGT_END

    // Put other modules' test here.
    // 

    return $canSave;
}

proc closePrefsWindow ()
{
	global string $gPreferenceWindow;
	if (`window -exists $gPreferenceWindow`) {
		global int $gPrefWndScriptJob;
		scriptJob -force -kill $gPrefWndScriptJob;
		window -e -vis false $gPreferenceWindow;
		evalDeferred ("deleteUI "+$gPreferenceWindow);
	}
}

global proc savePrefsChanges ()
{
	if (canSavePrefsChanges()) {
		prefsHoldCurrentState("remove");
		savePrefs();
		closePrefsWindow();
	}
}

global proc cancelPrefsChanges ()
{
	prefsHoldCurrentState("restore");
	syncPreferencesOptVars("syncCurrentToOpt");
	prefsHoldCurrentState("remove"); 
	closePrefsWindow();
}

proc prefsSetTabLayout(int $index, string $label)
{
    tabLayout -e -selectTabIndex $index prefTabs;
	frameLayout -e -label $label prefTitleFrame;
}
 

//======================================================================
//
// The dual structure of the tabLayout and textScrollList, relies on
// index values matching in both. Due to the fact that textScrollList children
// cannot be made invisible and tabLayout children cannot be inserted at a
// specific location the only way to temporarily disable an element is to
// remove it from the textScrollList and make it invisible in the tabLayout.
//
// This makes the index values of the lists out of sync, so this global list
// of disabled elements is maintained (by external agents doing the disabling)
// to allow the index values to be put back in sync.
global int $gDisabledTabs[];
global proc disableTab(int $whichTab)
{
	global int $gDisabledTabs[];
	if( 0 == intArrayContains($whichTab, $gDisabledTabs) )
	{
		$gDisabledTabs[size($gDisabledTabs)] = $whichTab;
		$gDisabledTabs = sort( $gDisabledTabs );
	}
}
global proc enableTab(int $whichTab)
{
	global int $gDisabledTabs[];
	int $itemsToRemove[] = { $whichTab };
	$gDisabledTabs = intArrayRemove( $itemsToRemove, $gDisabledTabs );
}
proc int mapScrollIndexToTabIndex(int $scrollIndex)
{
	global int $gDisabledTabs[];
	int $index = $scrollIndex;
	// Loop through all disabled tabs, incrementing the location if the disabled
	// one is after the current index.
	int $i;
	for( $i=0; $i<size($gDisabledTabs); ++$i )
	{
		if( $gDisabledTabs[$i] <= $scrollIndex )
		{
			$index++;
		}
	}
	return $index;
}

global proc switchPrefTabs(int $whichTab)
//
//	Input:	If $whichTab is set to '0' then use the selected index
//			in the textScrollList.  If it is set above zero then
//			set the tab to that value.
//
{
    global string $gPreferenceWindow;
    setParent $gPreferenceWindow;
        
    int $index = $whichTab;
    if ($whichTab == 0) {
        int $indexLst[] = `textScrollList -q -selectIndexedItem prefIndex`;
		if(size($indexLst) == 0) return;
        $index = $indexLst[0];
    } else {
        textScrollList -e -selectIndexedItem $index prefIndex;
    }
        
    string $uniqueTagLst[] = `textScrollList -q -selectUniqueTagItem prefIndex`;
	if(size($uniqueTagLst) == 0) return;
    string $uniqueTag = tolower($uniqueTagLst[0]);
	
	// If the index was one that was disabled then bail to the first item
	int $tabIndex = mapScrollIndexToTabIndex($index);

    switch ($uniqueTag) 
    {
        case "interface":
            prefsCreateAppearance();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kInterface")));
            break;

        case "uielements":
            prefsCreateElements();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kUIElements")));
            break;
        case "viewcube":
			prefsCreateViewCube();
			prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kViewCubePreferences")));
            break;
        case "dynamics":
            prefsCreateDyn();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kDynamics")));
            break;
        case "filereferences":
            prefsCreateFileReferences();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kFileReferences")));
            break;
        case "rendering":
            prefsCreateRendering();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kRendering")));
            break;
        case "modules":
            if(!`about -mac`)
            {
                prefsCreateModules();
                prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kModules")));
            }
            break;
        case "openmaya":
            if (!`about -win` && !`about -mac`) {
                prefsCreateOpenMaya();
                prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kOpenMaya")));
            }
            break;  
        case "assets":
            prefsCreateAssets();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kAssetsContainers")));
            break;
         case "steeringwheel":
            if (exists("steeringWheel"))
            {
                prefsCreateSteeringWheel();
                prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kSteeringWheelPreferences")));
            }
            break;
        case "help":
            prefsCreateWindows();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kHelp")));
            break;
        case "display":
            prefsCreateDisplay();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kDisplay")));
            break;
        case "kinematics":
            prefsCreateKin();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kKinematics")));
            break;
        case "manipulators":
            prefsCreateManips();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kManipulators")));
            break;
        case "nurbs":
            prefsCreateNURBS();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kNURBS")));
            break;
        case "polygons":
            prefsCreatePolys();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kPolygons")));
            break;
        case "subdivs":
            prefsCreateSubdivs();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kSubdivs")));
            break;
        case "font":
            prefsCreateFonts();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kFonts")));
            break;
        case "bluepencil":
            prefsCreateBluePencil();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kBluePencil")));
            break;
        case "settings":
            prefsCreateSettings();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kSettings")));
            break;
        case "animation":
            prefsCreateKeys();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kAnimation")));
            break;       
        case "cachedplayback":
			// Always create the tab contents. The create method will handle the case where it was
			// called more than once
			python( "from maya.plugin.evaluator.cache_ui import cache_ui_preferences_tab_create" );
			string $title = python( "cache_ui_preferences_tab_create( 'prefsTemplate' )" );

			// Rely on the switching method to detect when the tab is not available and do the right thing
			prefsSetTabLayout($tabIndex,$title);
            break;
        case "cameras":
            prefsCreateCamera();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kCamera")));
            break;  
        // ADSK_CLR_MGT_BEGIN
        case "colormanagement":
            prefsCreateColorManagement();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kColorManagement")));
            break;    
        // ADSK_CLR_MGT_END
        case "filesprojects":
            prefsCreateFileIO();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kFiles")));
            break;      
        case "modeling":
            prefsCreateModeling();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kModeling")));
            break;
        case "nodeeditor":
            prefsCreateNodeEditor();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kNodeEditorPrefs")));
            break;
		case "search":
            prefsCreateSearch();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kSearch")));
            break;	
        case "selection":
            prefsCreateSelect();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kSelection")));
            break;
        case "snapping":
            prefsCreateSnap();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kSnapping")));
            break;
        case "sound":
            prefsCreateSound();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kSound")));
            break;
        case "timeslider":
            prefsCreateAnim();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kTimeSliderPref")));
            break;
        case "undo":
            prefsCreateAdvanced();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kUndo")));
            break;
        case "saveactions":       
            prefsCreateSaveActions();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kSaveActions")));
            break;
        case "sfmdsecurity":
            prefsCreateTrustCenter();
            prefsSetTabLayout($tabIndex, (uiRes("m_preferencesWnd.kSecurity")));
            break;
        case "sfmdmel":
            prefsCreateSafeModeMELSecPrefs();
            prefsSetTabLayout($tabIndex, (uiRes("m_preferencesWnd.kMELSecurity")));
            break;
        case "sfmdpython":
            prefsCreateSafeModePythonSecPrefs();
            prefsSetTabLayout($tabIndex, (uiRes("m_preferencesWnd.kPythonSecurity")));
            break;
        case "sfmdplugins":
            prefsCreateSafeModePlugSecPrefs();
            prefsSetTabLayout($tabIndex, (uiRes("m_preferencesWnd.kPluginsSecurity")));
            break;
        case "applications":
            prefsExternalApplications();
            prefsSetTabLayout($tabIndex,(uiRes("m_preferencesWnd.kExternalApplications")));
            break;
        default:  
            // For all other custom tabs. 
			// Custom Tab are added using addCustomPrefsTab.mel
			// When creating the preference window we add a unique "CustomTab" tag with a number
			// representing the creation order.   
            if (match( "customtab", $uniqueTag ) != "") {
                int $customTabIndex = (int)`substitute "customtab" $uniqueTag ""`;
                global string $gPrefsCustomTabCreate[];
                global string $gPrefsCustomTabTitles[];
                eval $gPrefsCustomTabCreate[$customTabIndex];
                prefsSetTabLayout($tabIndex,$gPrefsCustomTabTitles[$customTabIndex]);
            }
            break;  
    }
}

proc switchPrefTabsString (string $whichTab)
{
    global string $gPreferenceWindow;
    setParent $gPreferenceWindow;
    
    // Select the item corresponding to the unique tab provided.
    if (catch(`textScrollList -edit -selectUniqueTagItem $whichTab prefIndex`)) {
        textScrollList -edit -selectUniqueTagItem "Interface" prefIndex;
    }
    
    // selectUniqueTabItem can select multi items in the same process.
    // We do not use multi in the preference setting list but the selection signal
    // using selectUniqueTabItem is blocked during the selections so we call the 
    // switchPrefTabs ourself.
    // index 0 provided mean that we want to use what's currently selected in the list.
    switchPrefTabs 0;
}

// Helper that ensures all of the pref category items are formatted the same
proc prefCreateCategory(string $parentTab, string $tabName)
{
	frameLayout -labelVisible false -borderVisible false -marginWidth 10 -marginHeight 10;
	columnLayout -adjustableColumn true $tabName;
	if( $parentTab != "" ) {
		setParent $parentTab;
	}
}

// Creates the preferences windows and select the item 
// corresponding to a unique tag that match the variable provided.
global proc preferencesWnd (string $whichTab)
{
	global string $gPreferenceWindow = "PreferencesWindow";
	 
	// If the window exists already, just show it
	//
	if (`window -exists $gPreferenceWindow`) {
		switchPrefTabsString ($whichTab);
		showWindow $gPreferenceWindow;
		return;
	}	
	
	// When the window opens the disabled tab list should be empty
	global int $gDisabledTabs[];
	$gDisabledTabs = {};

	source createPrefWndUI.mel;
	source updatePrefWndUI.mel;

	global int $gStandardFrameLayoutMarginWidth; // defined in setDefaultTemplates.mel

	//
	// Create a UI template for this window.  
	//
    if (!`uiTemplate -exists prefsTemplate`) {
		uiTemplate prefsTemplate;

		frameLayout -defineTemplate prefsTemplate 
			-labelVisible true 
			-labelIndent 5
			-backgroundShade true 
			-mw $gStandardFrameLayoutMarginWidth;

		separator -defineTemplate prefsTemplate
			-height     2 
			-style      "none";

		columnLayout -defineTemplate prefsTemplate
			-adj true 
			-columnAttach "left" 0;
	}
	
	// Create the window
	//
	string $windowTitle = (uiRes("m_preferencesWnd.kPreferencesTitle"));
	// The default is a bit big on NT.
	if (`about -win`) {
		window -tlc 210 390 -wh 817 531
		   -title $windowTitle  
		   -iconName $windowTitle 
		   -menuBar true
		   $gPreferenceWindow;
	} else {
		window -tlc 210 390 -wh 832 590
		   -title $windowTitle  
		   -iconName $windowTitle 
		   -menuBar true
		   $gPreferenceWindow;
	}

	// 
	// Create the menus in the menubar
	//
	menu -label (uiRes("m_preferencesWnd.kEdit")) ;
        menuItem -label (uiRes("m_preferencesWnd.kRevertToSaved")) 
			-c "revertToSavedPrefs";
        menuItem -label (uiRes("m_preferencesWnd.kRestoreDefaultSetting")) 
            -c "revertToFactoryPrefs";

	menu -label (uiRes("m_preferencesWnd.kHelpMenu"))  -helpMenu true;
		menuItem -label (uiRes("m_preferencesWnd.kHelpOnPreferences")) 
			-enableCommandRepeat false
			-command "showHelp PreferencesWindow";
	
	setUITemplate -pushTemplate NONE;

	// Create the top level form layout
	//
	string $prefForm = `formLayout`;

		//
		// The left column is the list of pref titles
		//
		frameLayout -label (uiRes("m_preferencesWnd.kCategories"))  -bv false categoryFrame;
		formLayout categoryLayout;
		
		textScrollList 
			-allowMultiSelection false
			-selectCommand "switchPrefTabs 0"
			prefIndex;

		string $animationTab = (uiRes("m_preferencesWnd.kAnimationTab"));
		
		textScrollList -e -a (uiRes("m_preferencesWnd.kInterfaceTab")) -uniqueTag "Interface" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kUIElementsTab")) -uniqueTag "UIElements" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kViewCubeTab")) -uniqueTag "ViewCube" prefIndex;
		if (exists("steeringWheel"))
		{
			textScrollList -e -a (uiRes("m_preferencesWnd.kSteeringWheelTab")) -uniqueTag "SteeringWheel" prefIndex;
		}
		textScrollList -e -a (uiRes("m_preferencesWnd.kHelpTab")) -uniqueTag "Help" prefIndex;

		textScrollList -e -a (uiRes("m_preferencesWnd.kDisplayTab")) -uniqueTag "Display" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kKinematicsTab")) -uniqueTag "Kinematics" prefIndex;
		
		textScrollList -e -a (uiRes("m_preferencesWnd.kManipulatorsTab")) -uniqueTag "Manipulators" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kNURBSTab")) -uniqueTag "NURBS" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kPolygonsTab")) -uniqueTag "Polygons" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kSubdivsTab")) -uniqueTag "Subdivs" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kFontsTab")) -uniqueTag "Font" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kBluePencilTab")) -uniqueTag "BluePencil" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kSettingsTab")) -uniqueTag "Settings" prefIndex;
		textScrollList -e -a  $animationTab -uniqueTag "Animation" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kAssetsTab")) -uniqueTag "Assets" prefIndex;
		int $nextItem = `textScrollList -q -numberOfItems prefIndex` + 1;
		python( "from maya.plugin.evaluator.cache_ui import cache_ui_preferences_list_item_create" );
		if( ! python( "cache_ui_preferences_list_item_create( '" + $gPreferenceWindow + "', 'prefIndex', " + $nextItem + " )" ) )
		{
			disableTab( $nextItem );
		}
		textScrollList -e -a (uiRes("m_preferencesWnd.kCamerasTab")) -uniqueTag "Cameras" prefIndex;

		// ADSK_CLR_MGT_BEGIN
		textScrollList  -e -a (uiRes("m_preferencesWnd.kColorManagementTab")) -uniqueTag "ColorManagement" prefIndex;
		// ADSK_CLR_MGT_END

		textScrollList -e -a (uiRes("m_preferencesWnd.kDynamicsTab")) -uniqueTag "Dynamics" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kFilesTab")) -uniqueTag "FilesProjects" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kFileReferencesTab")) -uniqueTag "FileReferences" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kModelingTab")) -uniqueTag "Modeling" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kNodeEditorTab")) -uniqueTag "NodeEditor" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kRenderingTab")) -uniqueTag "Rendering" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kSearchTab"))       -uniqueTag "Search"    prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kSelectionTab")) -uniqueTag "Selection" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kSnappingTab")) -uniqueTag "Snapping" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kSoundTab")) -uniqueTag "Sound" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kTimesliderTab")) -uniqueTag "TimeSlider" prefIndex;
		textScrollList -e -a (uiRes("m_preferencesWnd.kUndoTab")) -uniqueTag "Undo" prefIndex;
		
		global string $gPrefsCustomTabNames[];
		string $tabName;
        int $customTabIndex = 0;
		for ($tabName in $gPrefsCustomTabNames) {
			textScrollList -e -a $tabName -uniqueTag ("customtab"+$customTabIndex) prefIndex;
            $customTabIndex++;
		}

		textScrollList -e -a (uiRes("m_preferencesWnd.kSaveActionsTab")) -uniqueTag "SaveActions" prefIndex;
        textScrollList -e -a (uiRes("m_preferencesWnd.kTrustCenterTab")) -uniqueTag "sfmdsecurity" prefIndex;
        textScrollList -e -a (uiRes("m_preferencesWnd.kMELTab"))      -uniqueTag "sfmdmel"      prefIndex;
        textScrollList -e -a (uiRes("m_preferencesWnd.kPythonTab"))   -uniqueTag "sfmdpython"   prefIndex;
        textScrollList -e -a (uiRes("m_preferencesWnd.kPluginsTab"))  -uniqueTag "sfmdplugins"  prefIndex;

		if (!`about -mac`) {
			textScrollList -e -a (uiRes("m_preferencesWnd.kModulesTab")) -uniqueTag "Modules" prefIndex;
		}

		if (!`about -win` && !`about -mac`) {
			textScrollList -e -a (uiRes("m_preferencesWnd.kOpenMayaTab")) -uniqueTag "OpenMaya" prefIndex;
		}

		textScrollList -e -a (uiRes("m_preferencesWnd.kApplicationsTab")) -uniqueTag "Applications" prefIndex;

		formLayout -edit
			-af prefIndex "top" 0 
			-af prefIndex "left" 0
			-af prefIndex "right" 0 
			-af prefIndex "bottom" 0 
			categoryLayout;

		if (`about -uiLanguageIsLocalized`) {
			formLayout -e -width 195 categoryLayout;
		} else {
			formLayout -e -width 130 categoryLayout;
		}

		setParent $prefForm;
		
		//
		// The right column is the preference layout
		// Create the tabs for each pref section.
		//
		frameLayout -label (uiRes("m_preferencesWnd.kInterfaceItem")) 
			-bv false prefTitleFrame; 
			
		string $parentTab = `tabLayout 
			-scrollable true
			-tabsVisible false
			-childResizable true
			prefTabs`;

			prefCreateCategory( $parentTab, "prefAppearCol" );		// General Appearance
			prefCreateCategory( $parentTab, "prefElementsCol" );	// Panel Appearance
			prefCreateCategory( $parentTab, "prefViewCubeCol" ); // ViewCube
			if (exists("steeringWheel")) {
				prefCreateCategory( $parentTab, "prefSteeringWheelCol" ); // SteeringWheel
			}
			prefCreateCategory( $parentTab, "prefWindowsCol" );			// Window Appearance
			prefCreateCategory( $parentTab, "prefDisplayCol" );			// General Display
			prefCreateCategory( $parentTab, "prefKinCol" );				// Kinematics
			prefCreateCategory( $parentTab, "prefManipsCol" );			// Manipulator Display
			prefCreateCategory( $parentTab, "prefNURBSCol" );			// NURBS Display
			prefCreateCategory( $parentTab, "prefPolysCol" );			// Polygon Display
			prefCreateCategory( $parentTab, "prefSubdivsCol" );			// Subdiv Display
			prefCreateCategory( $parentTab, "prefFontsCol" );			// Fonts Display
			prefCreateCategory( $parentTab, "prefBluePencilCol" );		// Blue Pencil Display
			prefCreateCategory( $parentTab, "prefSettingsCol" );		// General Application Settings
			prefCreateCategory( $parentTab, "prefKeysCol" );			// Keys
			prefCreateCategory( $parentTab, "prefAssetsCol" );			// Assets
			python( "from maya.plugin.evaluator.cache_ui import cache_ui_preferences_tab_frame_create" );
			python( "cache_ui_preferences_tab_frame_create()" );
			prefCreateCategory( $parentTab, "prefCameraCol" );			// Cameras
			// ADSK_CLR_MGT_BEGIN
			prefCreateCategory( $parentTab, "prefColorManagementCol" );	// Color Management
			// ADSK_CLR_MGT_END
			prefCreateCategory( $parentTab, "prefDynCol" );				// Dynamics
			prefCreateCategory( $parentTab, "prefFileIOCol" );			// File I/O
			prefCreateCategory( $parentTab, "prefFileReferencesCol" );	// File References
			prefCreateCategory( $parentTab, "prefModelingCol" );		// Modeling
			prefCreateCategory( $parentTab, "prefNodeEditorCol" );		// Node Editor
			prefCreateCategory( $parentTab, "prefRenderingCol" );		// Rendering
			prefCreateCategory( $parentTab, "prefSearchCol" );			// Search
			prefCreateCategory( $parentTab, "prefSelectCol" );			// Selection
			prefCreateCategory( $parentTab, "prefSnapCol" );			// Snapping
			prefCreateCategory( $parentTab, "prefSoundCol" );			// Sound
			prefCreateCategory( $parentTab, "prefAnimCol" );			// Timeline
			prefCreateCategory( $parentTab, "prefAdvancedCol" );		// Undo

			// Custom
			global string $gPrefsCustomTabFrameCreate[];
			string $prefsCreateCustomTabFrame;
			for ($frameCreate in $gPrefsCustomTabFrameCreate) {
				eval $frameCreate;
				setParent $parentTab;
			}
			prefCreateCategory( $parentTab, "prefSaveActionsCol" );		// Save Actions
            prefCreateCategory( $parentTab, "prefTrustCenterCol" );		// Global Security Settings
            prefCreateCategory( $parentTab, "prefSfMdMELSecPrefs" );	// MEL
            prefCreateCategory( $parentTab, "prefSfMdPythonSecPrefs" );	// Python
            prefCreateCategory( $parentTab, "prefSfMdPluginsSecPrefs" );// Plugins

			if (!`about -mac`) {
				prefCreateCategory( $parentTab, "prefModulesCol" );		// Modules (not supported on Macintosh)
			}

			if (!`about -win` && !`about -mac`) {
				prefCreateCategory( $parentTab, "prefOpenMayaCol" );	// Open Maya (not available on NT or Macintosh)
			}
			prefCreateCategory( "", "prefExternalAppCol" );				// External Applications.

		//
		// Buttons on the bottom
		//
		setParent $prefForm;
		
		// On save/cancel, remove focus from any UI elements to trigger their change command scripts
		button -label (uiRes("m_preferencesWnd.kSave")) 
			-c ("setFocus prefsSaveBtn; savePrefsChanges")
			prefsSaveBtn;

		button -label (uiRes("m_preferencesWnd.kCancel"))  
			-c ("setFocus prefsCloseBtn; cancelPrefsChanges") 
			prefsCloseBtn;

	setParent $gPreferenceWindow;

	// Fix the layout
	//
	formLayout -e
		-af categoryFrame "top" 5 
		-af categoryFrame "left" 5 
		-an categoryFrame "right"
		-ac categoryFrame "bottom" 5 prefsCloseBtn

		-af prefTitleFrame "top" 5 
		-ac prefTitleFrame "left" 5 categoryFrame
		-af prefTitleFrame "right" 5 
		-ac prefTitleFrame "bottom" 5 prefsCloseBtn

        -af prefsSaveBtn "bottom" 5
		-af prefsSaveBtn "left" 5
		-ap prefsSaveBtn "right" 1 50

		-af prefsCloseBtn "bottom" 5
		-ap prefsCloseBtn "left" 1 50
		-af prefsCloseBtn "right" 5
			
		$prefForm;

	// 
	// Make sure the optionVars are in sync with the real state
	//
	syncPreferencesOptVars("syncOptToCurrent");

	// Save the optionVar state for a restore/cancel
	//
	prefsHoldCurrentState("save");

	// Create the UI in the visible section.
	// If more sections are needed later, they will have to be
	// added in.
	//
	switchPrefTabsString ($whichTab);

	// Add a callback to save the preference changes if the
	// user closes the window through the window manager.
	//
	global int $gPrefWndScriptJob;
	$gPrefWndScriptJob = `scriptJob -protected
							-runOnce true 
							-uiDeleted $gPreferenceWindow 
							savePrefsChanges`;


	setUITemplate -popTemplate;

	showWindow $gPreferenceWindow;
}
