// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
proc setOptionVars(int $forceFactorySettings)
{
	optionVar -init $forceFactorySettings -category "Modify.Match Rotation"
		-iv matchRotateX 1
		-iv matchRotateY 1
		-iv matchRotateZ 1
		;
}

global proc performMatchRotateSetup(string $parent, int $forceFactorySettings)
{
	setOptionVars ($forceFactorySettings);
	setParent $parent;

	int $axisX = `optionVar -q matchRotateX`;
	int $axisY = `optionVar -q matchRotateY`;
	int $axisZ = `optionVar -q matchRotateZ`;

	if ($axisX && $axisY && $axisZ) {
		checkBoxGrp -e -v1 true matchAllCheckBoxGrp;
		checkBoxGrp -e -v1 false -v2 false -v3 false matchXYZCheckBoxGrp;
	} else {
		checkBoxGrp -e -v1 false matchAllCheckBoxGrp;
		checkBoxGrp -e -v1 $axisX -v2 $axisY -v3 $axisZ matchXYZCheckBoxGrp;
	}
}

global proc performMatchRotateCallback(string $parent, int $doIt)
{
	setParent $parent;

	if (`checkBoxGrp -q -v1 matchAllCheckBoxGrp`) {
		optionVar -iv matchRotateX true;
		optionVar -iv matchRotateY true;
		optionVar -iv matchRotateZ true;
	} else {
		optionVar -iv matchRotateX `checkBoxGrp -q -v1 matchXYZCheckBoxGrp`;
		optionVar -iv matchRotateY `checkBoxGrp -q -v2 matchXYZCheckBoxGrp`;
		optionVar -iv matchRotateZ `checkBoxGrp -q -v3 matchXYZCheckBoxGrp`;
	}

	if ($doIt) {
		performMatchRotate 0; 
		addToRecentCommandQueue "performMatchRotate 0" "MatchRotation";
	}
}

proc performMatchRotateOptions()
{
	string $commandName = "performMatchRotate";
	string $callback = ($commandName + "Callback");
	string $setup = ($commandName + "Setup");

	string $layout = getOptionBox();
	setParent $layout;
	setUITemplate -pushTemplate DefaultTemplate;
	waitCursor -state 1;
	tabLayout -tabsVisible 0 -scrollable 1;
	
	string $parent = `columnLayout -adjustableColumn 1`;
	checkBoxGrp -label (uiRes("m_performMatchRotate.kRotation"))
		-ncb 1
		-label1 (uiRes("m_performMatchRotate.kAll"))
		-onc ("checkBoxGrp -e -v1 false -v2 false -v3 false matchXYZCheckBoxGrp")
		matchAllCheckBoxGrp;
		
	checkBoxGrp -ncb 3
		-label1 (uiRes("m_performMatchRotate.kX"))
		-label2 (uiRes("m_performMatchRotate.kY"))
		-label3 (uiRes("m_performMatchRotate.kZ"))
		-onc ("checkBoxGrp -e -v1 false matchAllCheckBoxGrp")
		matchXYZCheckBoxGrp;

	waitCursor -state 0;
	setUITemplate -popTemplate;

	button -edit
		-label `runTimeCommand -q -label MatchRotation`
		-command ($callback + " " + $parent + " " + 1)
		`getOptionBoxApplyBtn`;

	button -edit 
		-command ($callback + " " + $parent + " " + 0 + "; hideOptionBox")
		`getOptionBoxSaveBtn`;

	button -edit
		-command ($setup + " " + $parent + " " + 1)
		`getOptionBoxResetBtn`;

	setOptionBoxTitle `runTimeCommand -q -ann MatchRotationOptions`;
	setOptionBoxHelpTag("MatchRotation");

	eval (($setup + " " + $parent + " " + 0));
	showOptionBox();
}

proc string assembleCmd()
{
	setOptionVars(false);
	int $axisX = `optionVar -q matchRotateX`;
	int $axisY = `optionVar -q matchRotateY`;
	int $axisZ = `optionVar -q matchRotateZ`;

	string $cmd = "";
	if ($axisX || $axisY || $axisZ) {
		$cmd = "matchTransform";
		if ($axisX && $axisY && $axisZ) {
			$cmd += " -rot";
		} else {
			if ($axisX) $cmd += " -rx";
			if ($axisY) $cmd += " -ry";
			if ($axisZ) $cmd += " -rz";
		}
	}
	return $cmd;
}

global proc string performMatchRotate(int $action)
{
	string $cmd = "";
	switch ($action) {
	case 0: // Execute command
		$cmd = `assembleCmd`;
		if ($cmd != "") eval($cmd);
		break;
	case 1: // Options
		performMatchRotateOptions;
		break;
	case 2: // Command string
		$cmd = `assembleCmd`;
		break;
	}
	return $cmd;
}
