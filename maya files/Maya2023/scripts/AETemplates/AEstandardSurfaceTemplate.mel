// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
//  Creation Date:	August 15, 2019
//
//  Procedure Name:
//	AEstandardSurfaceTemplate
//
//  Description Name;
//	Creates the attribute editor controls for the standardSurface Node
//
//  Input Value:
//	nodeName 
//
//  Output Value:
//	None
// 

// Allow rendering plugins to add custom attributes on standardSurface and
// be able to display them in the correct AE layout.
//
// To register a callback, execute once:
//
//     stringArrayInsertAtIndex(0, $gAEstandardSurfaceTemplateCallbacks, "myCallback");
//
// The callback will receive the name of the layout as first parameter and
// should execute standard AE code. Please use a separator to separate the
// dynamic controls of the plugin from the native controls.
//
//  global proc myCallback(int $layoutID) {
//      global int $gAEstandardSurfaceLayout_Emission;
//      if ($layoutID == $gAEstandardSurfaceLayout_Emission) {
//          editorTemplate -addSeparator;
//          editorTemplate -addControl "blackBody";
//      }
//  }
//
// Note 1: If the global variable $gAEstandardSurfaceTemplateCallbacks is not
//         found, it can be loaded with:
//             source AEstandardSurfaceTemplate;
//
// Note 2: Getting the hook to work might require refreshing the AE templates by
//         running the following commands:
//             refreshAE; refreshEditorTemplates;
//
// Example script:
//
// Execute this line first, and only this line:
// source "AETemplates/AEstandardSurfaceTemplate.mel";
// Then execute this script:
// createNode standardSurface;
// for ($ss in `ls -et "standardSurface"`) {
//     addAttr -shortName ms -longName mass -defaultValue 1.0 -minValue 0.001 -maxValue 10000 $ss;
//     addAttr -shortName bb -longName blackBody -defaultValue 1.0 -minValue 0.001 -maxValue 10000 $ss;
// }
// global proc myCallback(int $layoutID) {
//     global int $gAEstandardSurfaceLayout_Emission;
//     if ($layoutID == $gAEstandardSurfaceLayout_Emission) {
//         editorTemplate -addSeparator;
//         editorTemplate -addControl "blackBody";
//     }
//     global int $gAEstandardSurfaceLayout_Coat;
//     if ($layoutID == $gAEstandardSurfaceLayout_Coat) {
//         editorTemplate -addSeparator;
//         editorTemplate -addControl "mass";
//     }
// }
// stringArrayInsertAtIndex(0, $gAEstandardSurfaceTemplateCallbacks, "myCallback");
// select standardSurface2;
// evalDeferred("refreshAE; refreshEditorTemplates;");
//
// End of example script.
global string $gAEstandardSurfaceTemplateCallbacks[];
global proc executeCallbacks( int $layoutID )
{
    global string $gAEstandardSurfaceTemplateCallbacks[];
    for ($callback in $gAEstandardSurfaceTemplateCallbacks) {
        eval ($callback + " " + $layoutID);
    }
}

// Layout IDs for callbacks:
global int $gAEstandardSurfaceLayout_Base = 0;
global int $gAEstandardSurfaceLayout_Specular = 1;
global int $gAEstandardSurfaceLayout_Transmission = 2;
global int $gAEstandardSurfaceLayout_Subsurface = 3;
global int $gAEstandardSurfaceLayout_Coat = 4;
global int $gAEstandardSurfaceLayout_Sheen = 5;
global int $gAEstandardSurfaceLayout_Emission = 6;
global int $gAEstandardSurfaceLayout_ThinFilm = 7;
global int $gAEstandardSurfaceLayout_Geometry = 8;

// We want non-editable but connectable normalCamera
global proc AEshaderBumpNew (string $attrName)
{
	setUITemplate -pst attributeEditorTemplate;

	attrNavigationControlGrp
		-label (uiRes("m_AEstandardSurfaceTemplate.kBumpMapping"))
		-ann (uiRes("m_AEstandardSurfaceTemplate.kA9Bump"))
		-at $attrName
		-dragCallback "AEdragCallback"
		bumpControl;

	setUITemplate -ppt;
}
global proc AEshaderBumpReplace (string $attrName)
{
	attrNavigationControlGrp -edit
		-at $attrName
		bumpControl;
}

// We want non-editable but connectable tangent
global proc AEshaderTangentNew (string $attrName)
{
	setUITemplate -pst attributeEditorTemplate;

	attrNavigationControlGrp
		-label (uiRes("m_AEstandardSurfaceTemplate.kAnisotropicTangent"))
		-ann (uiRes("m_AEstandardSurfaceTemplate.kA9Tangent"))
		-at $attrName
		-dragCallback "AEdragCallback"
		tangentControl;

	setUITemplate -ppt;
}
global proc AEshaderTangentReplace (string $attrName)
{
	attrNavigationControlGrp -edit
		-at $attrName
		tangentControl;
}

// We want non-editable but connectable coat normals
global proc AEshaderCoatBumpNew (string $attrName)
{
	setUITemplate -pst attributeEditorTemplate;

	attrNavigationControlGrp
		-label (uiRes("m_AEstandardSurfaceTemplate.kCoatBumpMapping"))
		-ann (uiRes("m_AEstandardSurfaceTemplate.kA5Bump"))
		-at $attrName
		-dragCallback "AEdragCallback"
		coatBumpControl;

	setUITemplate -ppt;
}
global proc AEshaderCoatBumpReplace (string $attrName)
{
	attrNavigationControlGrp -edit
		-at $attrName
		coatBumpControl;
}

// Dimming parameters based on current values:
global proc AEstandardSurfaceOnAttrChanged(string $nodeName) {
    int $metal_0 = float(getAttr($nodeName + ".metalness")) == 0.0;
    int $metal_1 = float(getAttr($nodeName + ".metalness")) == 1.0;

    string $metalConnections[] = `listConnections -d 0 -s 1 ($nodeName + ".metalness")`;
    if (size($metalConnections) > 0) {
        $metal_0 = 0;
        $metal_1 = 0;
    }

    int $transmission_0 = float(getAttr($nodeName + ".transmission")) == 0.0;
    int $transmission_1 = float(getAttr($nodeName + ".transmission")) == 1.0;

    string $transmissionConnections[] =  `listConnections -d 0 -s 1 ($nodeName + ".transmission")`;
    if (size($transmissionConnections) > 0) {
        $transmission_0 = 0;
        $transmission_1 = 0;
    }

    int $subsurface_0 = float(getAttr($nodeName + ".subsurface")) == 0.0;
    int $subsurface_1 = float(getAttr($nodeName + ".subsurface")) == 1.0;

    string $sssConnections[] = `listConnections -d 0 -s 1 ($nodeName + ".subsurface")`;
    if (size($sssConnections) > 0) {
        $subsurface_0 = 0;
        $subsurface_1 = 0;
    }

    int $thin_walled = int(getAttr($nodeName + ".thinWalled"));

    editorTemplate -dimControl $nodeName "specularIOR" $metal_1;
    editorTemplate -dimControl $nodeName "diffuseRoughness" ($metal_1 || $transmission_1);

    int $dim_base = $metal_0 && $transmission_1;
    editorTemplate -dimControl $nodeName "base" $dim_base;
    editorTemplate -dimControl $nodeName "baseColor" $dim_base;

    $dim_transmission = $metal_1 || $transmission_0;
    $dim_transmission_interior = $dim_transmission || $thin_walled;
    editorTemplate -dimControl $nodeName "transmission" $metal_1;
    editorTemplate -dimControl $nodeName "transmissionColor" $dim_transmission;
    editorTemplate -dimControl $nodeName "transmissionDepth" $dim_transmission_interior;
    editorTemplate -dimControl $nodeName "transmissionScatter" $dim_transmission_interior;
    editorTemplate -dimControl $nodeName "transmissionScatterAnisotropy" $dim_transmission_interior;
    editorTemplate -dimControl $nodeName "transmissionDispersion" $dim_transmission_interior;
    editorTemplate -dimControl $nodeName "transmissionExtraRoughness" $dim_transmission_interior;
    editorTemplate -dimControl $nodeName "transmitAovs" $dim_transmission;

    $dim_subsurface = $metal_1 || $transmission_1 || $subsurface_0;
    $dim_subsurface_radius = $dim_subsurface || $thin_walled;
    editorTemplate -dimControl $nodeName "subsurface" ($metal_1 || $transmission_1);
    editorTemplate -dimControl $nodeName "subsurfaceColor" $dim_subsurface;
    editorTemplate -dimControl $nodeName "subsurfaceRadius" $dim_subsurface_radius;
    editorTemplate -dimControl $nodeName "subsurfaceScale" $dim_subsurface_radius;
    editorTemplate -dimControl $nodeName "subsurfaceType" $dim_subsurface;
    editorTemplate -dimControl $nodeName "subsurfaceAnisotropy" $dim_subsurface;
}

// We want a few presets on IOR:
global proc AEshaderIORNew (string $attrName)
{
	string $tokens[] = `stringToStringArray $attrName "."`;
	string $controlName = $tokens[1] + "Control";

	setUITemplate -pst attributeEditorTemplate;

	string $tooltip = (uiRes("m_AEstandardSurfaceTemplate.kA2IOR"));
	if ($tokens[1] == "coatIOR") {
		$tooltip = (uiRes("m_AEstandardSurfaceTemplate.kA5IOR"));
	}
	if ($tokens[1] == "thinFilmIOR") {
		$tooltip = (uiRes("m_AEstandardSurfaceTemplate.kA8IOR"));
	}

	attrFieldSliderGrp
		-label (uiRes("m_AEstandardSurfaceTemplate.kIOR"))
		-ann $tooltip
		-at $attrName
		$controlName;

	string $attrChildren[] = `layout -q -ca $controlName`;
	popupMenu -b 1 -p $attrChildren[0];

	string $set_value = "setAttr `attrFieldSliderGrp -q -at " + $controlName + "` ";
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kCornea")) -c ($set_value + 1.37);
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kDiamond")) -c ($set_value + 2.42);
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kEthanol")) -c ($set_value + 1.36);
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kFlint")) -c ($set_value + 1.6);
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kGlass")) -c ($set_value + 1.5);
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kIce")) -c ($set_value + 1.31);
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kOlive")) -c ($set_value + 1.47);
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kPlastic")) -c ($set_value + 1.55);
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kSapphire")) -c ($set_value + 1.77);
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kSkin")) -c ($set_value + 1.4);
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kWater")) -c ($set_value + 1.33);

	setUITemplate -ppt;
}
global proc AEshaderNamedReplace (string $attrName)
{
	string $tokens[] = `stringToStringArray $attrName "."`;
	string $controlName = $tokens[1] + "Control";

	attrFieldSliderGrp -edit
		-at $attrName
		$controlName;
}

// We want a few presets on Abbe:
global proc AEshaderAbbeNew (string $attrName)
{
	string $tokens[] = `stringToStringArray $attrName "."`;
	string $controlName = $tokens[1] + "Control";

	setUITemplate -pst attributeEditorTemplate;

	attrFieldSliderGrp
		-label (uiRes("m_AEstandardSurfaceTemplate.kDispersionAbbe"))
		-ann (uiRes("m_AEstandardSurfaceTemplate.kA3Abbe"))
		-at $attrName
		$controlName;

	string $attrChildren[] = `layout -q -ca $controlName`;
	popupMenu -b 1 -p $attrChildren[0];

	string $set_value = "setAttr `attrFieldSliderGrp -q -at " + $controlName + "` ";
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kDiamond")) -c ($set_value + 55);
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kSapphire")) -c ($set_value + 72);

	setUITemplate -ppt;
}

// We want a few presets on subsurface color:
global proc AEshaderSSSNew (string $attrName)
{
	string $tokens[] = `stringToStringArray $attrName "."`;
	string $controlName = $tokens[1] + "Control";

	setUITemplate -pst attributeEditorTemplate;

	attrColorSliderGrp
		-label (uiRes("m_AEstandardSurfaceTemplate.kSSSColor"))
		-ann (uiRes("m_AEstandardSurfaceTemplate.kA4Color"))
		-at $attrName
		$controlName;

	string $attrChildren[] = `layout -q -ca $controlName`;
	popupMenu -b 1 -p $attrChildren[0];

	string $set_value1 = "string $nodeName = basenameEx(`attrColorSliderGrp -q -at " + $controlName + "`); setAttr ($nodeName + \".subsurfaceColor\") ";
	string $set_value2 = "; setAttr ($nodeName + \".subsurfaceRadius\")  ";

	string $set_value = "setAttr `attrFieldSliderGrp -q -at " + $controlName + "` ";
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kApple")) -c ($set_value1 + "0.43 0.21 0.17" + $set_value2 + "11.61 3.88 1.75;");
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kChicken")) -c ($set_value1 + "0.44 0.22 0.14" + $set_value2 + "9.44 3.35 1.79;");
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kCream")) -c ($set_value1 + "0.99 0.94 0.83" + $set_value2 + "15.03 4.66 2.54;");
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kKetchup")) -c ($set_value1 + "0.22 0.01 0.00" + $set_value2 + "4.76 0.57 0.39;");
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kMarble")) -c ($set_value1 + "0.93 0.91 0.88" + $set_value2 + "8.51 5.57 3.95;");
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kPotato")) -c ($set_value1 + "0.86 0.74 0.29" + $set_value2 + "14.27 7.23 2.04;");
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kSkimMilk")) -c ($set_value1 + "0.89 0.89 0.80" + $set_value2 + "18.42 10.44 3.50;");
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kSkin1")) -c ($set_value1 + "0.57 0.31 0.17" + $set_value2 + "3.67 1.37 0.68;");
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kSkin2")) -c ($set_value1 + "0.75 0.57 0.47" + $set_value2 + "4.82 1.69 1.09;");
	menuItem -label (uiRes("m_AEstandardSurfaceTemplate.kWholeMilk")) -c ($set_value1 + "0.95 0.93 0.85" + $set_value2 + "10.90 6.58 2.51;");

	setUITemplate -ppt;
}
global proc AEshaderSSSReplace (string $attrName)
{
	string $tokens[] = `stringToStringArray $attrName "."`;
	string $controlName = $tokens[1] + "Control";

	attrColorSliderGrp -edit
		-at $attrName
		$controlName;
}

global proc AEstandardSurfaceTemplate ( string $nodeName )
{
	AEswatchDisplay $nodeName;
	editorTemplate -beginScrollLayout;
		editorTemplate -callCustom AEshaderTypeNew AEshaderTypeReplace "message";

		editorTemplate -beginLayout (uiRes("m_AEstandardSurfaceTemplate.kSSBaseLayout")) -collapse 0;
			editorTemplate -addControl -label (uiRes("m_AEstandardSurfaceTemplate.kWeight"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA1Weight"))
				"base";
			editorTemplate -addControl -label (uiRes("m_AEstandardSurfaceTemplate.kColor"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA1Color"))
				"baseColor";
			editorTemplate -addControl
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA1Rough"))
				"diffuseRoughness";
			editorTemplate -addControl
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA1Metal"))
				"metalness" AEstandardSurfaceOnAttrChanged;
			global int $gAEstandardSurfaceLayout_Base;
			executeCallbacks($gAEstandardSurfaceLayout_Base);
		editorTemplate -endLayout;

		editorTemplate -beginLayout (uiRes("m_AEstandardSurfaceTemplate.kSpecular")) -collapse 0;
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kWeight"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA2Weight"))
				"specular";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kColor"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA2Color"))
				"specularColor";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kRoughness"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA2Rough"))
				"specularRoughness";
			editorTemplate -callCustom "AEshaderIORNew" "AEshaderNamedReplace" "specularIOR";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kAnisotropy"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA2Anis"))
				"specularAnisotropy";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kRotation"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA2Rot"))
				"specularRotation";
			global int $gAEstandardSurfaceLayout_Specular;
			executeCallbacks($gAEstandardSurfaceLayout_Specular);
		editorTemplate -endLayout;

		editorTemplate -beginLayout (uiRes("m_AEstandardSurfaceTemplate.kTransmission")) -collapse 1;
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kWeight"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA3Weight"))
				"transmission" AEstandardSurfaceOnAttrChanged;
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kColor"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA3Color"))
				"transmissionColor";
			editorTemplate -addControl -label (uiRes("m_AEstandardSurfaceTemplate.kDepth"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA3Depth"))
				"transmissionDepth";
			editorTemplate -addControl -label (uiRes("m_AEstandardSurfaceTemplate.kScatter"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA3Scatt"))
				"transmissionScatter";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kScatterAnisotropy"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA3Anis"))
				"transmissionScatterAnisotropy";
			editorTemplate -callCustom "AEshaderAbbeNew" "AEshaderNamedReplace" "transmissionDispersion";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kExtraRoughness"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA3XRough"))
				"transmissionExtraRoughness";
			global int $gAEstandardSurfaceLayout_Transmission;
			executeCallbacks($gAEstandardSurfaceLayout_Transmission);
		editorTemplate -endLayout;

		editorTemplate -beginLayout (uiRes("m_AEstandardSurfaceTemplate.kSubsurface")) -collapse 1;
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kWeight"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA4Weigth"))
				"subsurface" AEstandardSurfaceOnAttrChanged;
			editorTemplate -callCustom "AEshaderSSSNew" "AEshaderSSSReplace" "subsurfaceColor";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kRadius"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA4Radius"))
				"subsurfaceRadius";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kScale"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA4Scale"))
				"subsurfaceScale";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kAnisotropy"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA4Anis"))
				"subsurfaceAnisotropy";
			global int $gAEstandardSurfaceLayout_Subsurface;
			executeCallbacks($gAEstandardSurfaceLayout_Subsurface);
		editorTemplate -endLayout;

		editorTemplate -beginLayout (uiRes("m_AEstandardSurfaceTemplate.kCoat")) -collapse 1;
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kWeight"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA5Weight"))
				"coat";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kColor"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA5Color"))
				"coatColor";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kRoughness"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA5Rough"))
				"coatRoughness";
			editorTemplate -callCustom "AEshaderIORNew" "AEshaderNamedReplace" "coatIOR";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kAnisotropy"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA5Anis"))
				"coatAnisotropy";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kRotation"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA5Rot"))
				"coatRotation";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kAffectColor"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA5AffectC"))
				"coatAffectColor";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kAffectRoughness"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA5AffectR"))
				"coatAffectRoughness";
			editorTemplate -callCustom "AEshaderCoatBumpNew" "AEshaderCoatBumpReplace" "coatNormal";
			global int $gAEstandardSurfaceLayout_Coat;
			executeCallbacks($gAEstandardSurfaceLayout_Coat);
		editorTemplate -endLayout;

		editorTemplate -beginLayout (uiRes("m_AEstandardSurfaceTemplate.kSheen")) -collapse 1;
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kWeight"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA6Weight"))
				"sheen";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kColor"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA6Color"))
				"sheenColor";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kRoughness"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA6Rough"))
				"sheenRoughness";
			global int $gAEstandardSurfaceLayout_Sheen;
			executeCallbacks($gAEstandardSurfaceLayout_Sheen);
		editorTemplate -endLayout;

		editorTemplate -beginLayout (uiRes("m_AEstandardSurfaceTemplate.kEmission")) -collapse 1;
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kWeight"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA7Weight"))
				"emission";
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kColor"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA7Color"))
				"emissionColor";
			global int $gAEstandardSurfaceLayout_Emission;
			executeCallbacks($gAEstandardSurfaceLayout_Emission);
		editorTemplate -endLayout;

		editorTemplate -beginLayout (uiRes("m_AEstandardSurfaceTemplate.kThinFilm")) -collapse 1;
			editorTemplate -addControl
				-label (uiRes("m_AEstandardSurfaceTemplate.kThickness"))
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA8Thick"))
				"thinFilmThickness";
			editorTemplate -callCustom "AEshaderIORNew" "AEshaderNamedReplace" "thinFilmIOR";
			global int $gAEstandardSurfaceLayout_ThinFilm;
			executeCallbacks($gAEstandardSurfaceLayout_ThinFilm);
		editorTemplate -endLayout;

		editorTemplate -beginLayout (uiRes("m_AEstandardSurfaceTemplate.kGeometry")) -collapse 1;
			editorTemplate -addControl
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA9Thin"))
				"thinWalled" AEstandardSurfaceOnAttrChanged;
			editorTemplate -addControl
				-ann (uiRes("m_AEstandardSurfaceTemplate.kA9Opacity"))
				"opacity";
			editorTemplate -callCustom "AEshaderBumpNew" "AEshaderBumpReplace" "normalCamera";
			editorTemplate -callCustom "AEshaderTangentNew" "AEshaderTangentReplace" "tangentUCamera";
			global int $gAEstandardSurfaceLayout_Geometry;
			executeCallbacks($gAEstandardSurfaceLayout_Geometry);
		editorTemplate -endLayout;

		AEstandardSurfaceOnAttrChanged $nodeName;

        // Hardwareshader:
        editorTemplate -suppress "hardwareShader";
        // Others:
        editorTemplate -suppress "pointCamera";
        editorTemplate -suppress "rayDirection";

        // include/call base class/node attributes
        AEdependNodeTemplate $nodeName;

        if(isLegacyViewportEnabled())
        {
            //
            // Add the Hardware texture section only if the user enable the legacy viewport
            //          
            editorTemplate -beginLayout (uiRes("m_AEstandardSurfaceTemplate.kHardwareTexturing")) -collapse true;
                AEhardwareTextureTemplate $nodeName
                    ("color transparency ambientColor incandescence "+
                     "normalCamera diffuse translucence cosinePower "+
                     "specularColor reflectivity reflectedColor");
            editorTemplate -endLayout;
        }

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
}
