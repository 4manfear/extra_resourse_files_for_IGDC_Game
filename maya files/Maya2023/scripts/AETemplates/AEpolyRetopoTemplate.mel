// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
//  Creation Date:	Aug 5, 2016
//
//  Procedure Name:
//	AEpolyRetopoTemplate
//
//  Description Name;
//	Creates the attribute editor controls for the polyRetopo Node
//
//  Input Value:
//	nodeName 
//
//  Output Value:
//	None
// 

proc string AEpolyRetopoTemplate_NodeName(string $strNodeName)
{
	string $strBuffer[];
	tokenize($strNodeName, ".", $strBuffer);
	return $strBuffer[0];
}

proc updateScriptJobs( string $node, string $uiParent )
{
	// The custom callbacks should have the current parent set correctly before
	// being called by Maya, which makes it possible to correctly update the actual
	// AE as well as torn off floating AE tabs.
	// We are assuming that's the case here...

	if (!`iconTextStaticLabel -q -exists ReformStats`)
		return;

	string $statsWidget = `iconTextStaticLabel -q -fullPathName ReformStats`;

	// When you ask for a custom callback and only give Maya the object, instead
	// of a plug (object.attribute) then Maya sends you a string that is actually
	// the object twice.  e.g. if you ask for a custom callback for pCube1 then
	// the name sent to the callback functions will be "pCube1.pCube1".
	// This little utility proc just returns the first bit for us.
	string $nodeName = AEpolyRetopoTemplate_NodeName($node);

	// Parenting the scriptJob to the parent label widget so it gets deleted
	scriptJob -rp -p $statsWidget -attributeChange ($nodeName + ".output") 
		("AEpolyRetopoTemplate_Update(\"" + $nodeName + "\", \"" + $uiParent + "\");");

	// Call the update proc to make sure UI is in correct state
	AEpolyRetopoTemplate_Update($node, $uiParent);
}

global proc AEpolyRetopoTemplate_Update( string $node_node, string $uiParent )
{
	string $node = AEpolyRetopoTemplate_NodeName($node_node);

	int $nodeState = `getAttr ($node + ".nodeState")`;

	string $cp = `setParent -q`;
	setParent $uiParent;

    if (0 == $nodeState)
	{
		symbolButton -e -image "switchOff" RealTimeUpdate;
	}
	else
	{
		symbolButton -e -image "switchOn" RealTimeUpdate;
	}

	string $facesL = (uiRes("m_AEpolyRetopoTemplate.kFacesLabel"));
	string $faceCount = "";
	string $conn[] = `listConnections ($node + ".output")`;
	if (0 < `size $conn` && `objExists $conn[0]`)
	{
		int $nbF[];
		catchQuiet ($nbF = `polyEvaluate -face $conn[0]`);
		if ( $nbF[0] > 0)
		{
			$faceCount = $nbF[0];
		}
	}
	string $uiLabel = ("(" + $facesL + " " + $faceCount + ")");
	
	text -edit -label $uiLabel FaceCountLabel;

	setParent $cp;
}

global proc AEpolyRetopoTemplate__ToggleRealtime( string $node_node )
{
	string $node = AEpolyRetopoTemplate_NodeName($node_node);

	int $nodeState = `getAttr ($node + ".nodeState")`;

    if (0 != $nodeState)
	{
		symbolButton -e -image "switchOff" RealTimeUpdate;
        setAttr ($node + ".nodeState") 0;
	}
	else
	{
		symbolButton -e -image "switchOn" RealTimeUpdate;
        setAttr ($node + ".nodeState") 2;
	}
}

global proc AEpolyRetopoTemplate_New ( string $node )
{
    string $form = `formLayout -bgc 0.286 0.286 0.286`;
    
	string $retopoL = (uiRes("m_AEpolyRetopoTemplate.kRetopologizeLabel"));
    string $iconLabel = `iconTextStaticLabel -st "iconAndTextHorizontal" 
			-font "boldLabelFont" -label $retopoL -i1 "polyRetopo" ReformStats`;

	string $faceCountLabel = `text -label (uiRes("m_AEpolyRetopoTemplate.kFacesLabel")) FaceCountLabel`;
    
	string $tooltip = (uiRes("m_AEpolyRetopoTemplate.kPauseAnn"));
	string $updateLabel = `text -label (uiRes("m_AEpolyRetopoTemplate.kPauseLabel")) -annotation $tooltip`;
	string $updateButton = `symbolButton -image "switchOn" -annotation $tooltip RealTimeUpdate`;

    formLayout -edit
        -attachNone $iconLabel "right"
        -attachForm $iconLabel "left" 2
        -attachForm $iconLabel "bottom" 2
        -attachForm $iconLabel "top" 2

        -attachControl $faceCountLabel "left" 5 $iconLabel
        -attachNone $faceCountLabel "right"
        -attachForm $faceCountLabel "bottom" 2
        -attachForm $faceCountLabel "top" 2

        -attachForm $updateButton "right" 2
        -attachNone $updateButton "left"
        -attachForm $updateButton "bottom" 2
        -attachForm $updateButton "top" 2

        -attachControl $updateLabel "right" 2 $updateButton
        -attachNone $updateLabel "left"
        -attachForm $updateLabel "bottom" 2
        -attachForm $updateLabel "top" 2

    $form;

	setParent ..;

	AEpolyRetopoTemplate_Replace( $node );
}

global proc AEpolyRetopoTemplate_Replace ( string $node )
{
    symbolButton -edit -command ("AEpolyRetopoTemplate__ToggleRealtime(\"" + $node + "\")") RealTimeUpdate;

	string $uiParent = `setParent -q`;
	updateScriptJobs( $node, $uiParent );
}

global proc AEpolyRetopoTemplate ( string $nodeName )
{
	editorTemplate -beginScrollLayout;

		// Passing in a custom callback for the object itself, not a specific attribute.
		// We will use this callback + some scriptJobs to add/update the UI for the face count
		// UI + some other custom bits.
		editorTemplate -ccu "AEpolyRetopoTemplate_New" "AEpolyRetopoTemplate_Replace" $nodeName;

		editorTemplate -beginLayout (uiRes("m_AEpolyRetopoTemplate.kPPFrame")) -collapse 0;
			editorTemplate -beginNoOptimize;
				editorTemplate -ann (uiRes("m_performPolyRetopo.kPreprocessMeshAnn")) -addControl "preprocessMesh";
				editorTemplate -ann (uiRes("m_performPolyRetopo.kPreserveHardEdgesAnn")) -addControl "preserveHardEdges";
			editorTemplate -endNoOptimize;
		editorTemplate -endLayout;

		// direction field attributes
		editorTemplate -beginLayout (uiRes("m_AEpolyRetopoTemplate.kFaceCount")) -collapse 0;
			editorTemplate -ann (uiRes("m_performPolyRetopo.kFaceCountAnn")) -addControl "targetFaceCount" "AEpolyRetopoTargetFaceCountChanged";
			editorTemplate -label (uiRes("m_AEpolyRetopoTemplate.kTolerance")) -ann (uiRes("m_performPolyRetopo.kFaceCountTolAnn")) -addControl "targetFaceCountTolerance";
		editorTemplate -endLayout;

		string $anisotropyAnn1 = (uiRes("m_performPolyRetopo.kAnisotropyAnn"));
		string $anisotropyAnn2 = (uiRes("m_performPolyRetopo.kAnisotropyTipAnn"));

		editorTemplate -beginLayout (uiRes("m_AEpolyRetopoTemplate.kTopology")) -collapse 0;
			editorTemplate -ann (uiRes("m_performPolyRetopo.kRegularityAnn")) -addControl "topologyRegularity";
			editorTemplate -ann (uiRes("m_performPolyRetopo.kFaceUniformityAnn")) -addControl "faceUniformity";
			editorTemplate -ann ($anisotropyAnn1 + "\n" + $anisotropyAnn2) -addControl "anisotropy" ;
		editorTemplate -endLayout;

		editorTemplate -suppress "targetEdgeDeviation";
		editorTemplate -suppress "curveSingularitySeparation";
		editorTemplate -suppress "curveInfluenceDirection";
		editorTemplate -suppress "featureTags";

		// include/call base class/node attributes		
		AEpolyModifierInclude $nodeName;

	editorTemplate -addExtraControls;
	editorTemplate -endScrollLayout;
}

global proc AEpolyRetopoTargetFaceCountChanged( string $nodeName )
{
	// TODO: the attrs have been replaced with something new.  Not sure
	// if the new attrs should also be dimmed.

    //if ( `objExists $nodeName` == 0 )
    //    return;

    //string $nodeAttr = $nodeName + ".targetFaceCount";
    //int $numFaces = `getAttr $nodeAttr`;

    //editorTemplate -dimControl $nodeName "targetEdgeLengthMin" ($numFaces);
    //editorTemplate -dimControl $nodeName "targetEdgeLengthMax" ($numFaces);
}

