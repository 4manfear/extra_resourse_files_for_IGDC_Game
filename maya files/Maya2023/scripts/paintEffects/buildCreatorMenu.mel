// ===========================================================================
// Copyright 2022 Autodesk, Inc. All rights reserved.
//
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
// ===========================================================================
//
//
//  Creation Date:  16 Feb 1999
//
//
//
//  Description:
//      This implements the "Display" menu on the main menubar.
//


// Helper procs. these are approxomately in the same order the items are in the Display menu

// global proc gridMenuUpdate() {
// //
// // This is called when a "gridDisplayChanged" event is detected.
// // Update the menu item, the option var and the gShowGrid variable.
// //
// 	if( `menuItem -exists dispGridItem` ) {
// 		menuItem -e -cb `grid -q -tgl` dispGridItem;
// 	}
// }

// global proc viewAxesMenuUpdate() {
// //
// // This is called when a "viewAxesDisplayChanged" event is detected.
// // Update the menu item, the option var and the gToggleViewAxis variable.
// //
// 	if( `menuItem -exists viewAxesItem` ) {
// 		menuItem -e -cb `toggleAxis -q -v` viewAxesItem;
// 	}
// }

// global proc originAxesMenuUpdate() {
// //
// // This is called when a "originAxesDisplayChanged" event is detected.
// // Update the menu item, the option var and the gToggleOriginAxis variable.
// //
// 	if( `menuItem -exists originAxesItem` ) {
// 		menuItem -e -cb `toggleAxis -q -o` originAxesItem;
// 	}
// }

// Moved to brushToolSettings.mel
//global proc brushToolSettings(){
//	if ( !`window -exists PaintEffectsBrushWindow` ){
//
//		window
//			-t "Paint Effects Brush Settings"
//			-width 510 -height 600
//			PaintEffectsBrushWindow;
//
//		// string $lName = `frameLayout -bv 0 -cl 0 -cll 0 -lv 0`;
//		string $cmd = "getDefaultBrush( )";
//		string $defName = `eval $cmd`;
//
//		string $lName = `paneLayout`;
//
//		createEditor $lName $defName;
//
//		setParent ..;
//		frameLayout;
//		nameField -ncc ("brushNameCallback " + $lName) -o $defName;
//	}
//
//	showWindow PaintEffectsBrushWindow;
//}

global proc creatorGlobalSettings(){

	if ( !`window -exists CreatorGlobalsWindow` ){
        string $windowTitle = (uiRes("m_buildCreatorMenu.kPaintsEffectsGlobals"));
		window -title $windowTitle
			-iconName $windowTitle
			-width 510 -height 600
			CreatorGlobalsWindow;

		string $lName = `frameLayout -bv 0 -cl 0 -cll 0 -lv 0`;

		createEditor $lName "strokeGlobals";
	}

	showWindow CreatorGlobalsWindow;
}

global proc checkPresetBlend()
{
	global int $gPresetBlending;

	if(`menuItem -q -cb presetBlendMenu`)
	{
		$gPresetBlending = 1;
	}
	else
	{
		$gPresetBlending = 0;
		if (`window -ex brushPresetBlendWnd`)
		{
			deleteUI -window brushPresetBlendWnd;
		}
		
	}
}

global proc changeTubeDirection()
{
	int $attr;
	string $brush;

	$brush = getDefaultBrush();
	$attr = `getAttr($brush + ".tubeDirection")`;
	$attr = !$attr;
	setAttr ($brush + ".tubeDirection") $attr;
}

global proc updateCreatorMenu(string $parent)
{
	global string $gCreatorWireCtx;
		int $doProject = `dynWireCtx -q -dp $gCreatorWireCtx`;
		menuItem -e -radioButton ($doProject) ($parent + "|PaintOnPaintable");
		menuItem -e -radioButton (!$doProject) ($parent + "|PaintOnPlane");
}

global proc buildCreatorMenu ( string $parent ) {
//
//	Build the Creator menu.  Checks to see if it's already
//	been built, and returns if this is true.
//
	setParent -m $parent;

	string $characterGeneratorURL = "https://charactergenerator.autodesk.com/account/MyAvatars.aspx";
	string $recapURL = "https://recap360.autodesk.com/";

	menuItem -divider true -dividerLabel (uiRes("m_buildCreatorMenu.kCloudServicesDivider"));

		menuItem -label (uiRes("m_buildCreatorMenu.kCharacterGenerator"))
			-version "2016"
			-annotation  (uiRes("m_buildCreatorMenu.kCharacterGeneratorAnnot"))
			-command ( "showHelp -absolute \"" + $characterGeneratorURL + "\"" );

		menuItem -label (uiRes("m_buildCreatorMenu.kReCap"))
			-version "2016"
			-annotation  (uiRes("m_buildCreatorMenu.kReCapAnnot"))
			-command ( "showHelp -absolute \"" + $recapURL + "\"" );

	global string	$gCreatorWireCtx;
	global int		$gPresetBlending;
	string			$flipTubeDirMenu;

	// "Paint Effects" is under "MODELING->Generate".
//	if( `menu -q -ni $parent` == 0 ) {

	menuItem -divider true -dividerLabel (uiRes("m_buildCreatorMenu.kPaintEffectsDivider"));

		string $cmd = "PaintEffectsTool";
		menuItem 
			-rtc $cmd;
			$cmd = "PaintEffectsToolOptions";
			menuItem -optionBox true
				-rtc $cmd;
	
			$cmd = "MakePaintable";
			menuItem 
				-rtc ($cmd);

		menuItem -d true -ld false;

		menuItem -rtc "PfxGetBrush";
					
		$cmd = "TemplateBrushSettings";
		menuItem 
			-rtc $cmd;
		$cmd = "ResetTemplateBrush";
		menuItem 
			-rtc $cmd;

		menuItem -rtc "PfxFlipTubeDir" flipTubeDirMenu;

		menuItem -rtc "PfxMakeCollide"
			-version "2014" pfxMakeCollideMenu;
			
		menuItem -d true -ld false;
		
			radioMenuItemCollection;
			$cmd = "PaintOnPaintableObjects";
			menuItem
				-radioButton ( false )
				-rtc ($cmd) PaintOnPaintable;
			$cmd = "PaintOnViewPlane";
			menuItem
				-radioButton ( false )
				-rtc ($cmd) PaintOnPlane;

			menuItem -d true -ld false;
			
			$cmd = "ApplySettingsToLastStroke";
			menuItem 
				-rtc  $cmd;
			$cmd = "GetSettingsFromSelectedStroke";
			menuItem 
				-rtc $cmd;
			$cmd = "ApplySettingsToSelectedStroke";
			menuItem
				-rtc $cmd;
			
			menuItem -d true -ld false;
			
			$cmd = "ShareOneBrush";
			menuItem 
				-rtc $cmd;
			$cmd = "RemoveBrushSharing";
			menuItem
				-rtc $cmd;

			$cmd = "SelectBrushNames";
			menuItem
				-rtc $cmd;

			menuItem -d true -ld false;

			menuItem -rtc "CreateLineModifier";
			menuItem -rtc "PfxSetLineModifierObject"
				-version "2014";
				
			menuItem -d true -ld false;

			menuItem -l  (uiRes("m_buildCreatorMenu.kPfxBrushAnim")) -subMenu true -aob true; 

			$cmd = "LoopBrushAnimation";
			menuItem 
				 -rtc $cmd
            	 -dmc "performLoopBrushAnim 2";
    		menuItem -optionBox true -command "LoopBrushAnimationOptions";

			$cmd = "MakeBrushSpring";
			menuItem 
				 -rtc $cmd
        	     -dmc "performMakeBrushSpring 2";
    		menuItem -optionBox true -command "MakeBrushSpringOptions";

			$cmd = "BakeSpringAnimation";
			menuItem 
				 -rtc $cmd
             	 -dmc "performBakeBrushSpringAnim 2";
    		menuItem -optionBox true -command "BakeSpringAnimationOptions";

			setParent -m ..;

			menuItem -l  (uiRes("m_buildCreatorMenu.kPfxCurveUtils")) -subMenu true -aob true;
			$cmd = "SimplifyStrokePathCurves";
			menuItem 
				-rtc $cmd;

			$cmd = "SetStrokeControlCurves";
			menuItem 
				-rtc $cmd;

			$cmd = "AttachBrushToCurves";
			menuItem
				-rtc $cmd;
				
			menuItem -rtc "PfxBrushTransfer";

			$cmd = "MakePressureCurve";
			menuItem 
				 -rtc $cmd
            	 -dmc "performMakePressureCurve 2";
    		menuItem -optionBox true -command "MakePressureCurveOptions";

			setParent -m ..;
			menuItem -l (uiRes("m_buildCreatorMenu.kPfxAutoPaint")) -subMenu true -aob true;
			$cmd = "PaintGrid";
			menuItem
				-rtc $cmd
           		-dmc "performPaintGrid 2";
    		menuItem -optionBox true -command "PaintGridOptions";

			$cmd = "PaintRandom";
			menuItem
				-rtc $cmd
           		-dmc "performPaintRandom 2";
   			menuItem -optionBox true -command "PaintRandomOptions";

			setParent -m ..;
		
			menuItem -d true -ld false;

		$cmd = "PaintEffectsGlobalSettings";
		menuItem
			-rtc $cmd;

		$cmd = "PaintEffectsMeshQuality";
		menuItem
			-rtc $cmd;

		menuItem -rtc "PfxPresetBlend" -cb false presetBlendMenu;

		$cmd = "PresetBlendingWindow";
		menuItem -ecr false -optionBox 1
			-rtc $cmd;

		$cmd = "SaveBrushPreset";
		menuItem 
			-rtc $cmd;

		updateCreatorMenu($parent);
//	}
}

