
//**************************************************************************/
// Copyright 2015 Autodesk, Inc.
// All rights reserved.
// Use of this software is subject to the terms of the Autodesk license
// agreement provided at the time of installation or download, or which
// otherwise accompanies this software in either electronic or hard copy form.
//**************************************************************************/

// World-view-projection transformation.
float4x4 gWVPXf : WorldViewProjection < string UIWidget = "None"; >;

// Target size.
float2 gTargetSize : ViewportPixelSize < string UIWidget = "None"; >;

// The single filter input, i.e. the image to be filtered.
texture gInputTex : InputTexture
<
    string UIName = "Input Texture";
>;

// Filter input sampler.
sampler2D gInputSamp = sampler_state
{
    Texture = <gInputTex>;
    MinFilter = Point;
    MagFilter = Point;
    MipFilter = Point;
};

// Fish-eye options
float aperture 
<
    string UIName = "Aperture";
    string UIWidget = "slider";
    float UIMin = 1.0f;
    float UIMax = 180.0f;
    float UIStep = 1.0f;
> = 178.0;

// Vertex shader input structure.
struct VS_INPUT
{
    float4 Pos : POSITION;
    float3 UV : TEXCOORD0;
};

// Vertex shader output structure.
struct VS_TO_PS
{
    float4 HPos : POSITION;
    float3 UV : TEXCOORD0;
};

// Vertex shader.
VS_TO_PS VS_FilterFishEye(VS_INPUT In)
{
    VS_TO_PS Out;
    
    // Transform the position from object space to clip space for output.
    Out.HPos = mul(gWVPXf, In.Pos);
    
    // Pass the texture coordinates unchanged.
    Out.UV = In.UV;
    
    return Out;
}

// Pixel shader.
float4 PS_FilterFishEye(VS_TO_PS In) : COLOR0
{
	float apertureHalf = 0.5 * aperture * (3.1415926535 / 180.0);
	float maxFactor = sin(apertureHalf);

	float2 uv;
	float2 xy = 2.0 * In.UV.xy - 1.0;
	float d = length(xy);
	if (d < (2.0-maxFactor))
	{
		d = length(xy * maxFactor);
		float z = sqrt(1.0 - d * d);
		float r = atan(d, z) / 3.1415926535;
		float phi = atan(xy.y, xy.x);

		uv.x = r * cos(phi) + 0.5;
		uv.y = r * sin(phi) + 0.5;
	}
	else
	{
		uv = In.UV.xy;
	}
	float4 c = tex2D(gInputSamp, uv);
	return c;
}

// The main technique.
technique Main
{
    pass p0
    {
        VertexShader = compile glslv VS_FilterFishEye();
        PixelShader = compile glslf PS_FilterFishEye();
    }
}
