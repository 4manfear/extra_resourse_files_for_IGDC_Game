#ifndef _COMMON_OGSFH_
#define _COMMON_OGSFH_
uniform mat4 gWVPXf : WorldViewProjection;
uniform vec2 gScreenSize : ViewportPixelSize;
attribute VS_INPUT_ScreenQuad
{
vec3 Pos : POSITION;
vec2 UV : TEXCOORD0;
}
attribute VS_TO_PS_ScreenQuad
{
vec2 VSUV : TEXCOORD0;
}
GLSLShader VS_ScreenQuad
{
void main() {
VSUV = UV;
gl_Position=gWVPXf*vec4(Pos,1.0);
}
}
#endif // _COMMON_OGSFH_
uniform texture2D gDirectionTex : InputTexture;
uniform sampler2D DirectionSamp = sampler_state
{
Texture   = <gDirectionTex>;
};
uniform textureCube gHDRCubeTex : InputTexture;
uniform samplerCube HDRCubeSamp = sampler_state
{
Texture   = <gHDRCubeTex>;
};
attribute pixelOut {
vec4 colorOut:COLOR0;
}
GLSLShader PS_CubeToLatLong
{
void main()
{
vec3 dir = texture2D(DirectionSamp, VSUV).rgb;
vec3 color = textureCube(HDRCubeSamp, dir).rgb;
#if GL_ES && SHADER_VERSION == 2
gl_FragColor = vec4( color, 1.0);
#else
colorOut = vec4( color, 1.0);
#endif
}
}
technique Main
{
pass p0
{
VertexShader (in VS_INPUT_ScreenQuad, out VS_TO_PS_ScreenQuad) = VS_ScreenQuad;
PixelShader (in VS_TO_PS_ScreenQuad, out pixelOut) = PS_CubeToLatLong;
}
}
