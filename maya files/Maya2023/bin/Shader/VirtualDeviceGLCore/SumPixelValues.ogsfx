uniform mat4 gWVPXf : WorldViewProjection;
uniform texture2D gSumTexture : InputTexture;
uniform sampler2D gSumSamp = sampler_state
{
Texture   = <gSumTexture>;
};
uniform vec2 gPixelSize;
attribute VS_INPUT
{
vec3 Pos : POSITION;
vec2 UV : TEXCOORD0;
}
attribute VS_TO_PS
{
vec2 VSUV : TEXCOORD0;
vec2 OffsetCoords0 : TEXCOORD1;
vec2 OffsetCoords1 : TEXCOORD2;
vec2 OffsetCoords2 : TEXCOORD3;
vec2 OffsetCoords3 : TEXCOORD4;
}
attribute pixelOut {
vec4 colorOut:COLOR0;
}
GLSLShader VS_SumPixelValues
{
void main()
{
gl_Position = gWVPXf*vec4(Pos,1.0);
VSUV = UV;
vec2 offset = gPixelSize * 0.25;
OffsetCoords0 = UV + vec2(offset.x, offset.y);
OffsetCoords1 = UV + vec2(offset.x, -offset.y);
OffsetCoords2 = UV + vec2(-offset.x, -offset.y);
OffsetCoords3 = UV + vec2(-offset.x, offset.y);
}
}
GLSLShader PS_SumPixelValues
{
void main()
{
vec4 result = vec4(0.0,0.0,0.0,0.0);
result += texture2D(gSumSamp, OffsetCoords0);
result += texture2D(gSumSamp, OffsetCoords1);
result += texture2D(gSumSamp, OffsetCoords2);
result += texture2D(gSumSamp, OffsetCoords3);
#if GL_ES && SHADER_VERSION == 2
gl_FragColor = result;
#else
colorOut = result;
#endif
}
}
technique Main
{
pass p0
{
VertexShader (in VS_INPUT, out VS_TO_PS) = VS_SumPixelValues;
PixelShader (in VS_TO_PS, out pixelOut) = PS_SumPixelValues;
}
}
