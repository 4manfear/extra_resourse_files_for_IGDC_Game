float4x4 gWVPXf : WorldViewProjection < string UIWidget = "None"; >;
texture gDirectionTex : InputTexture
<
string UIName = "Input Texture";
> = NULL;
sampler2D DirectionSamp = sampler_state
{
Texture   = <gDirectionTex>;
};
texture gHDRCubeTex : InputTexture
<
string UIName = "Input Texture";
> = NULL;
samplerCUBE HDRCubeSamp = sampler_state
{
Texture   = <gHDRCubeTex>;
};
struct VS_INPUT
{
float4 Pos : POSITION;
float2 UV : TEXCOORD0;
};
struct VS_TO_PS
{
float4 HPos : POSITION;
float2 UV : TEXCOORD0;
};
VS_TO_PS VS_CubeToLatLong(VS_INPUT In)
{
VS_TO_PS Out;
Out.HPos = mul(In.Pos, gWVPXf);
Out.UV = In.UV;
return Out;
}
float4 PS_CubeToLatLong(VS_TO_PS In) : COLOR
{
float3 dir = tex2D(DirectionSamp, In.UV).rgb;
float3 color = texCUBE(HDRCubeSamp, dir).rgb;
return float4( color, 1.0);
}
technique Main
{
pass p0
{
VertexProgram = compile glslv VS_CubeToLatLong();
FragmentProgram = compile glslf PS_CubeToLatLong();
}
}
