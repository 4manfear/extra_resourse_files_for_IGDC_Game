#ifndef _COMMON_FXH_
#define _COMMON_FXH_
float4x4 gWVPXf : WorldViewProjection
<
string UIWidget = "None";
>;
float2 gScreenSize : ViewportPixelSize < string UIWidget = "None"; >;
static float2 gTexelSize = 1.0f / gScreenSize;
struct VS_INPUT_ScreenQuad
{
float3 Pos : POSITION;
float2 UV : TEXCOORD0;
};
struct VS_TO_PS_ScreenQuad
{
float4 HPos : POSITION;
float2 UV : TEXCOORD0;
};
VS_TO_PS_ScreenQuad VS_ScreenQuad(VS_INPUT_ScreenQuad In)
{
VS_TO_PS_ScreenQuad Out;
#ifdef FX_COMPOSER
Out.HPos = float4(In.Pos, 1.0f);
Out.UV = In.UV + 0.5f / gScreenSize; // D3D9 texel offset
#else
Out.HPos = mul(gWVPXf, float4(In.Pos, 1.0f));
Out.UV = In.UV;
#endif
return Out;
}
#endif // _COMMON_FXH_
#ifndef BLUR_AMOUNT
#define BLUR_AMOUNT 5
#endif
static int gNumSamples = BLUR_AMOUNT * 2 + 1;
#ifndef FX_COMPOSER
texture2D gSourceTex < string UIWidget = "None"; >;
sampler2D gSourceSamp = sampler_state
{
texture = <gSourceTex>;
};
#endif
float4 PS_Blur(VS_TO_PS_ScreenQuad In, uniform sampler2D source, uniform float2 direction) : COLOR0
{
float2 offset = direction * gTexelSize;
float2 UV = In.UV - offset * (gNumSamples - 1) * 0.5f;
float4 sum = 0;
for (int i = 0; i < gNumSamples; i++)
{
sum += tex2D(source, UV);
UV += offset;
}
return float4(sum / gNumSamples);
}
#ifndef FX_COMPOSER
technique BlurHoriz
{
pass p0
{
VertexShader = compile glslv VS_ScreenQuad();
PixelShader = compile glslf PS_Blur(gSourceSamp, float2(1.0f, 0.0f));
}
}
technique BlurVert
{
pass p0
{
VertexShader = compile glslv VS_ScreenQuad();
PixelShader = compile glslf PS_Blur(gSourceSamp, float2(0.0f, 1.0f));
}
}
#endif
