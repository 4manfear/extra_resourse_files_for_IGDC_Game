float4x4 gWVPXf : WorldViewProjection < string UIWidget = "None"; >;
texture2D gColorTex : InputTexture
<
string UIName = "Input Texture";
>;
sampler2D gColorSamp = sampler_state
{
Texture   = <gColorTex>;
};
struct VS_INPUT
{
float3 Pos : POSITION;
float2 UV : TEXCOORD0;
};
struct VS_TO_PS
{
float4 HPos : POSITION;
float2 UV : TEXCOORD0;
};
VS_TO_PS VS_CopyResult(VS_INPUT In)
{
VS_TO_PS Out;
Out.HPos = mul(float4(In.Pos, 1.0f), gWVPXf);
Out.UV = In.UV;
return Out;
}
float4 PS_CopyResult(VS_TO_PS In) : COLOR
{
float4 result = tex2D(gColorSamp, In.UV);
return result / result.w;
}
technique Main
{
pass p0
{
VertexProgram = compile glslv VS_CopyResult();
FragmentProgram = compile glslf PS_CopyResult();
}
}
